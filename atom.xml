<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>code trend</title>
  
  <subtitle>专注软件技术发展趋势，传播软件技术</subtitle>
  <link href="https://r0ad.github.io/atom.xml" rel="self"/>
  
  <link href="https://r0ad.github.io/"/>
  <updated>2023-12-27T06:07:32.355Z</updated>
  <id>https://r0ad.github.io/</id>
  
  <author>
    <name>codeman</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端通过增加XHR钩子来全局增加header</title>
    <link href="https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF%E9%80%9A%E8%BF%87%E5%A2%9E%E5%8A%A0XHR%E9%92%A9%E5%AD%90%E6%9D%A5%E5%85%A8%E5%B1%80%E5%A2%9E%E5%8A%A0header/"/>
    <id>https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF%E9%80%9A%E8%BF%87%E5%A2%9E%E5%8A%A0XHR%E9%92%A9%E5%AD%90%E6%9D%A5%E5%85%A8%E5%B1%80%E5%A2%9E%E5%8A%A0header/</id>
    <published>2023-12-26T16:00:00.000Z</published>
    <updated>2023-12-27T06:07:32.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前端通过修改 XHR 原型来全局增加 header 是采用 XMLHttpRequest 加 hook 方式实现一个简单业务场景。这样可以提高代码的可维护性和可扩展性，减少重复代码的编写。</p><p>比如，在用户登录后，后端返回了一个 token，前端需要在发送的每个请求中都携带这个 token 以进行认证。通过修改 XHR 原型来全局增加 header，可以实现全局性的认证信息添加，无需在每个请求中手动设置 header。</p><p>模拟接口请求 mock 参数的时候也需要全局拦截 xhr 请求，这个时候就需要 hook 对应的 send、open 函数了。</p><h2 id="hook钩子函数"><a href="#hook钩子函数" class="headerlink" title="hook钩子函数"></a>hook钩子函数</h2><p>在JavaScript中，”hook”（钩子）是一种编程模式，它允许开发者在特定的代码执行点插入自定义的逻辑。钩子函数是用于在这些执行点执行自定义逻辑的函数。</p><p>钩子函数通常被设计成可拦截或修改某个操作的执行流程。它们允许开发者在关键步骤中插入自定义的代码，以满足特定的需求，例如添加额外的验证、修改数据、记录日志等。</p><p>在JavaScript中，钩子函数可以通过以下两种方式实现：</p><p>使用原生提供的钩子函数：有些JavaScript库或框架提供了一些特定的钩子函数，供开发者在特定的时机插入自己的代码。例如，在Vue.js中，可以使用created钩子函数在实例被创建后执行自定义逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 自定义逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>自定义钩子函数：开发者可以根据需要在自己的代码中定义钩子函数。这些钩子函数可以是普通的函数，在代码的特定位置被调用。例如，在一个JavaScript类中，可以定义一个钩子方法，用于执行一些特定的逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在方法执行之前执行的钩子函数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">myMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">beforeMethod</span>(); <span class="comment">// 在方法执行之前调用钩子函数</span></span><br><span class="line">    <span class="comment">// 方法的实际逻辑</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">afterMethod</span>(); <span class="comment">// 在方法执行之后调用钩子函数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在方法执行之后执行的钩子函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">instance.<span class="title function_">myMethod</span>(); <span class="comment">// 执行方法，同时触发钩子函数</span></span><br></pre></td></tr></table></figure><p>通过使用钩子函数，开发者可以在适当的时机执行自定义的逻辑，以满足特定的需求。这种模式提供了更大的灵活性和可扩展性，并允许代码的修改不影响原有的执行流程。</p><h2 id="编程例子"><a href="#编程例子" class="headerlink" title="编程例子"></a>编程例子</h2><p>通过hook方式实现修改XMLHttpRequest的send或者open函数来全局增加header。</p><p>方式一，采用闭包修改钩子函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">open, send</span>) &#123;</span><br><span class="line">  <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    open.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口请求前增加自定义业务逻辑处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;diyHeader&quot;</span>, <span class="string">&quot;diyHeader666666666&quot;</span>);</span><br><span class="line">    send.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span>, <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span>);</span><br></pre></td></tr></table></figure><p>方式二，通过hook自定义函数修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookXhr</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> origin = func;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// arguments 是一个对应于传递给函数的参数的类数组对象。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;diyHeader&quot;</span>, <span class="string">&quot;diyHeader666666666&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> origin.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span> = <span class="title function_">hookXhr</span>(<span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span>);</span><br><span class="line"><span class="comment">// XMLHttpRequest.prototype.open = hookXhr(XMLHttpRequest.prototype.open);</span></span><br></pre></td></tr></table></figure><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>编程语言中，比如 Java，是支持将方法声明为私有的，即它们只能被同一个类中的其他方法所调用。</p><p>而 JavaScript 没有这种原生支持，但我们可以使用闭包来模拟私有方法。私有方法不仅仅有利于限制对代码的访问：还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。</p><p>下面的示例展现了如何使用闭包来定义公共函数，并令其可以访问私有函数和变量。这个方式也称为模块模式（module pattern）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> makeCounter = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeBy</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter1</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter2</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 2 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">decrement</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 1 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter2</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br></pre></td></tr></table></figure><p>请注意两个计数器 Counter1 和 Counter2 是如何维护它们各自的独立性的。每个闭包都是引用自己词法作用域内的变量 privateCounter 。</p><p>每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境。然而在一个闭包内对变量的修改，不会影响到另外一个闭包中的变量。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader">mdn xhr setRequestHeader</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures">mdn 闭包</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;前端通过修改 XHR 原型来全局增加 header 是采用 XMLHttpRequest 加 hook 方式实现一个简单业务场景。这样可以提</summary>
      
    
    
    
    <category term="编程技巧" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>高并发编程基础-引言</title>
    <link href="https://r0ad.github.io/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/01-%E5%BC%95%E8%A8%80/"/>
    <id>https://r0ad.github.io/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/01-%E5%BC%95%E8%A8%80/</id>
    <published>2023-12-06T16:00:00.000Z</published>
    <updated>2024-02-01T08:32:45.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5W1H"><a href="#5W1H" class="headerlink" title="5W1H"></a>5W1H</h2><p>这里用“六何”的分析方法概括下即将开始的新主题高并发编程基础系列文章。</p><p>what何事：</p><p>高并发编程指同一时间进行大量任务的处理，同时保持过程稳定和结果一致。Java中使用多线程技术来支撑高并发的场景。“高并发编程基础”指的就是多线程这块技术的内容。</p><p>随着JDK版本的迭代，JDK已经出到23，本文主要基于JDK17版本的源码和api来说明多线程编程技术的使用。一个是因为这个版本稳定兼容性好，第二个是相较于8的版本更加新和优秀。</p><p>why何因：</p><p>Java为多线程提供了基本的工具来支持在多核处理器进行编程的工具类，通过对这款内容的学习可以加深对并发框架的使用原理的了解以及满足日常多线程开发过程的使用。</p><p>where何地：</p><p>“高并发编程基础”会发表在各大技术论坛（掘金、知乎、CSDN等）、公众号和博客（<a href="https://r0ad.github.io/">https://r0ad.github.io/</a>）中。</p><p>when何时:</p><p>预计需要花费一个月时间完成整个基础教程的输出。</p><p>who何人:</p><p>适合希望使用或学习多线程编程或想要自我检查学习成果的人。不足之处可以随时交流指出</p><p>how何法:</p><p>通过源码分析加DEMO实战加图片文字说明的方式输出整个系文档。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p>整个“高并发编程基础”可能的大纲如下，随着后续迭代可能进行增删。</p><ul><li>线程基础知识说明</li><li>Thread构造函数使用说明</li><li>Thread常用API使用说明</li><li>线程安全与数据同步</li><li>并发中的基础概念Monitor</li><li>线程间通信</li><li>AQS的原理和实现</li><li>Java中锁的概念和原理</li><li>对象共享中的可见性问题</li><li>ThreadGroup的使用</li><li>Hook线程以及捕获线程执行异常</li><li>线程池原理以及自定义线程池</li><li>线程上下文通讯</li><li>单例模式与多线程</li><li>Lock的使用</li><li>CAS 原子操作及相关类</li><li>Future 和 FutureTask</li><li>线程池工作原理</li><li>ThreadLocal 底层原理</li><li>等等</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>由于水平限制，“高并发编程基础”参考了很多资料来编写。</p><ul><li>JDK 17 官方文档，用于自查和权威核对 <a href="https://docs.oracle.com/en/java/javase/17/">https://docs.oracle.com/en/java/javase/17/</a></li><li>涉及JDK源码、基础原理介绍的书：《Java高并发编程详解：多线程与架构设计》（基于JDK8）</li><li>涉及Java标准介绍和多线程基础说明的书： 《Java多线程编程核心技术》（基于JDK8）</li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;5W1H&quot;&gt;&lt;a href=&quot;#5W1H&quot; class=&quot;headerlink&quot; title=&quot;5W1H&quot;&gt;&lt;/a&gt;5W1H&lt;/h2&gt;&lt;p&gt;这里用“六何”的分析方法概括下即将开始的新主题高并发编程基础系列文章。&lt;/p&gt;
&lt;p&gt;what何事：&lt;/p&gt;
&lt;p&gt;高并发编</summary>
      
    
    
    
    <category term="高并发编程基础" scheme="https://r0ad.github.io/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Gitlab使用或替换外部Nginx方法说明</title>
    <link href="https://r0ad.github.io/%E8%BF%90%E7%BB%B4/Gitlab%E4%BD%BF%E7%94%A8%E6%88%96%E6%9B%BF%E6%8D%A2%E5%A4%96%E9%83%A8Nginx%E6%96%B9%E6%B3%95%E8%AF%B4%E6%98%8E/"/>
    <id>https://r0ad.github.io/%E8%BF%90%E7%BB%B4/Gitlab%E4%BD%BF%E7%94%A8%E6%88%96%E6%9B%BF%E6%8D%A2%E5%A4%96%E9%83%A8Nginx%E6%96%B9%E6%B3%95%E8%AF%B4%E6%98%8E/</id>
    <published>2023-08-15T16:00:00.000Z</published>
    <updated>2023-12-13T09:23:36.112Z</updated>
    
    <content type="html"><![CDATA[<p>Gitlab 版本没更新就会导致依赖的组件库版本没更新，如果Nginx有漏洞，则需要升级Gitlab，或者第二个选择就是使用外部的Nginx作为服务容器。</p><h2 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h2><p>** 请勿直接在生产或者线上主机上执行。</p><p>具体操作步骤如下：</p><ol><li>备份配置文件 <code>cp /etc/gitlab/gitlab.rb /etc/gitlab/gitlab.rb.20230822.bak</code></li><li>禁用捆绑的 NGINX，在 /etc/gitlab/gitlab.rb 中设置：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx[&#x27;enable&#x27;] = false</span><br></pre></td></tr></table></figure><ol start="2"><li>下载正确的网络服务器配置，访问地址： <a href="https://gitlab.com/gitlab-org/gitlab-recipes/tree/master/web-server">GitLab recipes repository</a></li></ol><p>下面以http的Nginx为例说明，把配置文件放入/etc/nginx/conf.d（默认）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">upstream gitlab-workhorse &#123;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">On GitLab versions before 13.5, the location is</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">`/var/opt/gitlab/gitlab-workhorse/socket`. Change the following line</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">accordingly.</span></span><br><span class="line">  server unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Normal HTTP host</span></span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Either remove &quot;default_server&quot; from the listen line below 如果遇到问题可以删除 default_server</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># or delete the /etc/nginx/sites-enabled/default file. This will cause gitlab</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># to be served if you visit any address that your server responds to, eg.</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># the ip address of the server (http://x.x.x.x/)n 0.0.0.0:80 default_server;</span></span></span><br><span class="line">  listen 0.0.0.0:8088 default_server; # 修改你需要监听的端口</span><br><span class="line">  listen [::]:8088 default_server;</span><br><span class="line">  server_name localhost; ## Replace this with something like gitlab.example.com # 修改配置的域名</span><br><span class="line">  server_tokens off; ## Don&#x27;t show the nginx version number, a security best practice</span><br><span class="line">  root /opt/gitlab/embedded/service/gitlab-rails/public; # 默认位置就是这里</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># See app/controllers/application_controller.rb for headers set</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Individual nginx logs for this GitLab vhost</span></span></span><br><span class="line">  access_log  /var/log/nginx/gitlab_access.log;</span><br><span class="line">  error_log   /var/log/nginx/gitlab_error.log;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    gzip off;</span><br><span class="line"></span><br><span class="line">    ## https://github.com/gitlabhq/gitlabhq/issues/694</span><br><span class="line">    ## Some requests take more than 30 seconds.</span><br><span class="line">    proxy_read_timeout      300;</span><br><span class="line">    proxy_connect_timeout   300;</span><br><span class="line">    proxy_redirect          off;</span><br><span class="line"></span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">    proxy_set_header    Host                $http_host;</span><br><span class="line">    proxy_set_header    X-Real-IP           $remote_addr;</span><br><span class="line">    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header    X-Forwarded-Proto   $scheme;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://gitlab-workhorse;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>执行 <code>sudo gitlab-ctl reconfigure</code> 命令以使更改生效。</p></li><li><p>启动 nginx。</p></li></ol><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>权限不够，界面返回502。解决办法是修改nginx配置文件的启动用户为root或者授权给对应用户。</li><li>出现如下错误：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect() to unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket failed (13:Permission denied) while connecting to upstream</span><br></pre></td></tr></table></figure><p>选择以下选项之一进行修复：</p><ul><li>更新到 14.3 或更高版本，其中包含更新的 SELinux 策略。</li><li>手动获取和更新策略：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://gitlab.com/gitlab-org/omnibus-gitlab/-/raw/a9d6b020f81d18d778fb502c21b2c8f2265cabb4/files/gitlab-selinux/rhel/7/gitlab-13.5.0-gitlab-shell.pp</span><br><span class="line">semodule -i gitlab-13.5.0-gitlab-shell.pp</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.gitlab.cn/14.6/omnibus/settings/nginx.html#%E4%BD%BF%E7%94%A8%E9%9D%9E%E6%8D%86%E7%BB%91%E7%9A%84%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%99%A8">NGINX 配置-Gitlab</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Gitlab 版本没更新就会导致依赖的组件库版本没更新，如果Nginx有漏洞，则需要升级Gitlab，或者第二个选择就是使用外部的Nginx作为服务容器。&lt;/p&gt;
&lt;h2 id=&quot;升级步骤&quot;&gt;&lt;a href=&quot;#升级步骤&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="运维" scheme="https://r0ad.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows端微信多开的技巧</title>
    <link href="https://r0ad.github.io/%E7%BC%96%E7%A8%8B/Windows%E7%AB%AF%E5%BE%AE%E4%BF%A1%E5%A4%9A%E5%BC%80%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    <id>https://r0ad.github.io/%E7%BC%96%E7%A8%8B/Windows%E7%AB%AF%E5%BE%AE%E4%BF%A1%E5%A4%9A%E5%BC%80%E7%9A%84%E6%8A%80%E5%B7%A7/</id>
    <published>2023-07-31T16:00:00.000Z</published>
    <updated>2023-12-13T09:22:34.594Z</updated>
    
    <content type="html"><![CDATA[<p>Windows端微信会根据用户ID创建对应的目录，用于数据的保护和隔离。也就是说微信本身和QQ一样是支持多个同时登陆的，但是在PC端通过常规的方式打开微信只会打开同一个微信。</p><p>下面通过简单的教程教会微信多开的方法。</p><h2 id="通过脚本多开"><a href="#通过脚本多开" class="headerlink" title="通过脚本多开"></a>通过脚本多开</h2><ol><li>安装Windows版本微信，下载地址： <a href="https://weixin.qq.com/">https://weixin.qq.com/</a></li><li>找到对应的安装位置。有几种方法。<ul><li>在桌面找到微信图标，右键“属性”，点击“快捷方式”，其中“目标”的值就是接下来需要的内容。这里的内容是 “C:\Program Files (x86)\Tencent\WeChat\WeChat.exe”</li><li>在桌面找到微信图标，右键“属性”，点击“快捷方式”，点击“打开文件所在位置”，其中地址栏的路径和文件名“WeChat.exe”就是我们需要的内容。这里的路径也是 “C:\Program Files (x86)\Tencent\WeChat\WeChat.exe”</li></ul></li><li>在桌面创建一个文本文件，重命名为“微信多开.bat”。</li></ol><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span> C:\&quot;Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;</span><br><span class="line"><span class="built_in">start</span> C:\&quot;Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;</span><br></pre></td></tr></table></figure><p>注意事项如下：</p><ol><li>需要多开几个就复制几行。</li><li>路径的盘符也就是上面的“C”需要放在引号外面。</li></ol><p>下次需要多开微信的时候直接运行“微信多开.bat”即可多开。</p><h2 id="使用命令提示符多开"><a href="#使用命令提示符多开" class="headerlink" title="使用命令提示符多开"></a>使用命令提示符多开</h2><ol><li>安装Windows版本微信，下载地址： <a href="https://weixin.qq.com/">https://weixin.qq.com/</a></li><li>找到对应的安装位置。在桌面找到微信图标，右键“属性”，点击“快捷方式”，点击“打开文件所在位置”，其中地址栏的路径和文件名“WeChat.exe”就是我们需要的内容。这里的路径也是 “C:\Program Files (x86)\Tencent\WeChat\WeChat.exe”</li><li>在文件夹路径里面输入“cmd”即可打开命令提示符。</li><li>输入命令：<code>start WeChat.exe &amp; WeChat.exe</code> 并按回车。即可实现多开。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows端微信会根据用户ID创建对应的目录，用于数据的保护和隔离。也就是说微信本身和QQ一样是支持多个同时登陆的，但是在PC端通过常规的方式打开微信只会打开同一个微信。&lt;/p&gt;
&lt;p&gt;下面通过简单的教程教会微信多开的方法。&lt;/p&gt;
&lt;h2 id=&quot;通过脚本多开&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="编程技术" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Linux系统Java服务启停的通用shell</title>
    <link href="https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E5%9F%BA%E4%BA%8ELinux%E7%B3%BB%E7%BB%9FJava%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%81%9C%E7%9A%84%E9%80%9A%E7%94%A8shell/"/>
    <id>https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E5%9F%BA%E4%BA%8ELinux%E7%B3%BB%E7%BB%9FJava%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%81%9C%E7%9A%84%E9%80%9A%E7%94%A8shell/</id>
    <published>2023-07-27T16:00:00.000Z</published>
    <updated>2023-12-13T09:21:08.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>应用程序的启停最为显著的特征是端口的占用情况，例如Nginx、Tomcat。除此之外也可以通过进程的文件信息判断进程启停情况。在Linux系统常用的两个命令分别为 <code>lsof</code> 和 <code>ps</code>。在应用的启停中通过监听端口去判断是否存在进行启停是更合理的一种方式。实际使用过程中都会使用到。</p><h3 id="lsof用法"><a href="#lsof用法" class="headerlink" title="lsof用法"></a>lsof用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       lsof - list open files</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       lsof  [  -?abChKlnNOPRtUvVX  ]  [ -A A ] [ -c c ] [ +c c ] [ +|-d d ] [</span><br><span class="line">       +|-D D ] [ +|-e s ] [ +|-E ] [ +|-f [cfgGn] ] [ -F [f] ] [ -g [s]  ]  [</span><br><span class="line">       -i  [i] ] [ -k k ] [ +|-L [l] ] [ +|-m m ] [ +|-M ] [ -o [o] ] [ -p s ]</span><br><span class="line">       [ +|-r [t[m&lt;fmt&gt;]] ] [ -s [p:s] ] [ -S [t] ] [ -T [t] ] [ -u s ] [ +|-w</span><br><span class="line">       ] [ -x [fl] ] [ -z [z] ] [ -Z [Z] ] [ -- ] [names]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Lsof  revision 4.89 lists on its standard output file information about</span><br><span class="line">       files opened by processes for the following UNIX dialects:</span><br><span class="line"></span><br><span class="line">            Apple Darwin 9 and Mac OS X 10.[567]</span><br><span class="line">            FreeBSD 8.[234], 9.0, 10.0 and 11.0 for AMD64-based systems</span><br><span class="line">            Linux 2.1.72 and above for x86-based systems</span><br><span class="line">            Solaris 9, 10 and 11</span><br><span class="line"></span><br><span class="line">       (See the DISTRIBUTION section of this manual page  for  information  on</span><br><span class="line">       how to obtain the latest lsof revision.)</span><br><span class="line"></span><br><span class="line">       An  open file may be a regular file, a directory, a block special file,</span><br><span class="line">       a character special file, an executing text  reference,  a  library,  a</span><br><span class="line">       stream  or  a  network  file  (Internet socket, NFS file or UNIX domain</span><br><span class="line">       socket.)  A specific file or all the files in  a  file  system  may  be</span><br><span class="line">       selected by path.</span><br><span class="line"></span><br><span class="line">       Instead  of  a  formatted display, lsof will produce output that can be</span><br><span class="line">       parsed by other programs.  See the -F, option description, and the OUT‐</span><br><span class="line">       PUT FOR OTHER PROGRAMS section for more information.</span><br><span class="line"></span><br><span class="line">       In  addition to producing a single output list, lsof will run in repeat</span><br><span class="line">       mode.  In repeat mode it will produce output, delay,  then  repeat  the</span><br><span class="line">       output  operation  until stopped with an interrupt or quit signal.  See</span><br><span class="line">       the +|-r [t[m&lt;fmt&gt;]] option description for more information.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ps用法"><a href="#ps用法" class="headerlink" title="ps用法"></a>ps用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       ps - report a snapshot of the current processes.</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ps [options]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       ps displays information about a selection of the active processes.  If you want a repetitive update of the selection and the displayed information, use top(1) instead.</span><br><span class="line"></span><br><span class="line">       This version of ps accepts several kinds of options:</span><br><span class="line"></span><br><span class="line">       1   UNIX options, which may be grouped and must be preceded by a dash.</span><br><span class="line">       2   BSD options, which may be grouped and must not be used with a dash.</span><br><span class="line">       3   GNU long options, which are preceded by two dashes.</span><br><span class="line"></span><br><span class="line">       Options of different types may be freely mixed, but conflicts can appear.  There are some synonymous options, which are functionally identical, due to the many standards and ps</span><br><span class="line">       implementations that this ps is compatible with.</span><br><span class="line"></span><br><span class="line">       Note that &quot;ps -aux&quot; is distinct from &quot;ps aux&quot;.  The POSIX and UNIX standards require that &quot;ps -aux&quot; print all processes owned by a user named &quot;x&quot;, as well as printing all</span><br><span class="line">       processes that would be selected by the -a option.  If the user named &quot;x&quot; does not exist, this ps may interpret the command as &quot;ps aux&quot; instead and print a warning.  This</span><br><span class="line">       behavior is intended to aid in transitioning old scripts and habits.  It is fragile, subject to change, and thus should not be relied upon.</span><br><span class="line"></span><br><span class="line">       By default, ps selects all processes with the same effective user ID (euid=EUID) as the current user and associated with the same terminal as the invoker.  It displays the</span><br><span class="line">       process ID (pid=PID), the terminal associated with the process (tname=TTY), the cumulated CPU time in [DD-]hh:mm:ss format (time=TIME), and the executable name (ucmd=CMD).</span><br><span class="line">       Output is unsorted by default.</span><br><span class="line"></span><br><span class="line">       The use of BSD-style options will add process state (stat=STAT) to the default display and show the command args (args=COMMAND) instead of the executable name.  You can override</span><br><span class="line">       this with the PS_FORMAT environment variable. The use of BSD-style options will also change the process selection to include processes on other terminals (TTYs) that are owned by</span><br><span class="line">       you; alternately, this may be described as setting the selection to be the set of all processes filtered to exclude processes owned by other users or not on a terminal.  These</span><br><span class="line">       effects are not considered when options are described as being &quot;identical&quot; below, so -M will be considered identical to Z and so on.</span><br><span class="line"></span><br><span class="line">       Except as described below, process selection options are additive.  The default selection is discarded, and then the selected processes are added to the set of processes to be</span><br><span class="line">       displayed.  A process will thus be shown if it meets any of the given selection criteria.</span><br></pre></td></tr></table></figure><h2 id="通过监听端口停止应用"><a href="#通过监听端口停止应用" class="headerlink" title="通过监听端口停止应用"></a>通过监听端口停止应用</h2><p>使用lsof加关键词LISTEN获取端口，脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">author： sunz</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">file name: killProcessByPort.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 参数通过运行时传入</span></span></span><br><span class="line">port1=$1</span><br><span class="line">MSG=&quot;shutdown port %s at pid %s  %s \n&quot;</span><br><span class="line"></span><br><span class="line">killByPort()&#123;</span><br><span class="line">pids=$(lsof -i:$port1 | grep LISTEN | awk &#x27;&#123;print $2&#125;&#x27; |xargs)</span><br><span class="line">pids_len=$&#123;#pids[*]&#125;</span><br><span class="line"></span><br><span class="line">if test $pids_len -ne 1</span><br><span class="line">then</span><br><span class="line">printf &quot;port %s has been killed or not start yet. \n&quot; $port1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">for pid in $pids; do</span><br><span class="line">printf &quot;shutdown port %s at pid %s  %s \n&quot; $port1 $pid  &#x27;start&#x27;</span><br><span class="line">kill -9 $pid</span><br><span class="line">CheckKillResult $? $pid</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CheckKillResult()&#123;</span><br><span class="line">result=$1</span><br><span class="line">pid=$2</span><br><span class="line">if test $result -eq 0</span><br><span class="line">then </span><br><span class="line">printf &quot;shutdown port %s at pid %s  %s \n&quot; $port1 $pid  &quot;successs&quot;</span><br><span class="line">else</span><br><span class="line">printf &quot;shutdown port %s at pid %s  %s \n&quot; $port1 $pid  &quot;failed&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">killByPort</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eg <span class="variable">$killProcessByPort</span> 9430</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通过文件名停止应用"><a href="#通过文件名停止应用" class="headerlink" title="通过文件名停止应用"></a>通过文件名停止应用</h2><p>使用ps+awk加应用名关键词获取pid，脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">author： sunz</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">file name: killProcessByName.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 参数通过运行时传入</span></span></span><br><span class="line">name=$1</span><br><span class="line">MSG=&quot;shutdown app %s at pid %s  %s \n&quot;</span><br><span class="line"></span><br><span class="line">killByName()&#123;</span><br><span class="line">pids=$(ps -ef | grep $name |grep java | awk &#x27;&#123;print $2&#125;&#x27; |xargs)</span><br><span class="line">pids_len=$&#123;#pids[*]&#125;</span><br><span class="line"></span><br><span class="line">if test $pids_len -ne 1</span><br><span class="line">then</span><br><span class="line">printf &quot;app %s has been killed or not start yet. \n&quot; $name</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">for pid in $pids; do</span><br><span class="line">printf &quot;shutdown app %s at pid %s  %s \n&quot; $name $pid  &#x27;start&#x27;</span><br><span class="line">kill -9 $pid</span><br><span class="line">CheckKillResult $? $pid</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CheckKillResult()&#123;</span><br><span class="line">result=$1</span><br><span class="line">pid=$2</span><br><span class="line">if test $result -eq 0</span><br><span class="line">then </span><br><span class="line">printf &quot;shutdown app %s at pid %s  %s \n&quot; $name $pid  &quot;successs&quot;</span><br><span class="line">else</span><br><span class="line">printf &quot;shutdown app %s at pid %s  %s \n&quot; $name $pid  &quot;failed&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">killByName</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eg <span class="variable">$killProcessByName</span> spring-boot.jar</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通用启动Java程序脚本"><a href="#通用启动Java程序脚本" class="headerlink" title="通用启动Java程序脚本"></a>通用启动Java程序脚本</h2><p>通过函数式编写启动Java程序脚本有如下优点：</p><ul><li>简化启动应用的脚本维护；</li><li>统一维护一类程序的JVM参数；</li></ul><p>脚本信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">author： sunz</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">file name: startJavaProcess.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 参数通过运行时传入</span></span></span><br><span class="line"></span><br><span class="line">APP=$1</span><br><span class="line">startJavaProcess()&#123;</span><br><span class="line">  echo &quot;start $APP &quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># JVM参数基于Java8</span></span></span><br><span class="line">  JVM=&quot; -Xmx1344M -Xms1344M -Xmn448M -XX:MaxMetaspaceSize=256M -XX:MetaspaceSize=256M -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+CMSClassUnloadingEnabled -XX:+ParallelRefProcEnabled -XX:+CMSScavengeBeforeRemark &quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># 特殊版本java的路径可以通过全路径制定</span></span></span><br><span class="line">  nohup java $JVM -jar $APP &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">  CheckStartResult $? $APP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CheckStartResult()&#123;</span><br><span class="line">result=$1</span><br><span class="line">pid=$2</span><br><span class="line">if test $result -eq 0</span><br><span class="line">then </span><br><span class="line">printf &quot;startup  %s  %s \n&quot; $2 &quot;successs&quot;</span><br><span class="line">else</span><br><span class="line">printf &quot;startup  %s  %s \n&quot; $2 &quot;failed&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startJavaProcess</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> eg  <span class="variable">$startJavaProcess</span> zuul-boot-2.0.0-SNAPSHOT.jar</span></span><br></pre></td></tr></table></figure><h2 id="通过-bashrc-简化程序脚本"><a href="#通过-bashrc-简化程序脚本" class="headerlink" title="通过 ~/.bashrc 简化程序脚本"></a>通过 ~/.bashrc 简化程序脚本</h2><p><code>.bashrc</code> 在用户登录时获取该文件的 <code>aslias</code> 等信息。维护人员可以通过别名简化程序脚本，增加维护效率。</p><p><code>.bash_profile</code> 文件可以维护环境变量，也可以简化该脚本。</p><p><code>.bash_profile</code> 修改过程如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 bash_profile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi .bash_profile</span></span><br><span class="line">SHELL_HOME=&quot;/home/sunz/文档/files/shell/cshell&quot;</span><br><span class="line">killProcessByPort=&#x27;sh $SHELL_HOME/killProcessByPort.sh &#x27;</span><br><span class="line">export killProcessByPort</span><br><span class="line">startJavaProcess=&#x27;sh $SHELL_HOME/startJavaProcess.sh &#x27;</span><br><span class="line">export startJavaProcess</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 bash_profile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">source</span> .bash_profile</span></span><br></pre></td></tr></table></figure><p><code>.bashrc</code> 修改过程如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 bash_profile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi .bash_profile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 <span class="built_in">alias</span> 方法</span></span><br><span class="line">SHELL_HOME=&quot;/home/sunz/文档/files/shell/cshell&quot;</span><br><span class="line">alias startJavaProcess=&#x27;sh $SHELL_HOME/startJavaProcess.sh &#x27;</span><br><span class="line">alias killProcessByPort=&#x27;sh $SHELL_HOME/killProcessByPort.sh &#x27;</span><br></pre></td></tr></table></figure><p>注意不同系统的文件名可能存在差异。</p><h2 id="以user-gatewayin-svc为例子说明使用"><a href="#以user-gatewayin-svc为例子说明使用" class="headerlink" title="以user-gatewayin-svc为例子说明使用"></a>以user-gatewayin-svc为例子说明使用</h2><p>服务部署路径信息 <code>/app/user_projects/user-gatewayin-svc</code> ,目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x 3 app sunz     4096 2月   1 13:40 config</span><br><span class="line">-rw-r--r-- 1 app sunz       86 2月   1 13:47 start.sh</span><br><span class="line">-rw-r--r-- 1 app sunz       19 12月  9 15:57 stop.sh</span><br><span class="line">-rw-r--r-- 1 app sunz 57520835 1月   5 16:10 zuul-boot-2.0.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>其中 <code>start.sh</code> 内容如下;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">startJavaProcess <span class="string">&quot;zuul-boot-2.0.0-SNAPSHOT.jar --spring.profiles.active=dev,dev-in&quot;</span></span></span><br></pre></td></tr></table></figure><p>其中 <code>stop.sh</code> 内容如下;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">killProcess 9450</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;应用程序的启停最为显著的特征是端口的占用情况，例如Nginx、Tomcat。除此之外也可以通过进程的文件信息判断进程启停情况。在Linux系</summary>
      
    
    
    
    <category term="编程技术" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 中开发前端常用插件</title>
    <link href="https://r0ad.github.io/%E7%BC%96%E7%A8%8B/VsCode%E4%B8%AD%E5%BC%80%E5%8F%91%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>https://r0ad.github.io/%E7%BC%96%E7%A8%8B/VsCode%E4%B8%AD%E5%BC%80%E5%8F%91%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</id>
    <published>2023-07-24T16:00:00.000Z</published>
    <updated>2023-12-13T09:12:15.298Z</updated>
    
    <content type="html"><![CDATA[<p>Visual Studio Code 是一款开源全平台的代码开发工具，支持三大平台Windows、Linux、Mac。除了Mac平台没有使用过外，Linux的开发体验和Windows基本一致。</p><p>虽然Visual Studio Code 支持多种语言的开发，但是在后端有IntelliJ IDEA这样的开源版本提供使用，所以在Java Web开发中一般使用IDEA开发后端，Vs Code开发前端。</p><p>Visual Studio Code 作为一款轻量级的IDE，本身不是很强大，但是在开发插件的支持下，前端代码开发也能如鱼得水。</p><p>以下基于笔者开发Web过程中常用插件的推荐。</p><h2 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a>Prettier - Code formatter</h2><p>代码格式对于开发过程来说是很重要的一件事，统一的代码格式能够代码更好的代码阅读体验。</p><p>Prettier 支持多种语言的代码格式化，包括 Js、Vue、Html、Css等等。</p><p>通过搜索 <code>Prettier - Code formatter</code> 安装。</p><h2 id="Vue-Language-Features-Volar"><a href="#Vue-Language-Features-Volar" class="headerlink" title="Vue Language Features (Volar)"></a>Vue Language Features (Volar)</h2><p>Vue 官方出品支持Vue框架源码开发的插件，使得开发Vue源码更加方便。</p><p>包括 Vue文件的高亮显示、ESLint的语法集成支持、代码格式化等等。开发Vue必备。</p><p>通过搜索 <code>Volar</code> 安装。</p><p>其它开发vue的辅助推荐还包括 <code>Vue Peek</code> 文件跳转、 <code>vue-helper</code> 对  Element-UI, VUX, IVIEW 的增加开发体验。</p><h2 id="JavaScript-ES6-code-snippets"><a href="#JavaScript-ES6-code-snippets" class="headerlink" title="JavaScript (ES6) code snippets"></a>JavaScript (ES6) code snippets</h2><p>提供 ES6 语法的代码提示，通过缩写就能写出常用的代码。</p><p>例如输入 <code>clo</code> 就能打印对象 <code> console.log(&#39;object :&gt;&gt; &#39;, object);</code> 。</p><p>支持的缩写包括 Import and export 、 Various methods 、Console methods 等等。</p><p>通过搜索 <code>JavaScript (ES6) code snippets</code> 安装。</p><h2 id="Markdown-Preview-Enhanced"><a href="#Markdown-Preview-Enhanced" class="headerlink" title="Markdown Preview Enhanced"></a>Markdown Preview Enhanced</h2><p>程序员写文档必备的markdown语法，这款插件提供markdown的文档、图标语法、函数语法的支持。还可以导出和预览markdown文档。</p><p>通过搜索 <code>Markdown Preview Enhanced</code> 安装。</p><h2 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a>markdownlint</h2><p>markdown的语法检查支持，还提供了一部分程序修正功能。很实用、很方便。对于不熟悉markdown语法的人很是有用。</p><p>通过搜索 <code>markdownlint</code> 安装。</p><h2 id="GitLens-—-Git-supercharged"><a href="#GitLens-—-Git-supercharged" class="headerlink" title="GitLens — Git supercharged"></a>GitLens — Git supercharged</h2><p>VsCode的git使用体验不是很好，通过该插件能增强git的使用过程。</p><p>通过搜索 <code>GitLens</code> 安装。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://code.visualstudio.com/docs">Visual Studio Code Doc</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Visual Studio Code 是一款开源全平台的代码开发工具，支持三大平台Windows、Linux、Mac。除了Mac平台没有使用过外，Linux的开发体验和Windows基本一致。&lt;/p&gt;
&lt;p&gt;虽然Visual Studio Code 支持多种语言的开发，但是</summary>
      
    
    
    
    <category term="编程技术" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>RabbitMQ 的安装和使用</title>
    <link href="https://r0ad.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/RabbitMQ%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://r0ad.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/RabbitMQ%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2023-03-16T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>RabbitMQ 作为一个开源的消息中间件广泛使用。</p><ul><li>支持分布式部署。</li><li>异步消息传递，支持多种消息协议、消息队列、送达确认、灵活的队列路由、多种交换类型。</li><li>提供多种监听和管理工具，HTTP-API, 命令行工具command line tool, UI界面。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="容器安装"><a href="#容器安装" class="headerlink" title="容器安装"></a>容器安装</h3><p>目前最新版本安装和启动命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.11-management</span><br></pre></td></tr></table></figure><h3 id="Linux或Windows安装"><a href="#Linux或Windows安装" class="headerlink" title="Linux或Windows安装"></a>Linux或Windows安装</h3><p>通过官网提供的安装包安装即可。具体安装方法可查看 <a href="https://www.rabbitmq.com/install-windows.html">https://www.rabbitmq.com/install-windows.html</a> 。</p><ul><li>先安装Erlang。</li><li>安装对应的 RabbitMQ 安装包。</li></ul><h3 id="RabbitMQ访问"><a href="#RabbitMQ访问" class="headerlink" title="RabbitMQ访问"></a>RabbitMQ访问</h3><p>通过UI界面访问对应的系统。</p><ul><li>登录地址 <code>127.0.0.1:15762</code> 。</li><li>账号密码默认 guest\guest 。</li></ul><h2 id="Springboot集成RabbitMQ"><a href="#Springboot集成RabbitMQ" class="headerlink" title="Springboot集成RabbitMQ"></a>Springboot集成RabbitMQ</h2><ol><li>修改依赖加入RabbitMQ启动项目，此处以maven为例子说明。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- rabbitmq --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>增加 rabbitmq 配置。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">boot-rabbitmq</span></span><br><span class="line">  <span class="comment"># rabbitmq 配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="comment"># Redis 服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment"># 连接端口号</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure><ol start="3"><li>增加 rabbit相关配置。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注入配置bean相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动装配RabbitMQ的链接工厂实例</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CachingConnectionFactory connectionFactory;</span><br><span class="line">    <span class="comment">// 自动装配消息监听器所在的容器工厂配置类实例</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpleRabbitListenerContainerFactoryConfigurer factoryConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单一消费者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;singleListenerContainer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title function_">listenerContainer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SimpleRabbitListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRabbitListenerContainerFactory</span>();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        factory.setMessageConverter(<span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>());</span><br><span class="line">        factory.setConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">        factory.setMaxConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">        factory.setPrefetchCount(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个消费者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;multiListenerContainer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title function_">multiListenerContainer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SimpleRabbitListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRabbitListenerContainerFactory</span>();</span><br><span class="line">        factoryConfigurer.configure(factory,connectionFactory);</span><br><span class="line">        factory.setMessageConverter(<span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>());</span><br><span class="line">        factory.setAcknowledgeMode(AcknowledgeMode.NONE);</span><br><span class="line">        factory.setConcurrentConsumers(<span class="number">10</span>);</span><br><span class="line">        factory.setMaxConcurrentConsumers(<span class="number">15</span>);</span><br><span class="line">        factory.setPrefetchCount(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RabbitMQ发送消息的操作组件实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">rabbitTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        connectionFactory.setPublisherConfirms(<span class="literal">true</span>);</span><br><span class="line">        connectionFactory.setPublisherReturns(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory);</span><br><span class="line">        rabbitTemplate.setMandatory(<span class="literal">true</span>);</span><br><span class="line">        rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -&gt; log.info(<span class="string">&quot;消息发送成功:correlationData(&#123;&#125;),ack(&#123;&#125;),cause(&#123;&#125;)&quot;</span>,correlationData,ack,cause));</span><br><span class="line">        rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -&gt; log.info(<span class="string">&quot;消息丢失:exchange(&#123;&#125;),route(&#123;&#125;),replyCode(&#123;&#125;),replyText(&#123;&#125;),message:&#123;&#125;&quot;</span>,exchange,routingKey,replyCode,replyText,message));</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h2 id="Springboot使用RabbitMQ"><a href="#Springboot使用RabbitMQ" class="headerlink" title="Springboot使用RabbitMQ"></a>Springboot使用RabbitMQ</h2><ol><li>启动的配置类注入对应的队列，包括队列名称、交换机、路由。</li><li>使用 RabbitTemplate 作为生产者发送消息。</li><li>@RabbitListener 作为消费者监听对应队列消费消息。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 环境变量配置</span></span></span><br><span class="line">mq.env=local</span><br><span class="line">mq.basic.info.queue.name=$&#123;mq.env&#125;.middleware.mq.basic.info.queue</span><br><span class="line">mq.basic.info.exchange.name=$&#123;mq.env&#125;.middleware.mq.basic.info.exchange</span><br><span class="line">mq.basic.info.routing.key.name=$&#123;mq.env&#125;.middleware.mq.basic.info.routing.key</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * springboot 启动时去5672 端口监听配置的所有监听队列，</span></span><br><span class="line"><span class="comment"> * 若这个队列不存在，监听不到则会报错，需要在程序启动时注入这个队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义读取配置文件的环境变量实例</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**创建简单消息模型：队列、交换机和路由 **/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;basicQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">basicQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(env.getProperty(<span class="string">&quot;mq.basic.info.queue.name&quot;</span>),<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建交换机：在这里以DirectExchange为例，在后面章节中我们将继续详细介绍这种消息模型</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">basicExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(env.getProperty(<span class="string">&quot;mq.basic.info.exchange.name&quot;</span>),<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">basicBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(basicQueue()).to(basicExchange()).with(env.getProperty(<span class="string">&quot;mq.basic.info.routing.key.name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送消息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(String message)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!ObjectUtils.isEmpty(message))&#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               rabbitTemplate.setExchange(env.getProperty(<span class="string">&quot;mq.basic.info.exchange.name&quot;</span>));</span><br><span class="line">               rabbitTemplate.setRoutingKey(env.getProperty(<span class="string">&quot;mq.basic.info.routing.key.name&quot;</span>));</span><br><span class="line"></span><br><span class="line">               Message msg=MessageBuilder.withBody(message.getBytes(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                       .setDeliveryMode(MessageDeliveryMode.PERSISTENT).build();</span><br><span class="line"></span><br><span class="line">               rabbitTemplate.convertAndSend(msg);</span><br><span class="line"></span><br><span class="line">               log.info(<span class="string">&quot;基本消息模型-生产者-发送消息：&#123;&#125; &quot;</span>,message);</span><br><span class="line">           &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">               log.error(<span class="string">&quot;基本消息模型-生产者-发送消息发生异常：&#123;&#125; &quot;</span>,message,e.fillInStackTrace());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;$&#123;mq.basic.info.queue.name&#125;&quot;,containerFactory = &quot;singleListenerContainer&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumeMsg</span><span class="params">(<span class="meta">@Payload</span> <span class="type">byte</span>[] msg)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          String message=<span class="keyword">new</span> <span class="title class_">String</span>(msg,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">          log.info(<span class="string">&quot;基本消息模型-消费者-监听消费到消息：&#123;&#125; &quot;</span>,message);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">          log.error(<span class="string">&quot;基本消息模型-消费者-发生异常：&quot;</span>,e.fillInStackTrace());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="RabbitMQ常见消息模式"><a href="#RabbitMQ常见消息模式" class="headerlink" title="RabbitMQ常见消息模式"></a>RabbitMQ常见消息模式</h2><h3 id="Simple-模式"><a href="#Simple-模式" class="headerlink" title="Simple 模式"></a>Simple 模式</h3><p>Simple 模式是最简单的一个模式，由一个生产者，一个队列，一个消费者组成，生产者将消息通过交换机（此时，图中并没有交换机的概念，如不定义交换机，会使用默认的交换机）把消息存储到队列，消费者从队列中取出消息进行处理。</p><h3 id="Fanout-模式"><a href="#Fanout-模式" class="headerlink" title="Fanout 模式"></a>Fanout 模式</h3><p>Fanout——发布订阅模式，是一种广播机制。</p><p>此模式包括：一个生产者、一个交换机 (exchange)、多个队列、多个消费者。生产者将消息发送到交换机，交换机不存储消息，将消息存储到队列，消费者从队列中取消息。如果生产者将消息发送到没有绑定队列的交换机上，消息将丢失。</p><h3 id="Direct-模式"><a href="#Direct-模式" class="headerlink" title="Direct 模式"></a>Direct 模式</h3><p>Direct 模式是在 Fanout 模式基础上添加了 routing key，Fanout（发布/订阅）模式是交换机将消息存储到所有绑定的队列中，而 Direct 模式是在此基础上，添加了过滤条件，交换机只会将消息存储到满足 routing key 的队列中。</p><h3 id="Topic-模式"><a href="#Topic-模式" class="headerlink" title="Topic 模式"></a>Topic 模式</h3><p>Topic 模式是生产者通过交换机将消息存储到队列后，交换机根据绑定队列的 routing key 的值进行通配符匹配，如果匹配通过，消息将被存储到该队列，如果 routing key 的值匹配到了多个队列，消息将会被发送到多个队列；如果一个队列也没匹配上，该消息将丢失。</p><h2 id="RabbitMQ常见使用场景"><a href="#RabbitMQ常见使用场景" class="headerlink" title="RabbitMQ常见使用场景"></a>RabbitMQ常见使用场景</h2><p>解耦、削峰、异步</p><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>在微服务架构体系中，微服务A需要与微服务B进行通信，传统的做法是A调用B的接口。但这样做如果系统B无法访问或连接超时，系统A需要等待，直到系统B做出响应，并且A与B存在严重的耦合现象。如果引入消息队列进行系统AB的通信，流程是这样的：</p><ul><li>系统A将消息存储到消息队列中，返回成功信息</li><li>系统B从队列中获取消息，进行处理操作</li><li>系统A将消息放到队列中，就不用关心系统B是否可以获取等其他事情了，实现了两个系统间的解耦。</li></ul><p>使用场景：</p><p>短信、邮件通知</p><h3 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h3><p>系统A每秒请求100个，系统可以稳定运行，但如果在秒杀活动中，每秒并发达到1w个，但系统最大处理能力只能每秒处理 1000 个，所以，在秒杀活动中，系统服务器会出现宕机的现象。如果引入 MQ ，可以解决这个问题。每秒 1w个请求会导致系统崩溃，那我们让用户发送的请求都存储到队列中，由于系统最大处理能力是每秒1000个请求，让系统A每秒只从队列中拉取1000个请求，保证系统能稳定运行，在秒杀期间，请求大量进入到队列，积压到MQ中，而系统每秒只从队列中取1000个请求处理。这种短暂的高峰期积压是没问题的，因为高峰期一旦过去，每秒请求数迅速递减，而系统每秒还是从队列中取1000个请求进行处理，系统会快速将积压的消息消费掉。</p><p>使用场景：</p><p>秒杀活动<br>团抢活动</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>用户注册，需要发送注册邮件和注册短信，传统的做法有两种：串行、并行。</p><ul><li>串行方式：将注册信息写库后（50ms），发送邮件（50ms），再发送短信（50ms），任务完成后，返回客户端，共耗时（150ms）</li><li>并行方式：将注册信息写库后（50ms），开启子线程让发送邮件和发送短信同时进行（50ms），返回客户端，共耗时（100ms）</li><li>引入MQ，将注册信息写库（50ms），将发送邮件和短信的操作写入队列（5ms），返回客户端，而消费者什么时候从队列中取消息进行处理，不用关心，共耗时（55ms）</li></ul><p>使用场景：</p><p>将不是必须等待响应结果的业务逻辑进行异步处理</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.rabbitmq.com/download.html">Downloading and Installing RabbitMQ</a></li><li><a href="https://mp.weixin.qq.com/s/hgf6rS8LVDxz9sYeL8i9RA">一文搞懂 RabbitMQ 常用模式</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;RabbitMQ 作为一个开源的消息中间件广泛使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持分布式部署。&lt;/li&gt;
&lt;li&gt;异步消息传递，支持多种消</summary>
      
    
    
    
    <category term="中间件实战" scheme="https://r0ad.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis的安装和使用</title>
    <link href="https://r0ad.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/Redis%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://r0ad.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/Redis%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2023-03-15T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Redis 是基于内存的、采用Key-Value结构化存储的NoSQL数据库，底层采用单线程和多路IO复用模型加快查询速度。</p><ul><li>支持多种数据格式的存储；</li><li>支持持久化存储；</li><li>支持集群部署。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p>Redis 官方不支持Windows的安装，通过启用windows自带的WSL2 （(Windows Subsystem for Linux）Linux子系统工具可以使用和安装。<br>Windows 版本要求大于10 。</p><p>具体安装流程和Linux安装一致。</p><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><p>大多数Linux发行版本提供了Redis的安装包，通过安装软件包命令可以从远程安装对应的工具。</p><p>Ubuntu/Debian 系统的安装流程如下：</p><ol><li>添加Redis官方软件仓库源到Apt软件。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line">echo &quot;deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/redis.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install redis</span><br></pre></td></tr></table></figure><ol start="2"><li>前置要求:如果运行的像是docker这类最小发行版本需要先安装 <code>lsb-release</code> 。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lsb-release</span><br></pre></td></tr></table></figure><h3 id="Redis启动"><a href="#Redis启动" class="headerlink" title="Redis启动"></a>Redis启动</h3><p>Linux Ubuntu/Debian 系统启动命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service redis-server start</span><br></pre></td></tr></table></figure><h3 id="Redis访问"><a href="#Redis访问" class="headerlink" title="Redis访问"></a>Redis访问</h3><p>通过官方的Cli工具访问：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis-cli </span><br><span class="line"></span><br><span class="line">Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]</span><br><span class="line">  -h &lt;hostname&gt;      Server hostname (default: 127.0.0.1).</span><br><span class="line">  -p &lt;port&gt;          Server port (default: 6379).</span><br><span class="line">  -s &lt;socket&gt;        Server socket (overrides hostname and port).</span><br><span class="line">  -a &lt;password&gt;      Password to use when connecting to the server.</span><br><span class="line">                     You can also use the REDISCLI_AUTH environment</span><br><span class="line">                     variable to pass this password more safely</span><br><span class="line">                     (if both are used, this argument takes precedence).</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h3><p>详细配置例子查看 <a href="https://redis.io/docs/management/config-file/">https://redis.io/docs/management/config-file/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Accept connections on the specified port, default is 6379 (IANA <span class="comment">#815344).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If port 0 is specified Redis will not listen on a TCP socket.</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Close the connection after a client is idle <span class="keyword">for</span> N seconds (0 to <span class="built_in">disable</span>)</span></span><br><span class="line">timeout 60</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IMPORTANT NOTE: starting with Redis 6 <span class="string">&quot;requirepass&quot;</span> is just a compatibility</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">layer on top of the new ACL system. The option effect will be just setting</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the password <span class="keyword">for</span> the default user. Clients will still authenticate using</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">AUTH &lt;password&gt; as usually, or more explicitly with AUTH default &lt;password&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> they follow the new protocol: both will work.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The requirepass is not compatible with aclfile option and the ACL LOAD</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">command</span>, these will cause requirepass to be ignored.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">requirepass redis1234</span></span><br></pre></td></tr></table></figure><h3 id="分布式部署"><a href="#分布式部署" class="headerlink" title="分布式部署"></a>分布式部署</h3><p>需要修改集群的相关配置，此处从略。 详情可参考网络或者 <a href="https://redis.io/docs/management/replication/">https://redis.io/docs/management/replication/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################### REDIS CLUSTER  ###############################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Normal Redis instances can<span class="string">&#x27;t be part of a Redis Cluster; only nodes that are</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">started as cluster nodes can. In order to start a Redis instance as a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">cluster node enable the cluster support uncommenting the following:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">cluster-enabled yes</span></span></span><br></pre></td></tr></table></figure><h2 id="Springboot集成redis"><a href="#Springboot集成redis" class="headerlink" title="Springboot集成redis"></a>Springboot集成redis</h2><ol><li>修改依赖加入Redis启动项目，此处以maven为例子说明。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改配置，指定redis启动。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># Redis 配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># Redis 服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment"># 连接端口号</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># 数据库索引（0 - 15）</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">redis1234</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">600000</span></span><br><span class="line">    <span class="comment"># lettuce 参数</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 最大连接数(使用负值表示没有限制) 默认为 8</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># 最大阻塞等待时间(使用负值表示没有限制) 默认为 -1 ms</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 最大空闲连接 默认为 8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">5</span></span><br><span class="line">        <span class="comment"># 最小空闲连接 默认为 0</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>增加 RedisTemplate 序列化配置，以FastJSON2为例子说明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">GenericFastJsonRedisSerializer</span> <span class="variable">fastJsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericFastJsonRedisSerializer</span>();</span><br><span class="line">        redisTemplate.setDefaultSerializer(fastJsonRedisSerializer);<span class="comment">//设置默认的Serialize，包含 keySerializer &amp; valueSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(fastJsonRedisSerializer);<span class="comment">//单独设置keySerializer</span></span><br><span class="line">        redisTemplate.setValueSerializer(fastJsonRedisSerializer);<span class="comment">//单独设置valueSerializer</span></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用的demo，通过RedisTemplate访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;demo&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/v1/demo/&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;get&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;get&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> valueOperations.get(key);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;set&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;set&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">set</span><span class="params">(String key,String val)</span> &#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(key,val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;delete&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://redis.io/docs/getting-started/installation/install-redis-on-linux/">Install Redis on Linux</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Redis 是基于内存的、采用Key-Value结构化存储的NoSQL数据库，底层采用单线程和多路IO复用模型加快查询速度。&lt;/p&gt;
&lt;ul</summary>
      
    
    
    
    <category term="中间件实战" scheme="https://r0ad.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Java函数式编程</title>
    <link href="https://r0ad.github.io/JavaEngineer/Java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://r0ad.github.io/JavaEngineer/Java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2023-03-11T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>现在主流的编程范式主要有三种，面向过程、面向对象和函数式编程。函数式编程作为一种补充，有很大存在、发展和学习的意义。</li><li>函数内部涉及的变量都是局部变量，不会像面向对象编程那样，共享类成员变量，也不会像面向过程编程那样，共享全局变量。</li><li>函数式接口可以将函数作为一个参数传入方法中进行使用。</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>函数式编程因其编程的特殊性，仅在科学计算、数据处理、统计分析等领域，才能更好地发挥它的优势，所以它并不能完全替代更加通用的面向对象编程范式。但是作为一种补充，它也有很大存在、发展和学习的意义。</p><p>函数式编程更符合数学上函数映射的思想。具体到编程语言层面，我们可以使用Lambda表达式来快速编写函数映射，函数之间通过链式调用连接到一起，完成所需业务逻辑。Java的Lambda表达式是后来才引入的，由于函数式编程在并行处理方面的优势，正在被大量应用在大数据计算领域。</p><h2 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h2><p>现在主流的编程范式主要有三种，面向过程、面向对象和函数式编程。</p><p>面向对象编程最大的特点是：以类、对象作为组织代码的单元以及它的四大特性。</p><p>面向过程编程最大的特点是：以函数作为组织代码的单元，数据与方法相分离。</p><ul><li>函数式编程并非一个很新的东西，早在50多年前就已经出现了。近几年，函数式编程越来越被人关注，出现了很多新的函数式编程语言，比如Clojure、Scala、Erlang等。一些非函数式编程语言也加入了很多特性、语法、类库来支持函数式编程，比如Java、Python、Ruby、JavaScript等。除此之外，Google Guava也有对函数式编程的增强功能。</li><li>函数式编程因其编程的特殊性，仅在科学计算、数据处理、统计分析等领域，才能更好地发挥它的优势，所以它并不能完全替代更加通用的面向对象编程范式。但是作为一种补充，它也有很大存在、发展和学习的意义。</li><li>函数式编程中的“函数”，并不是指我们编程语言中的“函数”概念，而是指数学“函数”或者“表达式”（例如：y=f(x)）。不过，在编程实现的时候，对于数学“函数”或“表达式”，我们一般习惯性地将它们设计成函数。</li><li>函数式编程最独特的地方在于它的编程思想。函数式编程认为程序可以用一系列数学函数或表达式的组合来表示。函数式编程是程序面向数学的更底层的抽象，将计算过程描述为表达式。</li><li>并不是所有的程序都适合这么做。函数式编程有它自己适合的应用场景，比如科学计算、数据处理、统计分析等。在这些领域，程序往往比较容易用数学表达式来表示，比起非函数式编程，实现同样的功能，函数式编程可以用很少的代码就能搞定。但是，对于强业务相关的大型业务系统开发来说，费劲吧啦地将它抽象成数学表达式，硬要用函数式编程来实现，显然是自讨苦吃。相反，在这种应用场景下，面向对象编程更加合适，写出来的代码更加可读、可维护。</li><li>函数式编程跟面向过程编程一样，也是以函数作为组织代码的单元。不过，它跟面向过程编程的区别在于，它的函数是无状态的。何为无状态？简单点讲就是，<strong>函数内部涉及的变量都是局部变量，不会像面向对象编程那样，共享类成员变量，也不会像面向过程编程那样，共享全局变量。</strong>函数的执行结果只与入参有关，跟其他任何外部变量无关。同样的入参，不管怎么执行，得到的结果都是一样的。这实际上就是数学函数或数学表达式的基本要求。</li></ul><h2 id="Java对函数式编程的支持"><a href="#Java对函数式编程的支持" class="headerlink" title="Java对函数式编程的支持"></a>Java对函数式编程的支持</h2><p>Java为函数式编程引入了三个新的语法概念：Stream类、Lambda表达式和函数接口（Functional Inteface）。Stream类用来支持通过“.”级联多个函数操作的代码编写方式；引入Lambda表达式的作用是简化代码编写；函数接口的作用是让我们可以把函数包裹成函数接口，来实现把函数当做参数一样来使用（Java 不像C那样支持函数指针，可以把函数直接当参数来使用）。</p><ul><li>stream： stream “.”表示调用某个对象的方法。为了支持上面这种级联调用方式，我们让每个函数都返回一个通用的Stream类对象。在Stream类上的操作有两种：中间操作和终止操作。中间操作返回的仍然是Stream类对象，而终止操作返回的是确定的值结果。</li><li>map、filter是中间操作，返回Stream类对象，可以继续级联其他操作；max是终止操作，返回的是OPTIONAL类对象。</li><li>lambda： lambda表达式在Java中只是一个语法糖而已，底层是基于函数接口来实现的。Lambda表达式包括三部分：输入、函数体、输出。</li><li>函数接口： Java没有函数指针这样的语法。所以它通过函数接口，将函数包裹在接口中，当作变量来使用。实际上，函数接口就是接口。不过，它也有自己特别的地方，那就是要求只包含一个未实现的方法。因为只有这样，Lambda表达式才能明确知道匹配的是哪个方法。如果有两个未实现的方法，并且接口入参、返回值都一样，那Java在翻译Lambda表达式的时候，就不知道表达式对应哪个方法了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">stream</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Optional&lt;Integer&gt; result = Stream.of(<span class="string">&quot;f&quot;</span>, <span class="string">&quot;ba&quot;</span>, <span class="string">&quot;hello&quot;</span>) <span class="comment">// of返回Stream&lt;String&gt;对象</span></span><br><span class="line">                .map(s -&gt; s.length()) <span class="comment">// map返回Stream&lt;Integer&gt;对象</span></span><br><span class="line">                .filter(l -&gt; l &lt;= <span class="number">3</span>) <span class="comment">// filter返回Stream&lt;Integer&gt;对象</span></span><br><span class="line">                .max((o1, o2) -&gt; o1 - o2); <span class="comment">// max终止操作：返回Optional&lt;Integer&gt;</span></span><br><span class="line">        System.out.println(result.get()); <span class="comment">// 输出2</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p><strong>@FunctionalInterface注解使用场景</strong>： 一个接口只要满足只有一个抽象方法的条件，即可以当成函数式接口使用，有没有 @FunctionalInterface 都无所谓。</p><p>如果使用了此注解，再往接口中新增抽象方法，编译器就会报错，编译不通过。换句话说，@FunctionalInterface 就是一个承诺，承诺该接口世世代代都只会存在这一个抽象方法。因此，凡是使用了这个注解的接口，开发者可放心大胆的使用Lambda来实例化。当然误用 @FunctionalInterface 带来的后果也是极其惨重的：如果哪天你把这个注解去掉，再加一个抽象方法，则所有使用Lambda实例化该接口的客户端代码将全部编译错误。</p><p>自定义函数式编程接口过程：</p><ul><li>通过 @FunctionalInterface 注解，申明一个函数式接口。</li><li>在方法中使用函数接口作为入参使用；</li><li>调用方法，传入函数接口的实现方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFuncInterface</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明一个函数式接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ToLongFunction</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="type">long</span> <span class="title function_">applyAsLong</span><span class="params">(T value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工具函数定义使用函数接口作为参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Util</span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">mapToLong</span><span class="params">(ToLongFunction&lt;? <span class="built_in">super</span> Collection&gt; mapper, List&lt;String&gt; val)</span> &#123;</span><br><span class="line">            Objects.requireNonNull(mapper);</span><br><span class="line">            <span class="keyword">return</span> mapper.applyAsLong(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用例子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; arr = Arrays.asList(<span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;3333&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> Util.mapToLong((item)-&gt; item.size(),arr);</span><br><span class="line">        System.out.println(size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/Ko41OG9yFAZZMEi6-C9kBQ">Java如何支持函数式编程？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;现在主流的编程范式主要有三种，面向过程、面向对象和函数式编程。函数式编程作为一种补充，有很大存在、发展和学习的意义。&lt;/li&gt;
</summary>
      
    
    
    
    <category term="JavaEngineer" scheme="https://r0ad.github.io/categories/JavaEngineer/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 注解机制和应用</title>
    <link href="https://r0ad.github.io/JavaEngineer/Java%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <id>https://r0ad.github.io/JavaEngineer/Java%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6%E5%92%8C%E5%BA%94%E7%94%A8/</id>
    <published>2023-03-11T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Java注解是一种很常见的开发辅助模式，Java语言中的类、方法、变量、参数和包等都可以被标注。</li><li>通过自定义注解的使用可以优化业务开发的使用。</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java注解又称Java标注，是Java语言5.0版本开始支持加入源代码的特殊语法元数据。为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便的使用这些数据。</p><p>Java语言中的类、方法、变量、参数和包等都可以被标注。和Javadoc不同，Java标注可以通过反射获取注解内容。在编译器生成类文件时，注解可以被嵌入到字节码中。Java虚拟机可以保留注解内容，在运行时可以获取到注解内容。</p><h2 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h2><h3 id="Java内置注解"><a href="#Java内置注解" class="headerlink" title="Java内置注解"></a>Java内置注解</h3><p>Java 定义了一套注解，共有 7 个，3 个在 java.lang 中，剩下 4 个在 java.lang.annotation 中。</p><p> 1、作用在代码的注解是</p><ul><li><code>@Override</code> - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li><li><code>@Deprecated</code> - 标记过时方法。如果使用该方法，会报编译警告。</li><li><code>@SuppressWarnings</code> - 指示编译器去忽略注解中声明的警告。</li></ul><p>2、作用在其他注解的注解(或者说<strong>元注解</strong>)是:</p><ul><li><code>@Retention</code> - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</li><li><code>@Documented</code> - 标记这些注解是否包含在用户文档中。</li><li><code>@Target</code> - 标记这个注解应该是哪种 Java 成员。</li><li><code>@Inherited</code> - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li></ul><p>3、从 Java 7 开始，额外添加了 3 个注解:</p><ul><li><code>@SafeVarargs</code> - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li><li><code>@FunctionalInterface</code> - Java 8 开始支持，标识一个匿名函数或函数式接口。</li><li><code>@Repeatable</code> - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li></ul><h3 id="常见的库中的注解"><a href="#常见的库中的注解" class="headerlink" title="常见的库中的注解"></a>常见的库中的注解</h3><p>日常开发使用的库中也有着大量的注解，例如Jackson、SpringMvc等，下面就简单介绍下常见库中的常见注解使用</p><ul><li><p>Jackson<br>Jackson是一个通用的序列化库，程序员使用过程中可以使用它提供的注解机制对序列化进行定制化操作，比如:</p></li><li><p>使用@JsonIgnore和@JsonIgnoreProperties配置序列化的过程中忽略部分字段</p></li><li><p>使用@JsonManagedReference和@JsonBackReference可以配置实例之间的互相引用</p></li><li><p>使用@JsonProperty和@JsonFormat配置序列化的过程中字段名称和属性字段的格式等</p></li><li><p>Servlet3.0</p></li></ul><p>随着web开发技术的发展，Java web已经发展到了Servlet3.0，在早期使用Servlet的时候，我们只能在web.xml中配置，但是当我们使用Servlet3.0的时候开始，已经开始支持注解了，比如我们可以使用@WebServlet配置一个类为Servlet类。</p><ul><li>SpringMvc</li></ul><p>同样的，在web开发中，我们往往还会使用SpringMvc框架来简化开发，其框架的大量注解可以帮助我们减少大量的业务代码，例如一个请求的参数和字段/实例之间的映射关系，一个方法使用的是Http的什么请求方法，对应请求的某个路径，同样的请求如何解析，返回的响应报文格式定义等，这些都可以使用注解来简化实现，一个简单的Mvc操作如下:</p><p>其中@Controller注解标明当前的类是SpringMvc接管的一个Bean实例，@RequestMapping(“/hello”)则是代表当前Bean的前置请求路径比如是/hello开头， @GetMapping(“/test”)则是表示test方法被访问必须是Http请求的get请求，并且路径必须是/hello/test为路径前置，@ResponseBody注解则是标明了当前请求的相应信息按照默认的格式返回(根据后缀名来确定格式)</p><h2 id="注解创建"><a href="#注解创建" class="headerlink" title="注解创建"></a>注解创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Label &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Target注解表示当前注解可以使用在什么类型的元素上，这里的值可以多选，即一个注解可以作用在多种不同类型的元素上，具体的可选值在ElementType枚举类中，值如下:</p><table><thead><tr><th align="center">取值</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">TYPE</td><td align="center">表示作用在类、接口上</td></tr><tr><td align="center">FIELD</td><td align="center">表示作用在字段，包括枚举常量中</td></tr><tr><td align="center">METHOD</td><td align="center">表示作用在方法中</td></tr><tr><td align="center">PARAMETER</td><td align="center">表示作用在方法中的参数中</td></tr><tr><td align="center">CONSTRUCTOR</td><td align="center">表示作用在构造方法中</td></tr><tr><td align="center">LOCAL_VARIABLE</td><td align="center">表示作用在本地常量中</td></tr><tr><td align="center">MODULE</td><td align="center">表示作用在部分模块中(Java9引入的概念)</td></tr><tr><td align="center">ANNOTATION_TYPE</td><td align="center">表示当前注解作用在定义其他注解中，即元注解</td></tr><tr><td align="center">PACKAGE</td><td align="center">表示当前注解使用在包的申明中</td></tr><tr><td align="center">TYPE_PARAMETER</td><td align="center">表明当前注解使用在类型参数的申明中(Java8新增)</td></tr><tr><td align="center">TYPE_USE</td><td align="center">表明当前注解使用在具体使用类型中(Java8新增)</td></tr></tbody></table><p>当使用多个作用域范围的时候，使用{}包裹多个参数，比如@SuppressWarnings注解的Target就有多个，在Java7中的定义为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>@Retention注解则是表明了当前注解可以保留到Java多个阶段的哪一个阶段，参数类型为RetentionPolicy枚举类，可取值如下:</p><table><thead><tr><th align="center">取值</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">SOURCE</td><td align="center">此注解仅在源代码阶段保留，编译后即丢失注解部分</td></tr><tr><td align="center">CLASS</td><td align="center">表示编译后依然保留在Class字节码中，但是加载时不一定会在内存中</td></tr><tr><td align="center">RUNTIME</td><td align="center">表示不仅保留在Class字节码中，一直到内存使用时仍然存在</td></tr></tbody></table><p>此注解有默认值，即当我们没有申明@Retention的时候，默认则是Class取值范围</p><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p>@Documented注解没有具体的参数，使用此元注解，则表示带有类型的注解将由javadoc记录</p><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><ul><li><code>@Inherited</code>  注解与注解的继承有关系，具体关系为如果使用了当前的元注解，则表示此注解可以被其他的注解的子类直接继承，但是需要注意的是对已实现接口上的注解将没有作用。</li><li><code>@Inherited</code> 注释表明注释类型可以从超类继承。当用户查询注释类型并且该类没有此类型的注释时，将查询类的超类以获取注释类型（默认情况下不是这样）。此注释仅适用于类声明。</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="业务开发的使用"><a href="#业务开发的使用" class="headerlink" title="业务开发的使用"></a>业务开发的使用</h3><p>基于Spring提供的AOP开发方法，可以简化业务代码开发中冗余的业务代码，对接口调用过程的前置处理、过程处理、后置处理。</p><ul><li>金融借贷系统对接了很多第三方的风控接口。调用接口前需要校验报文体中的签名字段 <code>sign</code> 。<ul><li>每个方法开头都写一份签名验签的代码。</li><li>将验签代码抽取成方法，方便复用。</li><li>新建 <code>@SignCheck</code> 注解，在切面里面写业务逻辑。</li></ul></li><li>应用开发过程的日志记录需要保存到消息中间件或者数据库。<ul><li>每个方法开头都写一份记录日志的代码。</li><li>将记录日志抽取成方法，方便复用。</li><li>新建 <code>@LogAccess</code> 注解，在切面里面写日志记录逻辑。</li></ul></li></ul><h3 id="工具开发的使用"><a href="#工具开发的使用" class="headerlink" title="工具开发的使用"></a>工具开发的使用</h3><ul><li>Lombok 通过注解 <code>@Getter</code> <code>@Setter</code> 等主机，在源码编译时添加对应的模板方法。</li><li>Fastjson 通过 <code>@JSONField</code> 定制序列化方法。指定JSON代码文本生成的别名。</li></ul><h3 id="自定义注解例子"><a href="#自定义注解例子" class="headerlink" title="自定义注解例子"></a>自定义注解例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTestAll</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义注解 Format</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Format &#123;</span><br><span class="line">        String <span class="title function_">pattern</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">        String <span class="title function_">timezone</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;GMT+8&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Label &#123;</span><br><span class="line">        String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射 Format Label，并且获取值做运算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SimpleFormatter</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; cls = obj.getClass();</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">for</span> (Field field : cls.getDeclaredFields()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!field.isAccessible()) &#123;</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 获取Label注解-输出的字段名称</span></span><br><span class="line">                    <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> field.getAnnotation(Label.class);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span> == label ? field.getName() : label.value();</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; field.getType() == Date.class) &#123;</span><br><span class="line">                        value = formatter(field, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    builder.append(String.format(<span class="string">&quot;%s ? %s \n&quot;</span>, name, value));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> builder.toString();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;格式化输出失败：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">formatter</span><span class="params">(Field field, Object value)</span> &#123;</span><br><span class="line">            <span class="type">Format</span> <span class="variable">format</span> <span class="operator">=</span> field.getAnnotation(Format.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == format) &#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> format.pattern();</span><br><span class="line">            <span class="type">String</span> <span class="variable">timezone</span> <span class="operator">=</span> format.timezone();</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern);</span><br><span class="line">            sdf.setTimeZone(TimeZone.getTimeZone(timezone));</span><br><span class="line">            <span class="keyword">return</span> sdf.format(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试的一个bo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="meta">@Label(&quot;姓名&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="meta">@Label(&quot;出生日期&quot;)</span></span><br><span class="line">        <span class="meta">@Format(pattern = &quot;yyyy/MM/dd&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Date born;</span><br><span class="line">        <span class="meta">@Label(&quot;分数&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Double score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试运算结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setBorn(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        student.setScore(<span class="number">244.0</span>);</span><br><span class="line">        System.out.println(SimpleFormatter.format(student));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出：</span></span><br><span class="line"><span class="comment">         * 姓名 ? 张三</span></span><br><span class="line"><span class="comment">         * 出生日期 ? 2023/03/12</span></span><br><span class="line"><span class="comment">         * 分数 ? 244.0 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/QoJnf2vPCWR5ClCjSkiPsQ">详解Java注解机制</a></li><li><a href="https://www.zhihu.com/question/47449512/answer/658228092">怎样理解 Java 注解和运用注解编程？ - bravo1988的回答 - 知乎</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Java注解是一种很常见的开发辅助模式，Java语言中的类、方法、变量、参数和包等都可以被标注。&lt;/li&gt;
&lt;li&gt;通过自定义注</summary>
      
    
    
    
    <category term="JavaEngineer" scheme="https://r0ad.github.io/categories/JavaEngineer/"/>
    
    
  </entry>
  
  <entry>
    <title>Java反射机制与应用</title>
    <link href="https://r0ad.github.io/JavaEngineer/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>https://r0ad.github.io/JavaEngineer/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%BA%94%E7%94%A8/</id>
    <published>2023-03-07T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Java的反射机制提供了运行时分析处理类的能力。</li><li>Spring框架的IOC容器使用了反射技术，可以简化代码编写。</li><li>使用Spring+策略模式可以解决代码中if或switch代码块的代码耦合问题。</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>反射机制提供的功能:</p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行的时候构造任意一个类的对象</li><li>在运行时判断一个类所具有的成员变量和方法</li><li>在运行时调用任何一个对象的方法</li><li>生成动态代理</li></ul><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><h3 id="Java反射机制类"><a href="#Java反射机制类" class="headerlink" title="Java反射机制类"></a>Java反射机制类</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class; //类</span><br><span class="line">java.lang.reflect.Constructor;//构造方法</span><br><span class="line">java.lang.reflect.Field; //类的成员变量</span><br><span class="line">java.lang.reflect.Method;//类的方法</span><br><span class="line">java.lang.reflect.Modifier;//访问权限</span><br></pre></td></tr></table></figure><h3 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h3><ul><li>优点：运行期类型的判断，动态类加载，动态代理使用反射。</li><li>缺点：性能是一个问题，反射相当于一系列解释操作，通知jvm要做的事情，性能比直接的java代码要慢很多。</li></ul><h3 id="反射机制的应用场景"><a href="#反射机制的应用场景" class="headerlink" title="反射机制的应用场景"></a>反射机制的应用场景</h3><ul><li>逆向代码 ，例如反编译</li><li>与注解相结合的框架 例如Retrofit</li><li>单纯的反射机制应用框架 例如EventBus 2.x</li><li>动态生成类框架 例如Gson</li></ul><h2 id="反射机制的应用"><a href="#反射机制的应用" class="headerlink" title="反射机制的应用"></a>反射机制的应用</h2><h3 id="Spring框架的IOC"><a href="#Spring框架的IOC" class="headerlink" title="Spring框架的IOC"></a>Spring框架的IOC</h3><p>IOC中最基本的技术就是“反射(Reflection)”编程，，通俗来讲就是根据给出的类名（字符串方式）来动态地生成对象，这种编程方式可以让对象在生成时才决定到底是哪一种对象。只是在Spring中要生产的对象都在配置文件中给出定义，目的就是提高灵活性和可维护性。</p><p>我们可以把IOC容器的工作模式看做是工厂模式的升华，可以把IOC容器看作是一个工厂，这个工厂里要生产的对象都在配置文件中给出定义，然后利用编程语言的的反射编程，根据配置文件中给出的类名生成相应的对象。从实现来看，IOC是把以前在工厂方法里写死的对象生成代码，改变为由配置文件来定义，也就是把工厂和对象生成这两者独立分隔开来，目的就是提高灵活性和可维护性。</p><h3 id="Spring反射的策略模式"><a href="#Spring反射的策略模式" class="headerlink" title="Spring反射的策略模式"></a>Spring反射的策略模式</h3><p>如果不是用设计模式来做的情况下，会出现很多个 if-else 或者 switch 语句块。这样的话，代码耦合性也会非常高，将来再增加一个需求，则会导致一直增加判断语句块。也违反了面向对象的开闭原则。耦合性也会非常高，将来再增加一个需求，则会导致一直增加判断语句块。也违反了面向对象的开闭原则。反射+策略模式解决代码中if或switch代码块的代码耦合问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStragtrgyReflexContent</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span>,InitializingBean &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,MyStragtegy&gt; beanMap ;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现ApplicationContextAware接口，Spring容器会在创建MyStragtrgyReflexContent类之后，</span></span><br><span class="line"><span class="comment">     * 自动调用实现接口的setApplicationContextAware()方法，</span></span><br><span class="line"><span class="comment">     * 调用该方法时，会将ApplicationContext(容器本身)作为参数传给该方法，</span></span><br><span class="line"><span class="comment">     * 我们可以在该方法中将Spring传入的参数ApplicationContext赋给MyStragtrgyReflexContent对象的applicationContext实例变量，因此接下来可以通过该applicationContext实例变量来访问容器本身。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现InitializingBean接口，该接口提供了afterPropertiesSet方法。</span></span><br><span class="line"><span class="comment">     * spirng容器在初始化bean的时候会执行afterPropertiesSet方法，</span></span><br><span class="line"><span class="comment">     * 我们可以在该方法中调用applicationContext接口提供的getBeansOfType方法获得实现MyStragtegy类的Bean，将之存储至map集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String,MyStragtegy&gt; map = applicationContext.getBeansOfType(MyStragtegy.class);</span><br><span class="line">        <span class="built_in">this</span>.beanMap = map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> MyStragtegy <span class="title function_">getMyStragtegy</span><span class="params">(String beanName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.beanMap.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StragtegyReflexService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyStragtrgyReflexContent reflexContent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="type">MyStragtegy</span> <span class="variable">myStragtegy</span> <span class="operator">=</span> reflexContent.getMyStragtegy(type);</span><br><span class="line">        <span class="keyword">if</span> (myStragtegy!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> myStragtegy.play();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;还没有这个宠物哟！~&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/4pg9_7QyqVYoukpWswlb2g">Java反射机制及应用场景 - 王道通 - 工作LIFE </a></li><li><a href="https://mp.weixin.qq.com/s/j1FBTivlzCkZxVrY8i9JNg">Spring反射+策略模式Demo - Java程序猿部落 </a></li><li><a href="https://mp.weixin.qq.com/s/ZpCYYRGflRMrx41ro_eqGw">Spring使用反射机制后实现注解实例化Bean注入 </a></li><li><a href="https://my.oschina.net/freer/blog/897903">Spring的IOC（控制反转）/DI（依赖注入）原理（一）：用到“反射”编程 - Freer </a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Java的反射机制提供了运行时分析处理类的能力。&lt;/li&gt;
&lt;li&gt;Spring框架的IOC容器使用了反射技术，可以简化代码编写</summary>
      
    
    
    
    <category term="JavaEngineer" scheme="https://r0ad.github.io/categories/JavaEngineer/"/>
    
    
  </entry>
  
  <entry>
    <title>Java泛型机制和应用</title>
    <link href="https://r0ad.github.io/JavaEngineer/Java%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <id>https://r0ad.github.io/JavaEngineer/Java%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6%E5%92%8C%E5%BA%94%E7%94%A8/</id>
    <published>2023-03-07T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>泛型解决了参数类型缺少检查造成的问题。</li><li>泛型可以在类、接口、函数上使用。</li><li>通配符是为了让<code>Java</code>泛型支持范围限定，这样使得泛型的灵活性提升，同时也让通用性设计有了更多的空间。</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>编译期</strong>是指把源码交给编译器编译成计算机可执行文件的过程。<strong>运行期</strong>是指把编译后的文件交给计算机执行，直到程序结束。在<code>Java</code>中就是把<code>.java</code>文件编译成<code>.class</code>文件，再把编译后的文件交给<code>JVM</code>加载执行。</p><p>泛型又叫“参数化类型”。泛型就是在定义类、接口、方法的时候指定某一种特定类型（碗），让类、接口、方法的使用者来决定具体用哪一种类型的参数（盛的东西）。<code>Java</code>的泛型是在<code>1.5</code>引入的，只在<strong>编译期</strong>做泛型检查，<strong>运行期</strong>泛型就会消失，我们把这称为“泛型擦除”，最终类型都会变成 <code>Object</code>。</p><p>泛型主要解决的问题：</p><ul><li>集合对元素类型没有任何限制引发的业务问题。</li><li>把对象写入集合，在获取对象的时候进行强制类型转换出现问题。</li></ul><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p>使用菱形语法表示泛型，例如 <code>List&lt;String&gt; strList= new ArrayList&lt;&gt;();</code> 。</p><p>泛型允许在定义<code>类、接口、方法</code>时使用类型参数，这个类型形参将在变量声明、创建对象、调用方法时动态得指定。</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>类上定义泛型，作用于类的成员变量与函数，代码实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 使用T类型形参定义实际变量</span></span><br><span class="line">    <span class="keyword">private</span> T info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(T info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Apple</span><span class="params">(T info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建变量时候指定泛型类型，构造器只能使用对应类型</span></span><br><span class="line">        Apple&lt;String&gt; a1 = <span class="keyword">new</span> <span class="title class_">Apple</span>&lt;&gt;(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">        System.out.printf(a1.getInfo());</span><br><span class="line">        Apple&lt;Double&gt; a2 = <span class="keyword">new</span> <span class="title class_">Apple</span>&lt;&gt;(<span class="number">2.13</span>);</span><br><span class="line">        System.out.printf(a2.getInfo()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>接口上定义泛型，作用于函数，代码实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GenericInterface</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T t)</span>;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">delete</span><span class="params">(T t)</span>;</span><br><span class="line">    <span class="keyword">default</span> T <span class="title function_">defaultFunction</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><p>函数返回类型旁加上泛型，作用于函数，代码实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericFunction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">function</span><span class="params">(T t)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">functionTwo</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; String <span class="title function_">functionThree</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>通配符是为了让<code>Java</code>泛型支持范围限定，这样使得泛型的灵活性提升，同时也让通用性设计有了更多的空间。</p><ul><li><code>&lt;?&gt;</code>：无界通配符，即类型不确定，任意类型</li><li><code>&lt;? extends T&gt;</code>：上边界通配符，即<code>?</code>是继承自<code>T</code>的任意子类型，遵守只读不写</li><li><code>&lt;? super T&gt;</code>：下边界通配符，即<code>?</code>是<code>T</code>的任意父类型，遵守只写不读</li></ul><p>「 <strong>通配符限定的范围是体现在确认“参数化类型”的时候，而不是“参数化类型”填充后</strong> 」</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.创建泛型为Number的List类，Integer、Double、Long等都是Number的子类</span></span><br><span class="line"><span class="comment"> *   new ArrayList&lt;&gt;() 等价于 new ArrayList&lt;Number&gt;()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Number&gt; numberList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2.添加不同子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">numberList.add(<span class="number">1</span>);<span class="comment">//添加Integer类型</span></span><br><span class="line">numberList.add(<span class="number">0.5</span>);<span class="comment">//添加Double类型</span></span><br><span class="line">numberList.add(<span class="number">10000L</span>);<span class="comment">//添加Long类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3.创建泛型为Number的List类，Integer、Double、Long等都是Number的子类</span></span><br><span class="line"><span class="comment"> *   引用是泛型类别是Number，但具体实现指定的泛型是Integer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Number&gt; numberListTwo = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();<span class="comment">//err 异常编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4.创建泛型为Integer的List类，把该对象的引用地址指向泛型为Number的List</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">List&lt;Number&gt; numberListThree = integerList;<span class="comment">//err 异常编译不通过</span></span><br></pre></td></tr></table></figure><p>上边界通配符只读不写，下边界通配符只写不读。</p><ul><li><code>&lt;? extends T&gt;</code>上边界通配符不作为函数入参，只作为函数返回类型，比如<code>List&lt;? extends T&gt;</code>的使用add函数会编译不通过，get函数则没问题。</li><li><code>&lt;? super T&gt;</code>下边界通配符不作为函数返回类型，只作为函数入参，比如<code>List&lt;? super T&gt;</code>的add函数正常调用，get函数也没问题，但只会返回Object。</li></ul><p>设计原则可以参考 PECS (producer-extends,consumer-super)原则。PECS原则也就是说，如果参数化类型表示一个生产者E，就使用&lt;? extends E&gt;，如果参数化类型表示一个消费者E，则使用&lt;? super E&gt;。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">final</span> E[] elementData = (E[]) <span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            action.accept(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/fsB2bq9FrOQnNY5hE6s2wQ">一文通关苦涩难懂的Java泛型 - 程序猿阿星</a></li><li>《疯狂Java讲义-第9章 泛型》</li><li><a href="https://blog.csdn.net/sodawoods/article/details/125173733">Java泛型的PECS原则</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;泛型解决了参数类型缺少检查造成的问题。&lt;/li&gt;
&lt;li&gt;泛型可以在类、接口、函数上使用。&lt;/li&gt;
&lt;li&gt;通配符是为了让&lt;c</summary>
      
    
    
    
    <category term="JavaEngineer" scheme="https://r0ad.github.io/categories/JavaEngineer/"/>
    
    
  </entry>
  
  <entry>
    <title>网文大纲从零开始编写</title>
    <link href="https://r0ad.github.io/%E7%BD%91%E6%96%87%E5%AD%A6%E4%B9%A0/%E7%BD%91%E6%96%87%E5%A4%A7%E7%BA%B2%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99/"/>
    <id>https://r0ad.github.io/%E7%BD%91%E6%96%87%E5%AD%A6%E4%B9%A0/%E7%BD%91%E6%96%87%E5%A4%A7%E7%BA%B2%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99/</id>
    <published>2023-03-01T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>编写大致框架；</li><li>撰写设定落地；</li><li>撰写完善细纲。</li></ul><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><ul><li>记录灵感。</li><li>选定脑洞，刷同类文+查资料。</li></ul><h3 id="大纲阶段"><a href="#大纲阶段" class="headerlink" title="大纲阶段"></a>大纲阶段</h3><p>第一部分：编写大致框架</p><ul><li>步骤一： 一句话核心梗。<ul><li>一句话概括模板，谁（和谁）遭遇了什么，然后做（经历）了什么，最后结局如何。</li><li>一个好的作品，主题鲜明统一，有且仅有一个主题。</li></ul></li><li>步骤二：三百字～五百字简纲（全文梗概）。对一句话核心进行扩写。</li><li>步骤三：一干字～五干字粗纲（进一步细化的全文梗概）。</li></ul><p>第二部分：设定落地。</p><ul><li>步骤一：世界观（设定）。<ul><li>用一个文档写定这个故事的世界观。</li><li>世界观和设定写的越详细越好。</li></ul></li><li>步骤二：人设（人物小传）。<ul><li>Ta经历过些什么，ta被他人、被世界如何对待，从而让ta成为了现在的性格与模样？</li><li>Ta是一个这样的人，为什么？</li><li>编写人物基本资料卡。</li><li>构思一个具体的场景，把不同人物放进去看是什么反应。</li></ul></li><li>步骤三：人物线。<ul><li>固定某个角色的视角，把你的故事（粗纲）重新讲一遍。</li><li>从每个角色的视角，重新经历一遍这个故事。</li><li>两个关键点，人物动机（为什么这么做）和行动（做了什么）。</li><li>在人物线路，你要百分百尊重这个角色。</li></ul></li></ul><p>第三部分：完善细纲。</p><ul><li>步骤一：阶段</li><li>步骤二：事件（具体时间）</li><li>步骤三：细节（章纲）</li></ul><p>将步骤一到三用一个Excel罗列编写。</p><ul><li>步骤四：人物弧光（性格成长线+感情线）</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.bilibili.com/video/BV1Dr4y1M7bj?share_source=copy_web">超完整网文大纲教程（最新版）- 爱斯基布拉斯基-竹子</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编写大致框架；&lt;/li&gt;
&lt;li&gt;撰写设定落地；&lt;/li&gt;
&lt;li&gt;撰写完善细纲。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;教程&quot;</summary>
      
    
    
    
    <category term="网文" scheme="https://r0ad.github.io/categories/%E7%BD%91%E6%96%87/"/>
    
    <category term="技术人生" scheme="https://r0ad.github.io/categories/%E7%BD%91%E6%96%87/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>开源软件靠什么赚钱</title>
    <link href="https://r0ad.github.io/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E9%9D%A0%E4%BB%80%E4%B9%88%E8%B5%9A%E9%92%B1/"/>
    <id>https://r0ad.github.io/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E9%9D%A0%E4%BB%80%E4%B9%88%E8%B5%9A%E9%92%B1/</id>
    <published>2023-02-20T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.647Z</updated>
    
    <content type="html"><![CDATA[<p>使用CSDN的 ChatGPT （ <a href="https://so.csdn.net/so/chat">https://so.csdn.net/so/chat</a> ）询问“开源项目靠什么赚钱”会得到如下答案。</p><p>开源项目通常是免费使用的，但是这并不意味着开发者不能赚钱。开源项目可以通过以下方式获得收益：</p><ul><li>提供商业支持和服务：开发者可以为使用开源项目的企业或个人提供商业支持和服务，例如帮助他们安装、调试、维护和升级软件。</li><li>开发附加功能或插件：开发者可以为开源项目开发附加功能或插件，并向使用者收费。</li><li>接受捐赠：开发者可以在自己的网站上提供捐赠按钮，供感谢他们的用户捐赠。</li><li>在线广告：如果开源项目有一个网站或在线应用程序，开发者可以在其中放置广告来获得收益。</li><li>开展培训或咨询业务：开发者可以通过提供培训或咨询服务来获得收益，帮助使用者更好地使用开源项目。</li><li>其他方式：还有其他许多方法可以让开源项目开发者赚钱，例如出版书籍、举办会议等。</li></ul><p>通过知乎网站（个人搞开源怎么赚钱？ - OSCHINA的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/355411897">https://zhuanlan.zhihu.com/p/355411897</a> ）获取答案会获得更加全面的回答，相比chatgpt的简洁回答，知乎回答的更有理有据。</p><p>“在不违反开源许可证以及开源社区基本道德准则的前提下，开发者从开源项目中合理获利并不是一件坏事。 自由软件运动领袖 Richard Stallman （RMS）曾鼓励自由与开源软件作者合理利用开源软件赚钱，以更好地维持项目的研发和推广。Linux Kernel 维护者 Linus Torvalds 也接受着来自各大厂商的资助，从而能够全职进行 Linux Kernel 的维护工作。”</p><ol><li>Bug 赏金计划</li></ol><p>BUG 赏金计划是很多大型开源机构面向个人开发者推出的一种赚钱的方式。开发者可以通过报告开源项目上的 BUG，也可以直接修复这些 BUG 获得来自项目官方不同程度的奖金。</p><ol start="2"><li>提供付费支持</li></ol><p>提供付费支持是很多开源项目团队获利的经典方式之一。 </p><p>如果开发者决定开始为某开源项目提供付费支持，则可以向其他人提供他们需要的有偿服务，这里有些例子：帮助进行基本安装或使用。代码和错误修复。添加新的和额外的功能。提供书面文件（例如书籍和教程）。但要注意，如果你提供的支持包括对项目源代码进行更改，则需要核对项目采用的开源许可证，以确保其允许该类型的活动。当然，你不能只修改项目原作者的原始代码，你必须维护自己的产品副本。</p><ol start="3"><li>出售增强功能/插件</li></ol><p>例如，开发人员销售 WordPress 插件。用户可以免费下载并安装 WordPress，但WordPress 拥有丰富的付费插件生态，用户会根据自己的需求购买用于修改或增强现有功能的付费插件，开发者可以通过开发并出售这些插件获利。</p><ol start="4"><li>出售代码以外的内容</li></ol><ul><li>写和出售关于该项目的书籍教程。这可以通过与出版社推荐主题来完成。后者将负责编辑过程和发布步骤，让你专注于写作。当然，你必须与出版社分配收入，但这是值得的。</li><li>为一些内容付费平台创建视频课程。这样做会产生被动收入，就像书出版后一样。另外，这些平台通常会提供视频培训。</li><li>撰写有关产品的推广帖子。这并不意味着开源产品的所有者要向您付费以撰写这些帖子，而是使某些博客对该主题感兴趣，并愿意向你付费以提供有关其他主题的内容。</li></ul><ol start="5"><li>来自用户的捐赠</li></ol><p>GitHub、Gitee 等代码托管平台都拥有用户捐赠的功能，开源项目拥有者可以从这些平台获得来自用户的自发捐赠，当然这项收入的大小要取决于你的项目是否足够强大，以及你所在地区的用户是否足够慷慨。</p><ol start="6"><li>用参与开源提升自己的职场竞争力</li></ol><p>有时单纯的参与开源项目的代码贡献并不能带来直接的金钱利益，但开发者可以将这段经历写进简历里，以获得更多的就业机会。也可以通过参与大型公司旗下的开源项目，从而获得进入这家公司工作的机会。</p><p><strong>CSDN的 ChatGPT 也是使用开源模型建立的，开源产品也可以商业化也就是一个例子。通过开源产品能赚钱，但是有难度。但总的来说对于技术的提升、个人影响力的提升都是很重要的一种方法。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用CSDN的 ChatGPT （ &lt;a href=&quot;https://so.csdn.net/so/chat&quot;&gt;https://so.csdn.net/so/chat&lt;/a&gt; ）询问“开源项目靠什么赚钱”会得到如下答案。&lt;/p&gt;
&lt;p&gt;开源项目通常是免费使用的，但是这并不意</summary>
      
    
    
    
    <category term="技术人生" scheme="https://r0ad.github.io/categories/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Springboot集成MybatisGenerator</title>
    <link href="https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E4%BD%BF%E7%94%A8Springboot%E9%9B%86%E6%88%90MybatisGenerator/"/>
    <id>https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E4%BD%BF%E7%94%A8Springboot%E9%9B%86%E6%88%90MybatisGenerator/</id>
    <published>2023-02-19T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Mybatis Generator 可以生成mybatis的模板代码，包括动态脚本、实体类、Mapper映射访问类。<br>Mybatis Generator 有多种使用方式，此处介绍一种线上环境比较用的多的场景，通过Maven插件使用。</p><p>使用方法如下：</p><ol><li>通过核心jar包cmd使用。 例如 <code>java -jar mybatis-generator-core-x.x.x.jar -configfile \temp\generatorConfig.xml -overwrite</code></li><li>通过 <code>Ant task</code> 使用。</li><li>通过 java程序使用。</li><li>通过 Maven Plugin 使用。</li></ol><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>JDK 1.8+</li><li>SpringBoot 2.1+</li><li>mybatis 3+</li></ul><h2 id="引入-MybatisGenerator"><a href="#引入-MybatisGenerator" class="headerlink" title="引入 MybatisGenerator"></a>引入 MybatisGenerator</h2><ol><li>引入mybatis，用于后续的代码使用。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>MybatisGenerator Maven Plugin的引入和配置。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定配置文件地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generatorConfigSqlLite.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MBG配置使用"><a href="#MBG配置使用" class="headerlink" title="MBG配置使用"></a>MBG配置使用</h2><p>MBG配置有两种形式，一种是xml、一种是java代码。此处演示使用的是xml配置的方式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定数据库连接池用到的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;E:\repo\mvn-repo\org\xerial\sqlite-jdbc\3.40.1.0\sqlite-jdbc-3.40.1.0.jar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定 数据库链接配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;org.sqlite.JDBC&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:sqlite:E:\ws-research\backend\rssboot\src\main\resources\db\rssboot.db&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定javaBean生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;io.rainforest.rss.dao.po&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定sql映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/resources/mybatis&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定dao接口生成的位置，mapper接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;io.rainforest.rss.dao.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- table指定每个表的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;rss_follow&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;MySql&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://mybatis.org/generator/running/running.html">Running MyBatis Generator - http://mybatis.org/generator/running/running.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Mybatis Generator 可以生成mybatis的模板代码，包括动态脚本、实体类、Mapper映射访问类。&lt;br&gt;Mybatis </summary>
      
    
    
    
    <category term="编程技术" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Spring" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Springboot集成Sqlite</title>
    <link href="https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E4%BD%BF%E7%94%A8Springboot%E9%9B%86%E6%88%90Sqlite/"/>
    <id>https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E4%BD%BF%E7%94%A8Springboot%E9%9B%86%E6%88%90Sqlite/</id>
    <published>2023-02-19T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SQLite，是一款轻型的数据库，是遵守ACID的关系型数据库管理系统，它包含在一个相对小的C库中。它是D.RichardHipp建立的公有领域项目。它的设计目标是嵌入式的，而且已经在很多嵌入式产品中使用了它，它占用资源非常的低，在嵌入式设备中，可能只需要几百K的内存就够了。</p><p>简单来说，通过一个文件就能启动和使用关系型数据库管理。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>JDK 1.8+</li><li>SpringBoot 2.1+</li></ul><h2 id="引入sqlite"><a href="#引入sqlite" class="headerlink" title="引入sqlite"></a>引入sqlite</h2><ol><li>引入sqlite依赖和数据库依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xerial<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sqlite-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.40.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改启动配置：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 数据库连接池</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#  驱动使用sqlite</span></span></span><br><span class="line">spring.datasource.driver-class-name=org.sqlite.JDBC</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定数据库位置，相对或者绝对定位</span></span><br><span class="line">spring.datasource.url=jdbc:sqlite::resource:db/rssboot.db</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>通过mybatis操作数据库。</li><li>通过JdbcTemplate操作数据库。</li><li>通过 JPA 操作数据库。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>无</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;SQLite，是一款轻型的数据库，是遵守ACID的关系型数据库管理系统，它包含在一个相对小的C库中。它是D.RichardHipp建立的公有</summary>
      
    
    
    
    <category term="编程技术" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Spring" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>02-Spring中的设计模式之模板模式</title>
    <link href="https://r0ad.github.io/%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Spring5%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/02-Spring%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
    <id>https://r0ad.github.io/%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Spring5%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/02-Spring%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-12-07T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>模板方法模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。模板方法模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤。这里的“算法”，我们可以理解为广义上的“业务逻辑”，并不特指数据结构和算法中的“算法”。这里的算法骨架就是“模板”，包含算法骨架的方法就是“模板方法”，这也是模板方法模式名字的由来。</p><p>模板模式有两大作用：复用和扩展。其中复用指的是，所有的子类可以复用父类中提供的模板方法的代码。扩展指的是，框架通过模板模式提供功能扩展点，让框架用户可以在不修改框架源码的情况下，基于扩展点定制化框架的功能。</p><p>除此之外，我们还讲到回调。它跟模板模式具有相同的作用：代码复用和扩展。在一些框架、类库、组件等的设计中经常会用到，比如 JdbcTemplate 就是用了回调。相对于普通的函数调用，回调是一种双向调用关系。A 类事先注册某个函数 F 到 B 类，A 类在调用 B 类的 P 函数的时候，B 类反过来调用 A 类注册给它的 F 函数。这里的 F 函数就是“回调函数”。A 调用 B，B 反过来又调用 A，这种调用机制就叫作“回调”。</p><p>回调可以细分为同步回调和异步回调。从应用场景上来看，同步回调看起来更像模板模式，异步回调看起来更像观察者模式。回调跟模板模式的区别，更多的是在代码实现上，而非应用场景上。回调基于组合关系来实现，模板模式基于继承关系来实现。回调比模板模式更加灵活。</p><h2 id="Spring中的模板方法"><a href="#Spring中的模板方法" class="headerlink" title="Spring中的模板方法"></a>Spring中的模板方法</h2><ul><li>DefaultListableBeanFactory 中的 BeanFactoryPostProcessor 。</li><li>DefaultListableBeanFactory 中的 BeanPostProcessor 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor <span class="comment">// 注解配置处理</span></span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor <span class="comment">// 自动注入处理</span></span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor <span class="comment">// 通用注解处理</span></span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor <span class="comment">// 事件处理类</span></span><br><span class="line">org.springframework.context.event.internalEventListenerFactory <span class="comment">// 事件监听类</span></span><br></pre></td></tr></table></figure><ul><li>同一调用postProcessBeanFactory接口方法执行对BeanFactory的后置处理。</li><li>同一调用 postProcessBeforeInitialization postProcessAfterInitialization 接口方法执行对Bean的后置处理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Modify the application context&#x27;s internal bean factory after its standard</span></span><br><span class="line"><span class="comment"> * initialization. All bean definitions will have been loaded, but no beans</span></span><br><span class="line"><span class="comment"> * will have been instantiated yet. This allows for overriding or adding</span></span><br><span class="line"><span class="comment"> * properties even to eager-initializing beans.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanFactory the bean factory used by the application context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Factory hook that allows for custom modification of new bean instances &amp;mdash;</span></span><br><span class="line"><span class="comment"> * for example, checking for marker interfaces or wrapping beans with proxies.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">default</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">default</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.spring.design;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板方法设计模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Q</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateMethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBeanFactory</span>();</span><br><span class="line">        beanFactory.addBeanPostProcessor((bean) -&gt; System.out.println(<span class="string">&quot;注入 @Autowired&quot;</span> + bean));</span><br><span class="line">        beanFactory.addBeanPostProcessor((bean) -&gt; System.out.println(<span class="string">&quot;注入 @Resource&quot;</span> + bean));</span><br><span class="line">        beanFactory.addBeanPostProcessor((bean) -&gt; System.out.println(<span class="string">&quot;注入 @Configuration&quot;</span> + bean));</span><br><span class="line"></span><br><span class="line">        System.out.println(beanFactory.getBean());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactory</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;构造 &quot;</span> + bean);</span><br><span class="line">            <span class="comment">// 1. 解析@Autowired</span></span><br><span class="line">            <span class="comment">// 2. 解析@Resource</span></span><br><span class="line">            System.out.println(<span class="string">&quot;依赖注入 &quot;</span> + bean);</span><br><span class="line">            postProcessorList.forEach(beanPostProcessor -&gt; &#123;</span><br><span class="line">                beanPostProcessor.inject(bean);</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化 &quot;</span> + bean);</span><br><span class="line">            <span class="comment">// 扩展功能需要修改代码</span></span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBeanPostProcessor</span><span class="params">(BeanPostProcessor beanPostProcessor)</span> &#123;</span><br><span class="line">            postProcessorList.add(beanPostProcessor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> List&lt;BeanPostProcessor&gt; postProcessorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">        <span class="comment">// 依赖注入模板方法，通过调用接口，具体得实现将某些步骤推迟到子类中实现</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">(Object bean)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://time.geekbang.org/column/article/227452">74 | 总结回顾23种经典设计模式的原理、背后的思想、应用场景等</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模板模式&quot;&gt;&lt;a href=&quot;#模板模式&quot; class=&quot;headerlink&quot; title=&quot;模板模式&quot;&gt;&lt;/a&gt;模板模式&lt;/h2&gt;&lt;p&gt;模板方法模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。模板方法模式可以让子类在不改变算法整体结构的情况下，</summary>
      
    
    
    
    <category term="深度讲解Spring5底层原理" scheme="https://r0ad.github.io/categories/%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Spring5%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>01-Spring中BeanFacory和ApplicationContext的功能与实现</title>
    <link href="https://r0ad.github.io/%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Spring5%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/01-Spring%E4%B8%ADBeanFacory%E5%92%8CApplicationContext%E7%9A%84%E5%8A%9F%E8%83%BD%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://r0ad.github.io/%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Spring5%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/01-Spring%E4%B8%ADBeanFacory%E5%92%8CApplicationContext%E7%9A%84%E5%8A%9F%E8%83%BD%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-12-06T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h2><pre class="mermaid">flowchart LRA(Spring) --> B(BeanFacory)A --> C(ApplicationContext)C --> 1(功能)C --> 2(实现)B --> 3(功能)B --> 4(实现)A --> 5(差异)</pre><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><p><code>org.springframework.beans</code> 和 <code>org.springframework.context</code> 是Spring框架IoC容器的基础包。 <code>BeanFactory</code> 接口提供了一种高级配置机制，能够管理任何类型的对象。ApplicationContext是BeanFactory的子接口，添加了如下功能：</p><ul><li>更容易与Spring的AOP功能集成</li><li>消息资源处理（用于国际化）</li><li>事件发布</li><li>特定应用层的上下文，如用于web应用程序的WebApplicationContext</li></ul><table><caption class="title">Table 9. Feature Matrix</caption><colgroup><col style="width: 50%;"><col style="width: 25%;"><col style="width: 25%;"></colgroup><thead><tr><th >Feature</th><th ><code>BeanFactory</code></th><th ><code>ApplicationContext</code></th></tr></thead><tbody><tr><td ><p>Bean instantiation/wiring Bean的实例化和自动装配</p></td><td ><p>Yes</p></td><td ><p>Yes</p></td></tr><tr><td ><p>Integrated lifecycle management 集成bean生命周期管理</p></td><td ><p>No</p></td><td ><p>Yes</p></td></tr><tr><td ><p>Automatic <code>BeanPostProcessor </code> registration Bean后置处理器自动注册</p></td><td ><p>No</p></td><td ><p>Yes</p></td></tr><tr><td ><p>Automatic <code>BeanFactoryPostProcessor</code> registration BeanFactory后置处理器自动注册</p></td><td ><p>No</p></td><td ><p>Yes</p></td></tr><tr><td ><p>Convenient <code>MessageSource</code> access (for internationalization) 国际化资源访问</p></td><td ><p>No</p></td><td ><p>Yes</p></td></tr><tr><td ><p>Built-in <code>ApplicationEvent</code> publication mechanism 内置事件发布机制</p></td><td ><p>No</p></td><td ><p>Yes</p></td></tr></tbody></table><h2 id="常见实现"><a href="#常见实现" class="headerlink" title="常见实现"></a>常见实现</h2><p>ApplicationContext：</p><ul><li>AnnotationConfigApplicationContext 基于注解配置的A加载上下文</li><li>ClassPathXmlApplicationContext 基于xml配置的加载上下文</li><li>FileSystemXmlApplicationContext 基于xml配置的加载上下文</li><li>GenericApplicationContext 通用的上下文，更加灵活加载配置</li></ul><p>BeanFactory：</p><ul><li>DefaultListableBeanFactory 默认BeanFactory</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>beanFactory 不会做的事情：</p><ol><li>不会主动调用 beanFactory的后处理器</li><li>不会主动添加Bean的后处理器</li><li>不会主动初始化单例</li><li>不会解析beanFactory，还不会解析 ${} 占位符 #{} EL表达式</li></ol><p>通过 <code>DefaultListableBeanFactory</code> 实现 ApplicationContext的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.spring.ioc.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppBeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">        <span class="comment">// bean的定义 初始化 销毁 class scope 生命周期定义</span></span><br><span class="line">        <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(Config.class)</span><br><span class="line">                .setScope(BeanDefinition.SCOPE_SINGLETON).getBeanDefinition();</span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>, beanDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给beanFactory添加常用的后置处理器</span></span><br><span class="line">        <span class="comment">// 设置排序方法</span></span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line">        <span class="comment">// beanFactory 执行后置处理器类 补充一些bean的定义</span></span><br><span class="line">        beanFactory.getBeansOfType(BeanFactoryPostProcessor.class).values().stream().sorted(beanFactory.getDependencyComparator()).forEach(beanFactoryPostProcessor -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BeanFactoryPostProcessor: &quot;</span> + beanFactoryPostProcessor.getClass());</span><br><span class="line">            beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bean 执行后置处理器类 补充一些bean的扩展处理  如 @autowired @resource</span></span><br><span class="line">        beanFactory.getBeansOfType(BeanPostProcessor.class).values().forEach(beanPostProcessor -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BeanPostProcessor: &quot;</span> + beanPostProcessor.getClass());</span><br><span class="line">            beanFactory.addBeanPostProcessor(beanPostProcessor);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预处理单例类</span></span><br><span class="line">        beanFactory.preInstantiateSingletons();</span><br><span class="line"></span><br><span class="line">        System.out.println(beanFactory.getBean(Bean1.class).getBean2());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(beanDefinitionName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// beanFactory 后处理器有排序的逻辑</span></span><br><span class="line">        System.out.println(beanFactory.getBean(Bean1.class).getInter());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean3 <span class="title function_">bean3</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean3</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean4 <span class="title function_">bean4</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean4</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="meta">@Resource(name = &quot;bean4&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Inter bean3;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean1构造器初始化&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">getBean2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bean2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Inter <span class="title function_">getInter</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bean3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean2构造器初始化&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean3</span> <span class="keyword">implements</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean4</span> <span class="keyword">implements</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/core.html#resources">1.16.1. BeanFactory or ApplicationContext?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导图&quot;&gt;&lt;a href=&quot;#导图&quot; class=&quot;headerlink&quot; title=&quot;导图&quot;&gt;&lt;/a&gt;导图&lt;/h2&gt;&lt;pre class=&quot;mermaid&quot;&gt;flowchart LR
A(Spring) --&gt; B(BeanFacory)
A --&gt; C(App</summary>
      
    
    
    
    <category term="深度讲解Spring5底层原理" scheme="https://r0ad.github.io/categories/%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Spring5%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>把工作当做热爱</title>
    <link href="https://r0ad.github.io/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/%E6%8A%8A%E5%B7%A5%E4%BD%9C%E5%BD%93%E5%81%9A%E7%83%AD%E7%88%B1/"/>
    <id>https://r0ad.github.io/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/%E6%8A%8A%E5%B7%A5%E4%BD%9C%E5%BD%93%E5%81%9A%E7%83%AD%E7%88%B1/</id>
    <published>2022-06-22T16:00:00.000Z</published>
    <updated>2023-10-07T10:02:37.766Z</updated>
    
    <content type="html"><![CDATA[<p>一个人每周至少要工作40个小时，而平均每个人的工作年限是35年，也就是说除了睡觉以外，占据你最多时间的是——工作。<br>你是要浑浑噩噩度过一天中精力最充足的时间，还是集中精力解决一个个抛过来的难题磨练自己的技能，选择权在于你。</p><p>稻盛和夫曾说过：“劳动的意义不仅在于追求业绩，更在于完善人的内心。”</p><p>而你会发现，当你不再“逃跑”，而是选择面对直视问题的时候，你的人格就得到了磨练，你逐渐从从一个喜欢逃避、厌恶麻烦、随意任性的人变成一个直接面对问题、有责任感、值得信任的成熟社会人。</p><p>就是如果你一心扑在工作上，不管吃饭也好、睡觉也好，都在想着工作，那么那个困扰你很久的问题就可能在某个时刻得到启示。</p><p>每天吃吃喝喝的生活，在第一个星期的时候或许会觉得享受，但如果把这样的生活持续一个月、甚至半年，你会发现，你根本感觉不到快乐了。<br>因为幸福是一种对比，或者说是一种感受的落差。</p><p>不可否认的是，工作能够给人带来意义感。</p><p>正如稻盛和夫所说，“拼命工作的背后隐藏着快乐和欢喜，正像慢慢长夜结束后，曙光就会到来一样。”</p><p>在《干法》中，稻盛和夫将人分为三种类型：</p><p>1）不燃型：点火也烧不起来的人；<br>2）可燃型：点火就着的人；<br>3）自燃型：没人点自己就能熊熊燃烧的人。</p><p>自燃型的他们有极强的自主驱动力，长期处于学习区，他们不认为工作是一种任务，相反的是，他们认为工作很有意思，他们从来不会等别人吩咐了才去干，而是在被人吩咐之前就自发去干。</p><p>把工作当做热爱的认识能够持久的发光发热，温柔度过漫长的日子。</p><p>摘录自： 《人为什么要热爱工作？这是我听过最好的答案》<a href="https://mp.weixin.qq.com/s/_CNAsITDLyTMpOuVJrYh4Q">https://mp.weixin.qq.com/s/_CNAsITDLyTMpOuVJrYh4Q</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个人每周至少要工作40个小时，而平均每个人的工作年限是35年，也就是说除了睡觉以外，占据你最多时间的是——工作。&lt;br&gt;你是要浑浑噩噩度过一天中精力最充足的时间，还是集中精力解决一个个抛过来的难题磨练自己的技能，选择权在于你。&lt;/p&gt;
&lt;p&gt;稻盛和夫曾说过：“劳动的意义不</summary>
      
    
    
    
    <category term="技术人生" scheme="https://r0ad.github.io/categories/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>06-追踪微服务调用</title>
    <link href="https://r0ad.github.io/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1/06-%E8%BF%BD%E8%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    <id>https://r0ad.github.io/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1/06-%E8%BF%BD%E8%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</id>
    <published>2022-05-08T16:00:00.000Z</published>
    <updated>2023-10-07T10:02:37.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@startmindmap</span><br><span class="line">* 追踪微服务调用</span><br><span class="line">** 服务追踪的作用</span><br><span class="line">*** 优化系统瓶颈</span><br><span class="line">*** 优化链路调用</span><br><span class="line">*** 生成网络拓扑</span><br><span class="line">*** 透明传输数据</span><br><span class="line">** 服务追踪系统原理</span><br><span class="line">*** traceId，用于标识某一次具体的请求 ID。</span><br><span class="line">*** spanId，用于标识一次 RPC 调用在分布式请求中的位置。</span><br><span class="line">*** annotation，用于业务自定义埋点数据。</span><br><span class="line">** 服务追踪系统实现</span><br><span class="line">*** 数据采集层，负责数据埋点并上报。</span><br><span class="line">*** 数据处理层，负责数据的存储与计算。</span><br><span class="line">*** 数据展示层，负责数据的图形化展示。</span><br><span class="line">@endmindmap</span><br></pre></td></tr></table></figure><p>微服务架构下，由于进行了服务拆分，一次请求往往需要涉及多个服务，每个服务可能是由不同的团队开发，使用了不同的编程语言，还有可能部署在不同的机器上，分布在不同的数据中心。</p><h2 id="服务追踪的作用"><a href="#服务追踪的作用" class="headerlink" title="服务追踪的作用"></a>服务追踪的作用</h2><ul><li>第一，优化系统瓶颈。<br>通过记录调用经过的每一条链路上的耗时，我们能快速定位整个系统的瓶颈点在哪里</li><li>第二，优化链路调用。<br>通过服务追踪可以分析调用所经过的路径，然后评估是否合理。</li><li>第三，生成网络拓扑。<br>通过服务追踪系统中记录的链路信息，可以生成一张系统的网络调用拓扑图，它可以反映系统都依赖了哪些服务，以及服务之间的调用关系是什么样的。</li><li>第四，透明传输数据。</li></ul><h2 id="服务追踪系统原理"><a href="#服务追踪系统原理" class="headerlink" title="服务追踪系统原理"></a>服务追踪系统原理</h2><p><a href="http://bigbully.github.io/Dapper-translation/">Dapper, a Large-Scale Distributed Systems Tracing Infrastructure</a>：调用链：通过一个全局唯一的 ID 将分布在各个服务节点上的同一次请求串联起来，从而还原原有的调用关系，可以追踪系统问题、分析调用数据并统计各种系统指标。</p><ul><li>traceId，用于标识某一次具体的请求 ID。当用户的请求进入系统后，会在 RPC 调用网络的第一层生成一个全局唯一的 traceId，并且会随着每一层的 RPC 调用，不断往后传递，这样的话通过 traceId 就可以把一次用户请求在系统中调用的路径串联起来。</li><li>spanId，用于标识一次 RPC 调用在分布式请求中的位置。当用户的请求进入系统后，处在 RPC 调用网络的第一层 A 时 spanId 初始值是 0，进入下一层 RPC 调用 B 的时候 spanId 是 0.1，继续进入下一层 RPC 调用 C 时 spanId 是 0.1.1，而与 B 处在同一层的 RPC 调用 E 的 spanId 是 0.2，这样的话通过 spanId 就可以定位某一次 RPC 请求在系统调用中所处的位置，以及它的上下游依赖分别是谁。</li><li>annotation，用于业务自定义埋点数据，可以是业务感兴趣的想上传到后端的数据，比如一次请求的用户 UID。</li></ul><h2 id="服务追踪系统实现"><a href="#服务追踪系统实现" class="headerlink" title="服务追踪系统实现"></a>服务追踪系统实现</h2><ul><li>数据采集层，负责数据埋点并上报。</li><li>数据处理层，负责数据的存储与计算。</li><li>数据展示层，负责数据的图形化展示。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[从 0 开始学微服务 - 极客时间 - 胡忠想]</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="从0开始学微服务" scheme="https://r0ad.github.io/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
</feed>
