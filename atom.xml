<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>code trend</title>
  
  <subtitle>专注软件技术发展趋势，传播软件技术</subtitle>
  <link href="https://r0ad.github.io/atom.xml" rel="self"/>
  
  <link href="https://r0ad.github.io/"/>
  <updated>2023-08-17T16:00:00.000Z</updated>
  <id>https://r0ad.github.io/</id>
  
  <author>
    <name>codeman</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跟着GPT学设计模式之桥接模式</title>
    <link href="https://r0ad.github.io/%E8%B7%9F%E7%9D%80GPT%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/06-%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://r0ad.github.io/%E8%B7%9F%E7%9D%80GPT%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/06-%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-03-12T16:00:00.000Z</published>
    <updated>2023-08-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>桥接模式，也叫作桥梁模式，英文是 Bridge Design Pattern。在 GoF 的《设计模式》一书中，桥接模式是这么定义的：“Decouple an abstraction from its implementation so that the two can vary independently。”翻译成中文就是：“将抽象和实现解耦，让它们可以独立变化。” 桥接模式通过将一个类的抽象部分与实现部分分离开来，使它们可以独立地进行扩展和修改。</p><p>在桥接模式中，有两个核心概念：</p><ul><li>抽象部分（Abstraction）：定义抽象部分的接口，并维护一个对实现部分对象的引用。抽象部分将客户端的请求委派给实现部分进行处理。</li><li>实现部分（Implementation）：定义实现部分的接口，并提供具体实现。实现部分通常是通过接口或抽象类来定义，让不同的实现部分可以灵活替换。</li></ul><p>通过桥接模式，抽象部分和实现部分可以独立地发展和演化，不会相互影响。这种解耦可以提高系统的灵活性和可扩展性。桥接模式常用于以下情况：</p><ul><li>当一个类拥有多个变化维度时，可以使用桥接模式将每个维度抽象出来，使得它们可以独立地变化。</li><li>当需要在抽象部分和实现部分之间建立稳定的关联关系，又希望它们可以独立地进行扩展和修改时，可以使用桥接模式。</li></ul><p>以下是桥接模式的结构示意图：</p><pre class="mermaid">classDiagram  class Abstraction {    + implementor: Implementor    + operation(): void  }  class RefinedAbstraction {    + operation(): void  }  class Implementor {    + operationImpl(): void  }  class ConcreteImplementorA {    + operationImpl(): void  }  class ConcreteImplementorB {    + operationImpl(): void  }  Abstraction <|-- RefinedAbstraction  Abstraction o-- Implementor  Implementor <|.. ConcreteImplementorA  Implementor <|.. ConcreteImplementorB</pre><p>Abstraction（抽象化角色）通过持有Implementor（实现化角色）的引用，将操作委托给Implementor来实现。RefinedAbstraction（扩充抽象化角色）继承自Abstraction，并可以在基础操作上添加额外的功能。Implementor（实现化角色）是一个接口或抽象类，定义了在Abstraction中使用的操作方法。ConcreteImplementorA和ConcreteImplementorB（具体实现化角色）实现了Implementor接口，并提供了具体的操作实现。</p><p>在桥接模式中，抽象部分通过聚合（或组合）实现部分的对象来实现功能。通过定义抽象部分和实现部分的接口，以及维护它们之间的关联关系，可以实现抽象部分与实现部分的解耦和独立变化。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>在Java开源项目中，桥接模式有许多应用场景。以下是其中几个示例：</p><ul><li>JDBC（Java Database Connectivity）：JDBC是Java中用于与数据库进行交互的API。它使用桥接模式将Java应用程序与不同数据库之间的连接进行解耦。JDBC提供了一个标准的接口，即抽象部分，而具体的数据库驱动程序实现则作为实现部分。这使得开发人员可以通过改变数据库驱动程序实现来与不同类型的数据库进行交互，而不需要修改应用程序的代码。</li><li>AWT（Abstract Window Toolkit）和Swing：AWT和Swing是Java的图形用户界面（GUI）工具包。它们使用桥接模式将组件的外观（如按钮、文本框）与底层操作系统的窗口系统分离开来。在AWT和Swing中，抽象部分是Java中的组件类，而实现部分是由底层平台提供的本地窗口系统。</li><li>日志库：许多Java开源项目使用日志库进行日志记录。例如，Log4j和Logback是常见的日志库。它们使用桥接模式将应用程序的日志记录行为与底层的日志输出目标（如控制台、文件、数据库）解耦。抽象部分是由日志库提供的通用日志API，而实现部分是具体的日志输出目标。</li><li>数据源连接池：连接池被广泛用于管理数据库连接的重用。在Java中，常见的开源连接池项目如HikariCP和Commons DBCP使用桥接模式来支持不同类型的数据库连接。它们提供了一个通用的连接池接口作为抽象部分，而具体的数据库驱动程序实现则作为实现部分。</li></ul><p>这些示例说明了在Java开源项目中桥接模式的应用。通过桥接模式，可以将不同维度的变化解耦，在代码的可扩展性和灵活性方面提供支持。</p><h2 id="编程示例"><a href="#编程示例" class="headerlink" title="编程示例"></a>编程示例</h2><p>首先，定义抽象部分的接口或抽象类。这个接口或抽象类将定义高层操作或功能，并将包含一个对实现部分的引用。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，创建实现部分的接口或抽象类。这个接口或抽象类将定义实现部分的操作或功能。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，实现具体的实现部分类。这些类将实现实现部分的接口或抽象类。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Red</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filling with red color&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blue</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filling with blue color&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在抽象部分的接口或抽象类中添加对实现部分的引用，并在其中定义具体的操作。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractShape</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbstractShape</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，创建具体的抽象部分类。这些类将扩展抽象部分的接口或抽象类，并实现具体的操作。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">AbstractShape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Drawing a circle. &quot;</span>);</span><br><span class="line">        color.fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">AbstractShape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Drawing a rectangle. &quot;</span>);</span><br><span class="line">        color.fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，可以使用桥接模式来创建抽象部分和实现部分之间的桥接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建实现部分的对象</span></span><br><span class="line"><span class="type">Color</span> <span class="variable">red</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Red</span>();</span><br><span class="line"><span class="type">Color</span> <span class="variable">blue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Blue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建抽象部分的对象并进行桥接</span></span><br><span class="line"><span class="type">Shape</span> <span class="variable">redCircle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(red);</span><br><span class="line"><span class="type">Shape</span> <span class="variable">blueRectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(blue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用抽象部分的方法，它会委派给实现部分的对象</span></span><br><span class="line">redCircle.draw(); <span class="comment">// Output: Drawing a circle. Filling with red color</span></span><br><span class="line">blueRectangle.draw(); <span class="comment">// Output: Drawing a rectangle. Filling with blue color</span></span><br></pre></td></tr></table></figure><p>以上内容基于GPT创建和整理。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>设计模式之美(作者王争，来自极客时间)</li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
    <summary type="html">“将抽象和实现解耦，让它们可以独立变化。” 桥接模式通过将一个类的抽象部分与实现部分分离开来，使它们可以独立地进行扩展和修改。</summary>
    
    
    
    <category term="跟着GPT学设计模式" scheme="https://r0ad.github.io/categories/%E8%B7%9F%E7%9D%80GPT%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>并发编程Thread的常用API有哪些？</title>
    <link href="https://r0ad.github.io/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/04-Thread%E5%B8%B8%E7%94%A8API%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://r0ad.github.io/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/04-Thread%E5%B8%B8%E7%94%A8API%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2024-03-08T01:05:00.000Z</published>
    <updated>2024-03-08T01:28:43.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在JDK17（或以上版本）中，<code>Thread</code>类提供了一组常用的API，用于管理线程的创建、启动、暂停、恢复和销毁等操作。本文从api、源码、编程示例等方面详细说明Thread常用函数的使用和注意事项。</p><pre class="mermaid">flowchart LR    A[Thread常用API使] --> sleep    A --> yield    A --> 设置线程的优先级    A --> 获取线程ID    A --> 获取当前线程    A --> 设置线程上下文类加载器    A --> interrupt    A --> join    A --> 关闭线程</pre><h2 id="线程-sleep"><a href="#线程-sleep" class="headerlink" title="线程 sleep"></a>线程 sleep</h2><ul><li>使当前正在执行的线程暂停（挂起）指定的毫秒数。但受系统计时器和调度程序的精度和准确性限制。</li><li>线程不会失去任何monitor（监视器）的所有权。</li><li>每个线程的休眠互不影响，<code>Thread.sleep</code> 只会导致当前线程进入指定时间的休眠。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis, <span class="type">int</span> nanos)</span></span><br><span class="line"><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                            <span class="string">&quot;nanosecond timeout value out of range&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &gt; <span class="number">0</span> &amp;&amp; millis &lt; Long.MAX_VALUE) &#123;</span><br><span class="line">        millis++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sleep(millis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过测试发现 <code>Thread.sleep</code> 之间互不影响。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每个线程的休眠互不影响，`Thread.sleep` 只会导致当前线程进入指定时间的休眠。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSleepTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread demo start &quot;</span>+i);</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;thread main start &quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread main end &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thread main start </span><br><span class="line">thread demo start 0</span><br><span class="line">thread demo start 1</span><br><span class="line">thread main end </span><br><span class="line">thread demo start 2</span><br><span class="line">thread demo start 3</span><br></pre></td></tr></table></figure><p>除此之外可以使用 <code>java.util.concurrent.TimeUnit</code> 类来更简单的实现指定时间的休眠，后续源码使用该类来进行休眠线程。例子代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.concurrent.battle.abasic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TimeUnit工具类替代Thread.sleep方法。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> r0ad</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSleepTimeUnitTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;thread main start &quot;</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">        TimeUnit.MINUTES.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread main end &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java.util.concurrent.TimeUnit#sleep 源码，底层实现也是Thread.sleep。</span></span><br><span class="line"><span class="comment"> * Performs a &#123;<span class="doctag">@link</span> Thread#sleep(long, int) Thread.sleep&#125; using</span></span><br><span class="line"><span class="comment"> * this time unit.</span></span><br><span class="line"><span class="comment"> * This is a convenience method that converts time arguments into the</span></span><br><span class="line"><span class="comment"> * form required by the &#123;<span class="doctag">@code</span> Thread.sleep&#125; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeout the minimum time to sleep. If less than</span></span><br><span class="line"><span class="comment"> * or equal to zero, do not sleep at all.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException if interrupted while sleeping</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ms</span> <span class="operator">=</span> toMillis(timeout);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ns</span> <span class="operator">=</span> excessNanos(timeout, ms);</span><br><span class="line">        Thread.sleep(ms, ns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程-yield"><a href="#线程-yield" class="headerlink" title="线程 yield"></a>线程 yield</h2><p><code>Thread.yield()</code>是一个提示，用于告诉调度程序当前线程愿意放弃使用处理器。调度程序可以选择忽略这个提示。Yield是一种试图改善线程之间相对进程的启发式方法，否则它们会过度利用CPU。它的使用应该与详细的分析和基准测试结合起来，以确保它确实产生了预期的效果。</p><p>这种方法适用场景很少。它有助于调试或测试，以帮助重现由于竞态条件而引起的错误。在设计并发控制结构时，例如<code>java.util.concurrent.locks</code>包中的结构，它也可能有用。</p><p>调用<code>Thread.yield()</code>函数会将当前线程从RUNNING状态切换到RUNNABLE状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">yield</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>测试代码如下，在cpu资源不紧张的情况下输出仍然是乱序的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.concurrent.battle.abasic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ThreadYield测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> r0ad</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadYieldTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;thread main start &quot;</span>);</span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">2</span>).mapToObj(ThreadYieldTest::create).forEach(Thread::start);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread main end &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread <span class="title function_">create</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> )&#123;</span><br><span class="line">                Thread.yield();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread &quot;</span> + i + <span class="string">&quot; start &quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">thread main start </span><br><span class="line">thread main end </span><br><span class="line">thread 0 start </span><br><span class="line">thread 1 start </span><br></pre></td></tr></table></figure><p><code>Thread.yield()</code> 和 <code>Thread.sleep()</code> 方法之间的联系和差异如下：</p><p>联系：</p><ul><li>Thread.yield() 和 Thread.sleep() 都会使当前线程暂停执行，让出CPU资源给其他线程。</li><li>Thread.yield() 和 Thread.sleep() 都不会释放当前线程所占用的锁。</li></ul><p>差异：</p><ul><li>Thread.yield() 方法只是暂停当前线程的执行，让出CPU资源给其他线程，但不会进入阻塞状态。可能导致CPU进行上下文切换。</li><li>Thread.sleep() 方法会使当前线程暂停指定的时间，并进入阻塞状态，直到休眠时间结束或者被其他线程打断。</li><li>Thread.sleep()具有较高的可靠性，可以确保至少暂停指定的时间。Thread.yield()则不能保证暂停。</li></ul><h2 id="设置线程的优先级"><a href="#设置线程的优先级" class="headerlink" title="设置线程的优先级"></a>设置线程的优先级</h2><ul><li><code>java.lang.Thread#setPriority</code> 修改线程的优先级</li><li><code>java.lang.Thread#getPriority</code> 获取线程的优先级</li></ul><p><code>java.lang.Thread#setPriority</code> 修改线程的优先级实现过程如下：</p><ul><li>调用此线程的<code>checkAccess</code>方法，不带任何参数。这可能会导致抛出一个<code>SecurityException</code>异常。</li><li>线程的优先级被设置为指定的<code>newPriority</code>和线程所属线程组允许的最大优先级中较小的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * `java.lang.Thread#setPriority` 修改线程的优先级源码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setPriority</span><span class="params">(<span class="type">int</span> newPriority)</span> &#123;</span><br><span class="line">    ThreadGroup g;</span><br><span class="line">    <span class="comment">// 调用此线程的`checkAccess`方法，不带任何参数。这可能会导致抛出一个`SecurityException`异常。</span></span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((g = getThreadGroup()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 线程的优先级被设置为指定的`newPriority`和线程所属线程组允许的最大优先级中较小的值。</span></span><br><span class="line">        <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">            newPriority = g.getMaxPriority();</span><br><span class="line">        &#125;</span><br><span class="line">        setPriority0(priority = newPriority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * `java.lang.Thread#getPriority` 获取线程的优先级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 返回Thread的priority属性</span></span><br><span class="line">    <span class="keyword">return</span> priority;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 原生优先级设置方法 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">setPriority0</span><span class="params">(<span class="type">int</span> newPriority)</span>;</span><br></pre></td></tr></table></figure><p>进程有进程的优先级，线程同样也有优先级，理论上是优先级比较高的线程会获取优先被 CPU 调度的机会，但是事实上设置线程的优先级同样也是一个 hint 操作，具体如下。</p><ul><li>对于 root 用户，它会 hint 操作系统你想要设置的优先级别，否则它会被忽略。</li><li>如果 CPU 比较忙，设置优先级可能会获得更多的 CPU 时间片，但是闲时优先级的高低几乎不会有任何作用。</li></ul><p>所以不要使用线程的优先级进行某些特定业务的绑定，业务执行的顺序应该还是要使用同步执行方法来保证。</p><p>测试例子如下，线程之间会交替输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.concurrent.battle.abasic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ThreadPriorityTest测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> r0ad</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPriorityTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> ThreadPriorityTest.create(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.setPriority(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> ThreadPriorityTest.create(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t2.setPriority(<span class="number">10</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread <span class="title function_">create</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread &quot;</span> + name );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取线程ID"><a href="#获取线程ID" class="headerlink" title="获取线程ID"></a>获取线程ID</h2><p>返回此线程的标识符。线程ID是一个正的<code>long</code>数字，在创建此线程时生成。线程ID是唯一的，并在其生命周期内保持不变。当一个线程终止时，该线程ID可能会被重新使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取当前线程"><a href="#获取当前线程" class="headerlink" title="获取当前线程"></a>获取当前线程</h2><p><code>java.lang.Thread#currentThread</code> 方法被大多数框架使用，像是SpringMVC、MyBatis这些。调用该函数会返回当前正在执行的线程对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IntrinsicCandidate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> Thread <span class="title function_">currentThread</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.concurrent.battle.abasic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ThreadCurrentTest测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> r0ad</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadCurrentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="built_in">this</span> == Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置线程上下文类加载器"><a href="#设置线程上下文类加载器" class="headerlink" title="设置线程上下文类加载器"></a>设置线程上下文类加载器</h2><ul><li><code>java.lang.Thread#getContextClassLoader</code> 返回该线程的上下文ClassLoader。上下文ClassLoader由创建线程的对象提供，用于在此线程中运行的代码在加载类和资源时使用。如果未设置（通过<code>setContextClassLoader()</code>方法），则默认为父线程的ClassLoader上下文。原始线程的上下文ClassLoader通常设置为用于加载应用程序的类加载器。</li><li><code>java.lang.Thread#setContextClassLoader</code> 设置此线程的上下文ClassLoader。上下文ClassLoader可以在创建线程时设置，并允许线程的创建者通过<code>getContextClassLoader</code>方法为在线程中运行的代码提供适当的类加载器，用于加载类和资源。如果存在安全管理器，则会使用其<code>checkPermission</code>方法，传入<code>RuntimePermission</code>的<code>setContextClassLoader</code>权限，以检查是否允许设置上下文ClassLoader。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> ClassLoader <span class="title function_">getContextClassLoader</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (contextClassLoader == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;removal&quot;)</span></span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">        ClassLoader.checkClassLoaderPermission(contextClassLoader,</span><br><span class="line">                                               Reflection.getCallerClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> contextClassLoader;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContextClassLoader</span><span class="params">(ClassLoader cl)</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;removal&quot;)</span></span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">        sm.checkPermission(<span class="keyword">new</span> <span class="title class_">RuntimePermission</span>(<span class="string">&quot;setContextClassLoader&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    contextClassLoader = cl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程-interrupt"><a href="#线程-interrupt" class="headerlink" title="线程 interrupt"></a>线程 interrupt</h2><ul><li><code>java.lang.Thread#interrupt</code></li></ul><p>中断此线程。除非当前线程自己中断自己，这是始终允许的，否则会调用该线程的<code>checkAccess</code>方法，可能会引发<code>SecurityException</code>异常。</p><p>如果此线程在<code>Object</code>类的<code>wait()</code>、<code>wait(long)</code>、<code>wait(long, int)</code>方法的调用中被阻塞，或者在此类的<code>join()</code>、<code>join(long)</code>、<code>join(long, int)</code>、<code>sleep(long)</code>或<code>sleep(long, int)</code>方法的调用中被阻塞，则它的中断状态将被清除，并且它将收到一个<code>InterruptedException</code>异常。<br>如果此线程在对<code>InterruptibleChannel</code>的I/O操作中被阻塞，则通道将被关闭，线程的中断状态将被设置，并且线程将收到一个<code>ClosedByInterruptException</code>异常。</p><p>如果此线程在<code>Selector</code>中被阻塞，则线程的中断状态将被设置，并且它将立即从选择操作中返回，可能带有非零值，就像调用了选择器的<code>wakeup</code>方法一样。</p><p>如果以上条件都不满足，则将设置此线程的中断状态。</p><p>中断一个未启动的线程可能不会产生任何效果。在JDK参考实现中，中断一个未启动的线程仍然记录了中断请求的发出，并通过<code>interrupted</code>和<code>isInterrupted()</code>方法报告它。</p><ul><li><code>java.lang.Thread#interrupted</code></li></ul><p>测试当前线程是否已被中断。此方法将清除线程的”中断状态”。换句话说，如果连续两次调用此方法，第二次调用将返回false（除非在第一次调用清除了线程的中断状态之后，而第二次调用在检查之前再次中断了当前线程）。</p><ul><li><code>java.lang.Thread#isInterrupted</code></li></ul><p>测试此线程是否已被中断。此方法不会影响线程的”中断状态”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interrupt</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> != Thread.currentThread()) &#123;</span><br><span class="line">        checkAccess();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// thread may be blocked in an I/O operation</span></span><br><span class="line">        <span class="keyword">synchronized</span> (blockerLock) &#123;</span><br><span class="line">            <span class="type">Interruptible</span> <span class="variable">b</span> <span class="operator">=</span> blocker;</span><br><span class="line">            <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">                interrupted = <span class="literal">true</span>;</span><br><span class="line">                interrupt0();  <span class="comment">// inform VM of interrupt</span></span><br><span class="line">                b.interrupt(<span class="built_in">this</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    interrupted = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// inform VM of interrupt</span></span><br><span class="line">    interrupt0();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">interrupted</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> currentThread();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> t.interrupted;</span><br><span class="line">    <span class="comment">// We may have been interrupted the moment after we read the field,</span></span><br><span class="line">    <span class="comment">// so only clear the field if we saw that it was set and will return</span></span><br><span class="line">    <span class="comment">// true; otherwise we could lose an interrupt.</span></span><br><span class="line">    <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">        t.interrupted = <span class="literal">false</span>;</span><br><span class="line">        clearInterruptEvent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> interrupted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInterrupted</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> interrupted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.concurrent.battle.abasic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ThreadInterruptTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> r0ad</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadInterruptTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">// 中断该线程</span></span><br><span class="line">        t1.interrupt();</span><br><span class="line">        System.out.println(<span class="string">&quot;t1 interrupt status &quot;</span> + t1.isInterrupted());</span><br><span class="line">        System.out.println(<span class="string">&quot;t1 is interrupted and I can work still. &quot;</span>);</span><br><span class="line">        <span class="comment">// 修改中断状态，但是线程不会继续执行</span></span><br><span class="line">        t1.isInterrupted();</span><br><span class="line">        System.out.println(<span class="string">&quot;t1 interrupt status &quot;</span> + t1.isInterrupted());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程-join"><a href="#线程-join" class="headerlink" title="线程 join"></a>线程 join</h2><p>Thread 的 join 方法同样是一个非常重要的方法，与 sleep 一样它也是一个可中断的方法。Thread类通过重载实现了三个函数供多线程开发使用。</p><ul><li><code>java.lang.Thread#join(long)</code></li></ul><p>等待最多<code>millis</code>毫秒，让此线程死亡。<code>0</code>的超时时间意味着永久等待。此实现使用了一个基于<code>this.isAlive</code>条件的<code>this.wait</code>调用循环。当线程终止时，将调用this.notifyAll方法。建议应用程序不要在Thread实例上使用wait、notify或notifyAll。</p><ul><li><code>java.lang.Thread#join(long, int)</code></li></ul><p>等待最多 millis 毫秒加上 nanos 纳秒以使此线程死亡。如果两个参数都是 0，那么意味着永远等待。此实现使用一个循环的 this.wait 调用，条件为 this.isAlive。当一个线程终止时，会调用 this.notifyAll 方法。建议应用程序不要在 Thread 实例上使用 wait、notify 或 notifyAll。</p><ul><li><code>java.lang.Thread#join()</code></li></ul><p>等待此线程终止。调用此方法的行为与调用 join(0) 完全相同。</p><p>源码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> millis)</span></span><br><span class="line"><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (millis &gt; <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> millis;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                wait(delay);</span><br><span class="line">            &#125; <span class="keyword">while</span> (isAlive() &amp;&amp; (delay = millis -</span><br><span class="line">                    TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime)) &gt; <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="type">long</span> millis, <span class="type">int</span> nanos)</span></span><br><span class="line"><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                            <span class="string">&quot;nanosecond timeout value out of range&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &gt; <span class="number">0</span> &amp;&amp; millis &lt; Long.MAX_VALUE) &#123;</span><br><span class="line">        millis++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    join(millis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    join(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用join函数之后主线程和子线程的状态切换如下：</p><ul><li>当调用join()方法时，主线程会进入等待状态，直到子线程执行完毕后才会继续执行。此时主线程的状态为WAITING。</li><li>如果调用带参数的join()方法，主线程会在等待一段时间后继续执行，而不必一直阻塞。在这种情况下，主线程的状态为TIMED_WAITING。</li><li>如果子线程已经执行完毕，但是主线程还没有调用join()方法，则子线程的状态为TERMINATED，而主线程的状态为RUNNABLE。</li><li>如果主线程调用join()方法等待子线程完成执行，而子线程抛出了异常，则主线程会收到异常信息并抛出InterruptedException异常。</li></ul><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.concurrent.battle.abasic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ThreadJoinTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> r0ad</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadJoinTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        List&lt;Thread&gt; threadList = IntStream.range(<span class="number">1</span>, <span class="number">10</span>).mapToObj(ThreadJoinTest::create).toList();</span><br><span class="line">        threadList.forEach(Thread::start);</span><br><span class="line">        <span class="keyword">for</span>(Thread thread : threadList)&#123;</span><br><span class="line">            thread.join();</span><br><span class="line">        &#125;</span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">10</span>).forEach((i)-&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; # &quot;</span>+ i );</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程创建函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread <span class="title function_">create</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i++&lt;<span class="number">10</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; # &quot;</span>+ i );</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过观察输出结果发现，join之后的线程全部结束后才会执行输出main线程的内容。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">thread Thread-0 <span class="comment"># 10</span></span><br><span class="line">thread Thread-1 <span class="comment"># 10</span></span><br><span class="line">thread Thread-7 <span class="comment"># 10</span></span><br><span class="line">thread Thread-6 <span class="comment"># 10</span></span><br><span class="line">thread main <span class="comment"># 1</span></span><br><span class="line">thread main <span class="comment"># 2</span></span><br><span class="line">thread main <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="关闭线程"><a href="#关闭线程" class="headerlink" title="关闭线程"></a>关闭线程</h2><p>在JDK 17中，线程停止的情况和函数有以下几种：</p><ol><li>自然结束：线程执行完run()方法后，线程会自然结束并进入终止状态。</li><li>线程被中断：可以使用Thread类的interrupt()方法来中断线程。当一个线程调用另一个线程的interrupt()方法时，被调用线程会收到一个中断信号，并且中断状态会被设置为true。中断状态可以通过Thread类的isInterrupted()方法来查询。线程可以在适当的时机检查中断状态，如果中断状态为true，则可以选择安全地终止线程的执行。</li><li>使用标志位停止线程：可以在多线程程序中定义一个标志位，当标志位为true时，线程停止执行。线程可以周期性地检查该标志位，如果标志位为true，则主动结束线程的执行。</li><li>使用Thread类的stop()方法（已废弃）：Thread类提供了一个stop()方法，可以立即停止线程的执行。但是这个方法已经被标记为不安全和不推荐使用，因为它可能导致线程在不可预料的位置停止，造成数据不一致或其他问题。</li></ol><h2 id="tips-native函数"><a href="#tips-native函数" class="headerlink" title="tips native函数"></a>tips native函数</h2><p>Java中的native关键字用于表示某个方法的实现是由本地代码（C、C++等）提供的。这些本地方法可以直接在Java程序中调用，而无需了解其底层实现。</p><p>在Java中，使用native关键字定义本地方法时，不需要提供方法体。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">myNativeMethod</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>在上面的示例中，myNativeMethod()被定义为本地方法，并且没有提供方法体。在运行时，Java虚拟机将查找本地方法的实现，如果找不到，则会抛出UnsatisfiedLinkError异常。</p><p>要调用本地方法，需要使用native方法的外部实现。这通常涉及到将Java代码与本地代码库进行链接。可以使用Java本机接口（JNI）来实现这一点。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Java高并发编程详解：多线程与架构设计》</li><li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Thread.html">Java Thread Doc</a></li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
    <summary type="html">在JDK17中，Thread类提供了一组常用的API，用于管理线程的创建、启动、暂停、恢复和销毁等操作。本文从api、源码、编程示例等方面详细说明Thread常用函数的使用和注意事项。</summary>
    
    
    
    <category term="高并发编程" scheme="https://r0ad.github.io/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>如何简洁高效地搭建一个SpringCloud2023的maven工程</title>
    <link href="https://r0ad.github.io/SpringCloud%E5%AE%9E%E6%88%98/03-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E4%B9%8B%E7%88%B6%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
    <id>https://r0ad.github.io/SpringCloud%E5%AE%9E%E6%88%98/03-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E4%B9%8B%E7%88%B6%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/</id>
    <published>2024-03-05T16:00:00.000Z</published>
    <updated>2024-03-07T03:00:14.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>依赖管理有gradle和maven，在这里选择比较常用和方便的Maven作为工程项目和依赖管理工具来搭建SpringCloud实战工程。主要用到的maven管理方式是多模块和bom依赖管理。</p><h2 id="什么是maven的多模块依赖管理"><a href="#什么是maven的多模块依赖管理" class="headerlink" title="什么是maven的多模块依赖管理"></a>什么是maven的多模块依赖管理</h2><p>Maven 多模块项目相对于单模块项目而言，依赖是不共享的，但父模块提供了全局共享依赖的功能，可以针对不同模块所需要依赖的包进行分模块引入。具体如下：</p><ul><li>所有子模块都依赖的包，如<code>junit</code>可以统一由父模块中的<code>&lt;dependencies&gt;</code>设置依赖。</li><li>多个子模块但非全部子模块依赖的包，可以在父模块中的<code>&lt;dependencyManagement&gt;</code>中统一管理依赖版本，再由每个子模块自主引入依赖，这样设置可以达到项目中多个子模块依赖的包版本统一的目的。</li><li>单个子模块依赖的包，可以直接交由这个子模块引入即可。但有时候出于对后续可能添加子模块考虑，即使当前只有一个子模块依赖的包，也可以统一交由父模块的<code>&lt;dependencyManagement&gt;</code>统一管理，而如果确认后续不会再加子模块的，可以按前者进行处理。</li></ul><p>在父模块中，可通过<code>&lt;properties&gt;</code>统一管理依赖包的版本，让共享包也更加统一管理。</p><h2 id="什么是maven的bom依赖管理"><a href="#什么是maven的bom依赖管理" class="headerlink" title="什么是maven的bom依赖管理"></a>什么是maven的bom依赖管理</h2><p>Maven 的 BOM（Bill of Materials）依赖管理是一种用于集中管理项目依赖关系和版本的方式，它提供了一种方便的方法来确保多个项目或模块在使用相同依赖时具有一致的版本。</p><p>BOM 通常是一个特殊的 Maven POM（Project Object Model）文件，其中定义了项目所需的依赖项及其版本。通过在其他项目中引用这个 BOM，这些项目将自动获取 BOM 中定义的依赖版本，而无需明确指定每个依赖的版本。</p><p>这样做的好处是可以减少重复的依赖配置工作，并确保在多个项目中使用相同的依赖版本，从而减少由于依赖不一致导致的问题。此外，BOM 还可以用于管理依赖的升级和版本控制，只需在 BOM 中更新依赖的版本，所有引用该 BOM 的项目都会自动获取最新的版本。</p><p>要使用 Maven 的 BOM 依赖管理，通常需要执行以下步骤：</p><ul><li>创建或获取一个 BOM POM 文件，其中定义了项目的依赖和版本信息。</li><li>在需要使用 BOM 的项目中，通过在<code>&lt;dependencyManagement&gt;</code>部分引用 BOM POM 文件。</li><li>在项目的具体依赖部分，可以直接使用 BOM 中定义的依赖，而无需明确指定版本。</li></ul><h2 id="组件选型"><a href="#组件选型" class="headerlink" title="组件选型"></a>组件选型</h2><p>在“SpringCloud2023最新版本该如何进行组件选型？”一文中已经具体的介绍了SpringCloud的组件对比和选型，具体可以查看合集里面的相关文档。</p><ul><li>注册中心（Spring Cloud Zookeeper）：负责服务的注册和发现。</li><li>网关（Spring Cloud Gateway）：作为外部请求的入口，实现路由和负载均衡。</li><li>云服务配置（Spring Cloud Config）：用于管理服务的配置信息。</li><li>熔断（Sentinel）：提供熔断器功能，实现服务的限流和降级。</li><li>服务追踪（Micrometer Tracing）：用于追踪和监控服务的性能和调用情况。</li><li>测试集成（JUnit 5 + Spring Boot Test）：用于编写和执行单元测试。</li><li>远程调用（OpenFeign）：用于服务之间的远程调用。</li><li>接口文档（springdoc-openapi + openapi3）：用于生成和管理 API 的文档。</li><li>分布式事务（Seata）：用于处理跨多个服务的事务。</li></ul><h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>在“SpringCloud和SpringBoot的版本依赖该怎么选择”一文中已经具体的介绍了SpringCloud的版本如何选择，具体可以查看合集里面的相关文档。</p><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>jdk</td><td>17</td></tr><tr><td>spring boot</td><td>3.2.x</td></tr><tr><td>spring cloud</td><td>2023.0.x</td></tr><tr><td>spring cloud alibaba</td><td>2022.0.0.0（还未更新，但是兼容2023）</td></tr></tbody></table><h2 id="为什么选择JDK17"><a href="#为什么选择JDK17" class="headerlink" title="为什么选择JDK17"></a>为什么选择JDK17</h2><p>选择JDK17的原因如下：</p><ul><li>JDK 17是 LTS（长期支持版）。</li><li>JDK 17性能提升不少。</li><li>大多数第三方框架和库都已经支持，不会有什么大坑。</li><li>JDK 17有更多的新特性支持。</li></ul><h2 id="Maven工程依赖说明"><a href="#Maven工程依赖说明" class="headerlink" title="Maven工程依赖说明"></a>Maven工程依赖说明</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|-- banana-client1</span><br><span class="line">|-- banana-client2</span><br><span class="line">|-- banana-client3</span><br><span class="line">|-- banana-client4-sentinel</span><br><span class="line">|-- banana-client5-tracing</span><br><span class="line">|-- banana-client6-test</span><br><span class="line">|-- banana-common</span><br><span class="line">|   |-- banana-common-bom</span><br><span class="line">|   `-- banana-common-core</span><br><span class="line">|-- banana-config</span><br><span class="line">|-- banana-gateway</span><br><span class="line">|-- banana-gateway-sso</span><br><span class="line">`-- banana-seata-example</span><br></pre></td></tr></table></figure><ul><li>根目录下的pom.xml负责管理整个项目的版本和依赖引入版本管理，以及子模块的管理。</li><li><code>banana-common-bom</code> 负责管理整个公共依赖的版本，比如undertow、swagger的版本。</li><li><code>banana-common-core</code> 负责管理整个公共组件的引入，比如 hutool、validation、test等。</li><li><code>gateway</code> 相关项目为SCG相关工程。</li><li><code>client</code> 相关项目为springboot相关工程。</li><li>其他工程会在后续的文章说明。欢迎持续关注。</li></ul><h2 id="顶级工程pom-xml配置"><a href="#顶级工程pom-xml配置" class="headerlink" title="顶级工程pom.xml配置"></a>顶级工程pom.xml配置</h2><p>该maven的pom文件定义了如下内容：</p><ul><li>Maven 项目的模块列表</li><li>Maven 项目的属性列表</li><li>Maven 项目的依赖管理</li><li>Maven 项目的仓库列表</li><li>Maven 项目的构建配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Maven 项目的根节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Maven 项目的groupId，在 Maven 仓库中，groupId 必须是唯一的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.rainforest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Maven 项目的 artifactId，可以包含多个模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Maven 项目的版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Maven 项目的打包方式，这里是 pom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Maven 项目的模块列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-gateway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-config<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-client1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-client2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-client3<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-client4-sentinel<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-client5-tracing<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-client6-test<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-seata-example<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>banana-gateway-sso<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Maven 项目的属性列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Maven 编译器的 source 版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Maven 编译器的 target 版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目构建的源编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot 的版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>3.2.3<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud 的版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2023.0.0<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Alibaba 的版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2022.0.0.0<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Maven 项目的依赖管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Maven 项目的依赖列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- banana 公共版本定义 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.rainforest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>banana-common-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Boot 依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Cloud 依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Cloud Alibaba 依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Maven 项目的仓库列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Maven 中央仓库的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Maven 项目的构建配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Maven 项目构建的最终名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Maven 项目的资源配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 资源文件所在的目录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 对资源文件进行过滤 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Maven 项目的插件管理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Maven 项目的插件列表 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Spring Boot Maven 插件的配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 项目构建的最终名称 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.build.finalName&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 启用 Spring Boot 的分层 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">layers</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">layers</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Maven 插件的执行配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- Maven 插件的执行目标 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="工程的公用依赖bom配置"><a href="#工程的公用依赖bom配置" class="headerlink" title="工程的公用依赖bom配置"></a>工程的公用依赖bom配置</h2><p>该maven的pom文件定义了如下内容：</p><ul><li>Maven 项目的属性列表，包含版本等信息</li><li>Maven 项目使用到的依赖版本管理</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.rainforest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>banana-common-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>banana-common-bom 公共依赖管理<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">banana.common.version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">banana.common.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j2.version</span>&gt;</span>2.17.1<span class="tag">&lt;/<span class="name">log4j2.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">git.commit.plugin</span>&gt;</span>4.9.9<span class="tag">&lt;/<span class="name">git.commit.plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.checkstyle.plugin</span>&gt;</span>0.0.39<span class="tag">&lt;/<span class="name">spring.checkstyle.plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springdoc.version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">springdoc.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swagger.core.version</span>&gt;</span>2.2.14<span class="tag">&lt;/<span class="name">swagger.core.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.5.3.2<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dynamic-ds.version</span>&gt;</span>4.1.3<span class="tag">&lt;/<span class="name">dynamic-ds.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">seata.version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">seata.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excel.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">excel.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">asm.version</span>&gt;</span>7.1<span class="tag">&lt;/<span class="name">asm.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sms.version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">sms.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jaxb.version</span>&gt;</span>2.3.5<span class="tag">&lt;/<span class="name">jaxb.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shardingsphere.version</span>&gt;</span>5.4.0<span class="tag">&lt;/<span class="name">shardingsphere.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hutool.version</span>&gt;</span>5.8.21<span class="tag">&lt;/<span class="name">hutool.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mica.version</span>&gt;</span>3.0.8<span class="tag">&lt;/<span class="name">mica.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sentinel.version</span>&gt;</span>1.8.4<span class="tag">&lt;/<span class="name">sentinel.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义全局jar版本,模块使用需要再次引入但不用写版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.rainforest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>banana-common-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;banana.common.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--springdoc --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webflux-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springdoc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springdoc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger.core.v3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations-jakarta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--fastjson 版本--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 多数据源依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dynamic-ds.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  阿里云短信下发 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springboot.sms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sms-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sms.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  seata kryo 序列化--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-serializer-kryo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--orm 相关--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-annotation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--hutool bom 工具类--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mica bom 工具类--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.dreamlu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mica-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mica.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--web 模块--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--排除tomcat依赖--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--打包jar 与git commit 关联插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.git-commit-id<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>git-commit-id-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;git.commit.plugin&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--代码格式插件，默认使用spring 规则--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.javaformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-javaformat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.checkstyle.plugin&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="源码信息"><a href="#源码信息" class="headerlink" title="源码信息"></a>源码信息</h2><p>和“SpringCloud实战”对应的源码信息如下：</p><ul><li>github <a href="https://github.com/r0ad/spring-cloud-example">https://github.com/r0ad/spring-cloud-example</a></li><li>gitee <a href="https://gitee.com/r0ad/spring-cloud-example">https://gitee.com/r0ad/spring-cloud-example</a></li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
    <summary type="html">依赖管理有gradle和maven，在这里选择比较常用和方便的Maven作为工程项目和依赖管理工具来搭建SpringCloud实战工程。主要用到的maven管理方式是多模块和bom依赖管理。</summary>
    
    
    
    <category term="SpringCloud实战" scheme="https://r0ad.github.io/categories/SpringCloud%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud2023最新版本该如何进行组件选型？</title>
    <link href="https://r0ad.github.io/SpringCloud%E5%AE%9E%E6%88%98/02-SpringCloud2022%E7%BB%84%E4%BB%B6%E9%80%89%E5%9E%8B/"/>
    <id>https://r0ad.github.io/SpringCloud%E5%AE%9E%E6%88%98/02-SpringCloud2022%E7%BB%84%E4%BB%B6%E9%80%89%E5%9E%8B/</id>
    <published>2024-03-04T16:00:00.000Z</published>
    <updated>2024-03-05T06:26:46.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Developing distributed systems can be challenging. Complexity is moved from the application layer to the network layer and demands greater interaction between services. Making your code ‘cloud-native’ means dealing with 12-factor issues such as external configuration, statelessness, logging, and connecting to backing services. The Spring Cloud suite of projects contains many of the services you need to make your applications run in the cloud.</p></blockquote><p>开发分布式系统具有挑战性。复杂性从应用程序层转移到网络层，并要求各个服务之间更密切的交互。将代码设计为“云原生”意味着要处理12要素（12-factor）的问题，例如外部配置、无状态性、日志记录以及与后端服务的连接。Spring Cloud项目套件中包含了许多服务，可以使应用程序在云环境中运行。</p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="/static/images/cloud-3.svg" alt="Spring Cloud architecture highlights"></p><ol><li>多端适配，物联网、手机、电脑设备通过网关访问服务。</li><li>网关使用配置中心获取配置，通过服务注册中心发现调用微服务。</li><li>服务运行时进行分布式追踪。</li></ol><h2 id="组件选型"><a href="#组件选型" class="headerlink" title="组件选型"></a>组件选型</h2><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>通过服务发现组件可以监控服务的部署和存活情况，并实现基于服务编码的负载均衡进行远程调用。以下是一些常见的服务发现工具：</p><ul><li>Netflix Eureka：已停止维护，不再推荐使用。</li><li>HashiCorp Consul：提供了强大的服务发现和配置管理功能。</li><li>Zookeeper：在从 Eureka 切换过来时成本较低，并且功能相对简单。推荐</li><li>Nacos：功能完善，提供了用户界面（UI），易于管理和监控。推荐</li></ul><h3 id="接口网关"><a href="#接口网关" class="headerlink" title="接口网关"></a>接口网关</h3><p>好的，以下是为你补充完善的内容：</p><p>多端调用和微服务部署可能会导致系统变得复杂。通过 API 网关调用多个服务可以减少系统的复杂程度。API 网关能够提供安全拦截处理、路由信息传递、隐藏服务、负载均衡等功能。</p><p>在选择 API 网关时，有几个常用的框架可供选择：</p><ul><li>Spring Cloud Gateway：这是一个基于 Spring Cloud 生态系统的 API 网关，它提供了丰富的功能，如路由、过滤器、负载均衡等。Spring Cloud Gateway 具有良好的扩展性和灵活性。推荐</li><li>Zuul：这是一个早期的 API 网关框架，由 Netflix 开发。然而，需要注意的是，Zuul 已经停止维护，不再推荐使用。</li></ul><p>除了 Spring Cloud Gateway 和 Zuul 之外，还有其他一些 API 网关框架，如 Kong、Tyk、APISIX 等。</p><h3 id="云服务配置"><a href="#云服务配置" class="headerlink" title="云服务配置"></a>云服务配置</h3><p>在微服务中，配置嵌入到应用侧有很多限制。例如不能实时更新、更新配置需要重启、版本维护没有、多环境支持。配置中心主要解决的就是这些问题。</p><ul><li>Spring cloud config，分布式部署、支持注册中心、版本控制等。推荐。</li><li>Nacos，提供UI可视化界面。也支持分布式部署、支持注册中心、版本控制等。推荐。</li></ul><h3 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h3><p>当分布式系统中出现服务不可靠的情况时，熔断器可以帮助解决这个问题。熔断器可以采用限流、降级、重试等机制来处理服务不可靠的情况。</p><ul><li>Resilience4J：这是一个轻量级的熔断器框架，它提供了限流、降级和重试等功能。Resilience4J 易于使用和配置。推荐</li><li>Sentinel：这是一个强大的熔断器和限流框架，它支持多种限流策略，并提供了丰富的监控和指标功能。推荐</li><li>Hystrix：这是一个经典的熔断器框架，由 Netflix 开发。Hystrix 提供了断路器、降级和缓存等功能。</li></ul><h3 id="服务追踪"><a href="#服务追踪" class="headerlink" title="服务追踪"></a>服务追踪</h3><p>调试分布式应用确实是一项复杂且耗时的任务。当问题出现时，可能会涉及到多个独立的微服务。Sleuth 提供了一系列服务调用追踪的集成方案，使得服务追踪更加可预测和可重复。</p><p>需要注意的是，Sleuth 已经停止对 Spring Boot 3 的支持，而后续的替代者是 Micrometer Tracing。Micrometer Tracing 提供了类似的接口和功能。</p><ul><li>Micrometer Tracing：作为 Sleuth 的后继者，Micrometer Tracing 提供了更强大和灵活的追踪功能。推荐</li><li>Zipkin：这是一个开源的分布式追踪系统，它可以收集和可视化服务之间的调用关系。</li><li>Skywalking：这是一个功能丰富的分布式追踪和监控系统，它提供了全面的监控和分析功能。推荐</li></ul><h3 id="测试集成"><a href="#测试集成" class="headerlink" title="测试集成"></a>测试集成</h3><p>想要拥有可靠、值得信赖和稳定的 API，就得需要单元测试。合同式测试是高效团队常用的一种技术，它通过将 API 的内容形式化并构建相关测试，来帮助确保代码或者 API 是正常运行功能正常的。需要注意的是，Spring Cloud Contract 已经停止维护了。在选择测试框架时，推荐使用 JUnit 5（Spring Boot Test）。JUnit 5 是一个广泛使用的单元测试框架，与 Spring Boot 集成良好，可以方便地进行测试编写和执行。</p><ul><li>Spring Cloud Contract 停止维护了</li><li>Junit5（Spring boot test）可以编写针对 API 的测试用例，验证 API 的响应结果是否符合预期。通过模拟请求和响应，可以对 API 进行全面的测试，包括参数验证、响应状态码、数据返回等。 推荐</li></ul><h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><p>在微服务架构中，存在许多独立的单体服务，服务之间的调用频率增加，依赖关系也变得更加复杂。为了解决这些问题，我们需要一个通用的框架来处理服务之间的调用，并解决负载均衡、安全机制、服务降级等一系列问题。</p><p>OpenFeign 是一个非常流行和强大的框架，用于在微服务之间进行调用。它提供了简洁而易于使用的 API，使开发者能够方便地调用其他服务。OpenFeign 支持负载均衡、熔断器、重试机制等功能，以提高系统的可靠性和容错性。</p><p>使用 OpenFeign，你可以通过注解或配置来定义服务接口和调用方式，然后框架将自动处理服务的发现、调用和异常处理。它还支持动态路由和参数传递，可以轻松实现服务之间的通信。<br>OpenFeign 与其他微服务框架（如 Spring Cloud）集成良好，可以与注册中心（如 Eureka）配合使用，实现服务的自动注册和发现。</p><ul><li>OpenFeign，推荐</li></ul><h3 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h3><p>通过统一的接口文档管理，可以减少接口模拟、接口测试、接口文档输出等相关工作。</p><ul><li>springdoc-openapi，推荐，支持springboot3生态，支持openapi3</li><li>springfox(前身swagger-springmvc) ，不推荐，缺少openapi3的支持</li></ul><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>分布式事务是指在分布式系统中，跨多个节点或多个数据库的操作需要保持一致性和原子性的一种机制。在传统的单节点事务中，事务在一个数据库上执行，而在分布式事务中，事务可能涉及多个数据库或多个服务之间的操作。</p><p>分布式事务面临的挑战主要是协调和保持数据的一致性。由于涉及多个节点或多个数据库，事务的执行会面临以下问题：</p><ul><li>ACID属性的保持：分布式事务需要满足ACID（原子性、一致性、隔离性、持久性）属性，即要么所有操作都成功，要么都失败。这需要确保在不同节点或数据库上的操作都能同步进行，并且在出现故障时能够回滚。</li><li>并发控制：由于分布式事务可能涉及多个并发执行的操作，需要对并发访问进行控制，以避免数据的不一致性。常见的并发控制方法包括锁机制、多版本并发控制（MVCC）等。</li><li>故障处理：在分布式环境下，各个节点或数据库可能出现故障或网络通信中断，这可能导致事务的中断或数据不一致。因此，需要有效的故障处理机制，如故障恢复、重试机制等。</li></ul><p>为了解决这些问题，有多种分布式事务协调协议被提出，包括两阶段提交（2PC）、三阶段提交（3PC）、Paxos、Raft等。这些协议通过协调参与者节点的行为，保证了分布式事务的一致性和原子性。此外，还有一些分布式事务的替代方案，如基于消息队列的最终一致性、补偿事务等。这些方案在一定程度上降低了分布式事务的复杂性和性能开销，但也带来了一些其他的约束和问题。</p><p>分布式事务是在分布式系统中保持一致性和原子性的重要机制，需要采用合适的协调协议和方案来解决数据的一致性和并发控制的问题。</p><ul><li>Seata，推荐，是由阿里中间件团队发起的开源项目 Fescar，后更名为Seata，它是一个是开源的分布式事务框架。以高效并且对业务0侵入的方式解决微服 务场景下面临的分布式事务问题，它目前提供AT模式(即2PC)及TCC模式的分布式事务解决方案。</li></ul><h2 id="组件确定"><a href="#组件确定" class="headerlink" title="组件确定"></a>组件确定</h2><p>通过SpringCloudAlibaba、SpringCloud的组件推荐选型，SpringCloud2023最终组件选型如下：</p><ul><li>注册中心（Spring Cloud Zookeeper）：负责服务的注册和发现。</li><li>网关（Spring Cloud Gateway）：作为外部请求的入口，实现路由和负载均衡。</li><li>云服务配置（Spring Cloud Config）：用于管理服务的配置信息。</li><li>熔断（Sentinel）：提供熔断器功能，实现服务的限流和降级。</li><li>服务追踪（Micrometer Tracing）：用于追踪和监控服务的性能和调用情况。</li><li>测试集成（JUnit 5 + Spring Boot Test）：用于编写和执行单元测试。</li><li>远程调用（OpenFeign）：用于服务之间的远程调用。</li><li>接口文档（springdoc-openapi + openapi3）：用于生成和管理 API 的文档。</li><li>分布式事务（Seata）：用于处理跨多个服务的事务。</li></ul><p>这些组件通过相互协作，构建了一个完整的微服务架构，实现了服务的注册、发现、配置管理、熔断器、服务追踪、测试集成、远程调用和接口文档生成等功能。每个组件在整个架构中扮演着不同的角色，共同确保了微服务系统的可靠性、可扩展性和高可用性。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
    <summary type="html">开发分布式系统具有挑战性。复杂性从应用程序层转移到网络层，并要求各个服务之间更密切的交互。Spring Cloud项目套件中包含了许多服务，可以使应用程序在云环境中运行。</summary>
    
    
    
    <category term="SpringCloud实战" scheme="https://r0ad.github.io/categories/SpringCloud%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>接口幂等该如何设计和实现</title>
    <link href="https://r0ad.github.io/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
    <id>https://r0ad.github.io/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-02-27T16:00:00.000Z</published>
    <updated>2024-02-28T05:51:53.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在程序开发的过程中是否遇到如下的问题：</p><ul><li>同一件商品手速很快多点击了几次，在后台生成了两笔订单。</li><li>同一笔订单点了由于网络卡顿，点了两次支付，结果发现重复支付了。</li><li>微服务架构下应用间通过RPC调用失败，进入重试机制，导致一个请求提交多次。</li><li>黑客利用充值抓包到的数据，进行多次调用充值、评论、访问，造成数据的异常。</li></ul><p>这些问题均可以通过接口幂等性设计来解决。幂等性意味着同一个请求无论被重复执行多少次，都能产生相同的结果，不会导致重复的操作或不一致的数据状态。</p><p>在现代分布式系统中，接口的幂等性设计和实现至关重要。本文将深入探讨接口幂等的重要性、实现方法以及可能面临的挑战，并提供测试接口幂等性的有效策略。</p><h2 id="什么是接口幂等性"><a href="#什么是接口幂等性" class="headerlink" title="什么是接口幂等性"></a>什么是接口幂等性</h2><p>接口幂等性指的是一个接口或操作在相同的请求参数下，无论被执行多少次，其结果都是一致的且不会产生副作用。换句话说，如果一个请求已经成功执行，再次执行相同的请求应该不会对系统状态产生任何额外的影响。例如，一个获取用户信息的接口就是幂等的，因为多次获取同一个用户的信息不会改变系统的状态。</p><p>相反，非幂等接口可能会导致重复的操作和潜在的问题。以支付操作为例，如果没有实现幂等性，重复支付可能会给用户和商家带来不必要的麻烦和损失。</p><h2 id="为什么需要接口幂等性"><a href="#为什么需要接口幂等性" class="headerlink" title="为什么需要接口幂等性"></a>为什么需要接口幂等性</h2><ol><li><strong>防止重复操作</strong>：幂等性可以确保系统不会因为重复的请求而产生重复的操作，从而避免数据错误和不一致。</li><li><strong>提高系统可靠性</strong>：在网络不稳定或其他异常情况下，重复的请求是很常见的。幂等性可以帮助系统处理这些重复请求，而不会导致系统出错或不稳定。</li><li><strong>增强用户体验</strong>：用户不需要担心因为不小心重复操作而导致的问题，从而提高了用户的使用体验和满意度。</li><li><strong>简化错误处理</strong>：由于幂等接口可以安全地处理重复请求，因此在处理错误和恢复时更加容易，减少了复杂的错误恢复逻辑。</li></ol><h2 id="如何设计接口幂等性"><a href="#如何设计接口幂等性" class="headerlink" title="如何设计接口幂等性"></a>如何设计接口幂等性</h2><ol><li><strong>使用唯一标识</strong>：为每个请求分配一个唯一的标识，例如请求 ID 或流水号。通过在请求中传递这个唯一标识，系统可以判断是否已经处理过该请求。</li><li><strong>设计幂等的操作</strong>：确保操作本身是幂等的。例如，更新数据时可以采用”更新或插入”的策略，而不是直接修改已有记录。</li><li><strong>使用事务</strong>：在涉及多个数据库操作的情况下，使用事务来确保整个操作的原子性和幂等性。</li><li><strong>利用缓存</strong>：将请求的结果缓存起来，当接收到相同的请求时，直接返回缓存中的结果，避免重复执行操作。</li></ol><h2 id="如何实现接口幂等性"><a href="#如何实现接口幂等性" class="headerlink" title="如何实现接口幂等性"></a>如何实现接口幂等性</h2><p>以下实现方式是基于demo完成，用于说明幂等性的设计和实现。</p><ul><li><strong>唯一标识</strong>：可以通过生成全局唯一的 ID（如 UUID）来标识每个请求。在请求的参数中包含这个 ID，服务器在处理请求时可以根据 ID 来判断是否已经处理过该请求。</li></ul><p>服务端生成 requestId 之后将 requestId 放到redis中，当然需要给 ID 设置一个失效时间，超时的 ID 也会被删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestIdGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateRequestId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Stirng</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        putCacheIfAbsent(uuid);</span><br><span class="line">        <span class="keyword">return</span> uuid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接口中，将生成的请求 ID 与请求参数一起传递给服务器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成请求 ID</span></span><br><span class="line"><span class="type">String</span> <span class="variable">requestId</span> <span class="operator">=</span> RequestIdGenerator.generateRequestId();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建请求参数</span></span><br><span class="line">Map&lt;String, String&gt; requestParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">requestParams.put(<span class="string">&quot;requestId&quot;</span>, requestId);</span><br><span class="line">requestParams.put(<span class="string">&quot;otherParam&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">httpClient.sendRequest(requestParams);</span><br></pre></td></tr></table></figure><p>服务器在接收到请求后，可以根据请求 requestId 来判断是否已经处理过该请求，并进行相应的处理。</p><p>当后端接收到订单提交的请求的时候，会先判断requestId在缓存中是否存在，第一次请求的时候，requestId一定存在，也会正常返回结果，但是第二次携带同一个requestId的时候被拒绝了。</p><ul><li><strong>幂等的操作</strong>：以订单状态更新为例，如果订单已经处于最终状态（如已支付或已发货），再次更新订单状态不会改变其实际状态，因此是幂等的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateOrderStatus</span><span class="params">(String orderId, OrderStatus status)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据 orderId 获取订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderIdToOrderMapper <span class="title function_">orderIdToOrder</span><span class="params">(orderId)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断订单是否处于最终状态</span></span><br><span class="line">        <span class="keyword">if</span> (order.isFinalStatus()) &#123;</span><br><span class="line">            <span class="comment">// 订单已处于最终状态，不需要进行实际的更新操作</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新订单状态</span></span><br><span class="line">        order.setStatus(status);</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>事务</strong>：在数据库操作中，可以使用事务来保证操作的原子性和幂等性。如果某个操作失败，事务可以回滚到之前的状态，避免不一致的数据。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performTransactionalOperation</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> transactionManager.beginTransaction();</span><br><span class="line">    transaction.setIsolationLevel(IsolationLevel.READ_COMMITTED);</span><br><span class="line">    transaction.setPropagationBehavior(Propagation.REQUIRED);</span><br><span class="line">    <span class="comment">// 数据库操作 1</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// 数据库操作 2</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    transactionManager.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启事务是一种悲观锁实现的方式，一开始更新数据就把数据加锁了，具有强烈的独占和排他特性。</p><ul><li><strong>缓存</strong>：通过将请求的结果缓存起来，可以避免重复执行相同的操作。当接收到相同的请求时，直接从缓存中获取结果返回。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getCachedResult</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 从缓存中获取结果</span></span><br><span class="line">        <span class="keyword">if</span> (cache.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行实际的操作并获取结果</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> performExpensiveOperation(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将结果缓存起来</span></span><br><span class="line">        cache.put(key, result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用幂等性接口带来了什么结果"><a href="#使用幂等性接口带来了什么结果" class="headerlink" title="使用幂等性接口带来了什么结果"></a>使用幂等性接口带来了什么结果</h2><ul><li><strong>并发请求处理</strong>：在高并发环境下，可能会同时接收到多个相同的请求。为了处理这种情况，可以使用分布式锁或其他并发控制机制来确保只有一个请求执行实际的操作。目前的分布式锁一般基于zookeeper或者redis实现。</li><li><strong>失败请求的处理</strong>：如果请求在执行过程中失败，需要确保幂等性仍然得到维护。可以通过记录请求的状态或使用重试机制来处理失败的请求。</li><li><strong>与现有系统的集成</strong>：在将幂等性引入现有系统时，可能需要对现有系统进行一些修改和适配。这可能涉及到与其他组件或服务的协调和集成。</li><li><strong>测试的复杂性</strong>：由于幂等性的测试需要模拟重复请求和各种边界情况，测试的复杂性可能会增加。需要设计全面的测试用例来覆盖各种可能的情况。</li></ul><h2 id="怎么验证接口是否具有幂等性"><a href="#怎么验证接口是否具有幂等性" class="headerlink" title="怎么验证接口是否具有幂等性"></a>怎么验证接口是否具有幂等性</h2><ul><li><strong>模拟重复请求</strong>：使用测试工具或手动模拟发送相同的请求多次，检查结果是否一致。</li><li><strong>验证数据一致性</strong>：检查相关的数据是否在重复请求后保持一致，没有出现重复操作或数据不一致的情况。</li><li><strong>压力测试</strong>：在高并发情况下测试接口的幂等性，确保在大量请求同时到达时系统仍然能正确处理。</li><li><strong>异常情况测试</strong>：模拟各种异常情况，如网络中断、服务器故障等，检查接口在这些情况下是否仍然保持幂等性。</li></ul><h2 id="幂等性接口的总结"><a href="#幂等性接口的总结" class="headerlink" title="幂等性接口的总结"></a>幂等性接口的总结</h2><p>实现接口的幂等性对于构建可靠和高效的系统至关重要。通过使用唯一标识、幂等操作、事务和缓存等技术，可以有效地设计和实现幂等接口。</p><p>同时，要注意处理可能面临的挑战，并通过全面的测试来确保接口的正确性和稳定性。在实际项目中，积极应用这些方法将有助于提高系统的可靠性、安全性和用户体验。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>前任开发在代码里下毒了，支付下单居然没加幂等 <a href="https://juejin.cn/post/7324186292297482290">https://juejin.cn/post/7324186292297482290</a></li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
    <summary type="html">接口幂等性指的是一个接口或操作在相同的请求参数下，无论被执行多少次，其结果都是一致的且不会产生副作用。换句话说，如果一个请求已经成功执行，再次执行相同的请求应该不会对系统状态产生任何额外的影响。例如，一个获取用户信息的接口就是幂等的，因为多次获取同一个用户的信息不会改变系统的状态。</summary>
    
    
    
    <category term="软件设计" scheme="https://r0ad.github.io/categories/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud和SpringBoot的版本依赖该怎么选择</title>
    <link href="https://r0ad.github.io/SpringCloud%E5%AE%9E%E6%88%98/01-SpringCloud2022%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9/"/>
    <id>https://r0ad.github.io/SpringCloud%E5%AE%9E%E6%88%98/01-SpringCloud2022%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9/</id>
    <published>2024-02-26T16:00:00.000Z</published>
    <updated>2024-02-27T07:21:51.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Cloud是一个基于Spring Boot的微服务框架，用于构建和管理分布式系统的各个组件。它提供了一套完整的解决方案，包括服务注册与发现、配置管理、负载均衡、熔断器、消息总线、数据流等功能。</p><p>SpringCloud2023为当前Spring Cloud的最新版本迭代，基于Spring6和Springboot3以后的版本研发。因此开发选择SpringCloud的版本也就对应的选择了Springboot和Spring的版本。</p><h2 id="版本依赖关系"><a href="#版本依赖关系" class="headerlink" title="版本依赖关系"></a>版本依赖关系</h2><table><thead><tr><th>SpringCoud版本选择</th><th>Springboot版本选择</th></tr></thead><tbody><tr><td>2023.0.x aka Leyton</td><td>3.2.x</td></tr><tr><td>2022.0.x aka Kilburn</td><td>3.0.x, 3.1.x (Starting with 2022.0.3)</td></tr><tr><td>2021.0.x aka Jubilee</td><td>2.6.x, 2.7.x (Starting with 2021.0.3)</td></tr><tr><td>2020.0.x aka Ilford</td><td>2.4.x, 2.5.x (Starting with 2020.0.3)</td></tr><tr><td>Hoxton</td><td>2.2.x, 2.3.x (Starting with SR5)</td></tr><tr><td>Greenwich</td><td>2.1.x</td></tr><tr><td>Finchley</td><td>2.0.x</td></tr><tr><td>Edgware</td><td>1.5.x</td></tr><tr><td>Dalston</td><td>1.5.x</td></tr></tbody></table><p>其中 Spring Cloud Dalston, Edgware, Finchley, 和 Greenwich 已经EOF，结束支持了。</p><p>最新版本是2023（cloud L系列），除了springboot版本要求3.2以外，其它的生态软件还暂未迭代到对应的版本，比如cloud alibaba还是2022的版本。但是出于Spring boot的良好兼容性，通过版本的修改验证还是可以直接使用。原理是一致的。</p><h2 id="引入BOM"><a href="#引入BOM" class="headerlink" title="引入BOM"></a>引入BOM</h2><p>SpringCloud2022实战基于Spring Cloud K系列版本。</p><p>在根工程管理pom.xml或者gradle.setting中使用bom管理依赖。</p><p>maven的引入方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2022.0.1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>gradle的引入方式：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">  id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;3.0.5&#x27;</span></span><br><span class="line">  id <span class="string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="string">&#x27;1.1.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">  set(<span class="string">&#x27;springCloudVersion&#x27;</span>, <span class="string">&quot;2022.0.1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">  imports &#123;</span><br><span class="line">    mavenBom <span class="string">&quot;org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在启动工程中就可以使用各种cloud的starter来引入云服务特性了。下面以Netflix的引入为例说明。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.cloud:spring-cloud-starter-config&#x27;</span></span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#x27;</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
    <summary type="html">Spring Cloud是一个基于Spring Boot的微服务框架，用于构建和管理分布式系统的各个组件。它提供了一套完整的解决方案，包括服务注册与发现、配置管理、负载均衡、熔断器等。</summary>
    
    
    
    <category term="SpringCloud实战" scheme="https://r0ad.github.io/categories/SpringCloud%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Linux直接安装的Nginx版本升级方法</title>
    <link href="https://r0ad.github.io/%E8%BF%90%E7%BB%B4/%E5%9F%BA%E4%BA%8ELinux%E7%9B%B4%E6%8E%A5%E5%AE%89%E8%A3%85%E7%9A%84Nginx%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <id>https://r0ad.github.io/%E8%BF%90%E7%BB%B4/%E5%9F%BA%E4%BA%8ELinux%E7%9B%B4%E6%8E%A5%E5%AE%89%E8%A3%85%E7%9A%84Nginx%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</id>
    <published>2024-02-22T16:00:00.000Z</published>
    <updated>2024-02-25T04:00:54.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>随着版本的迭代和漏洞的发现，Nginx作为一款软件避免不了打补丁的命运。</p><p>以下基于Linux直接安装的Nginx版本升级。</p><p>以下操作均在本地虚拟机中操作验证，请验证后再线上操作。基于centos7测试。</p><h2 id="前置资源"><a href="#前置资源" class="headerlink" title="前置资源"></a>前置资源</h2><ul><li>获取nginx的最新源码版本网址： <a href="http://freenginx.org/">http://freenginx.org/</a></li><li>查看nginx的版本命令： <code>nginx -V</code></li></ul><h2 id="基于源码安装Nginx"><a href="#基于源码安装Nginx" class="headerlink" title="基于源码安装Nginx"></a>基于源码安装Nginx</h2><h3 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h3><p>nginx基于c语言编写的，所以安装之前需要安装编译环境。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 安装编译环境和依赖包</span></span><br><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br><span class="line"><span class="comment">## 验证编译环境是否安装成功</span></span><br><span class="line">gcc --version</span><br><span class="line"></span><br><span class="line">gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)</span><br><span class="line">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure><h3 id="逆向编译命令"><a href="#逆向编译命令" class="headerlink" title="逆向编译命令"></a>逆向编译命令</h3><p>nginx编译通过 <code>./configure</code> 命令加指定参数来完成，对应的参数决定了应用程序的安装位置、日志文件位置、依赖库使用情况等。</p><p>所以在安装之前需要知道如下信息：</p><ul><li>使用到的依赖库</li><li>程序安装位置</li><li>启用的模块</li></ul><p>以上信息可以通过<code>nginx -V</code>来获取。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 进入nginx的安装目录</span></span><br><span class="line">nginx -V</span><br><span class="line"><span class="comment">## 可以看到对应的配置参数信息</span></span><br><span class="line">nginx version: nginx/1.24.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --with-http_ssl_module --with-stream --with-http_stub_status_module</span><br></pre></td></tr></table></figure><h3 id="安装新版本nginx"><a href="#安装新版本nginx" class="headerlink" title="安装新版本nginx"></a>安装新版本nginx</h3><ul><li>到正式网站下载源码：</li></ul><p><strong>推荐Free版本</strong> <a href="http://freenginx.org/en/download.html">http://freenginx.org/en/download.html</a><br>或者F5版本 <a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a> </p><p>freenginx 是nginx被F5收购出来的一个独立分支，由原来的nginx的核心人员维护，就像mariadb和mysql的关系。</p><ul><li>上传源码到指定服务器，开始安装。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压源码</span></span><br><span class="line">tar -xf nginx-1.25.4.tar.gz</span><br><span class="line">cd nginx-1.25.4</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 根据逆向得到的参数进行编译</span></span></span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-stream --with-http_stub_status_module</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#  如果缺少对应依赖库，可以通过如下命令安装</span></span></span><br><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 也可以到对应库的正式网站下载安装，通过命令指定安装位置，比如</span></span></span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-stream --with-http_stub_status_module --with-pcre=/root/install_app/pcre2-10.43</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装</span></span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看安装后的版本</span></span></span><br><span class="line">/usr/local/nginx/sbin/nginx -V</span><br><span class="line"></span><br><span class="line">nginx version: nginx/1.25.4</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --with-http_ssl_module --with-stream --with-http_stub_status_module --with-pcre=/root/install_app/pcre2-10.43</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上是通过覆盖的方式升级nginx，注意提前做好备份，避免数据丢失。</p><h2 id="基于安装包安装Nginx"><a href="#基于安装包安装Nginx" class="headerlink" title="基于安装包安装Nginx"></a>基于安装包安装Nginx</h2><p>nginx在linux上做了很多分发包，包括debian、centos、ubuntu等。通过nginx官方的安装包升级nginx，可以避免编译过程的麻烦。</p><p>确认nginx是通过安装包安装的，可以通过安装路径查看。一般nginx的安装路径为分开的，包括任意路径可以执行<code>nginx -V</code>。</p><p>centos通过<code>rpm -qa nginx</code>查找nginx的安装包是否存在。</p><p>升级过程如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 安装nginx的仓库源，访问 http://nginx.org/packages/centos/7/noarch/RPMS/ 下载 nginx-release-centos-7-0.el7.ngx.noarch.rpm  </span></span><br><span class="line">wget http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line"><span class="comment">## 安装nginx源</span></span><br><span class="line">rpm -ivh nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line"><span class="comment">## 查看nginx安装包列表</span></span><br><span class="line">yum --showduplicates list nginx</span><br><span class="line"><span class="comment">## 安装最新版本的nginx</span></span><br><span class="line">yum install nginx.x86_64</span><br><span class="line"><span class="comment">## 验证版本</span></span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>以上就是nginx 1.21.5升级到1.25.4的过程。不同镜像版本可能升级过程不一致。</p><p><strong>请在虚拟机中操作验证，请勿直接线上生产主机操作。</strong></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
    <summary type="html">随着版本的迭代和漏洞的发现，Nginx作为一款软件避免不了打补丁的命运。以下基于Linux直接安装的Nginx版本升级过程，相较于镜像安装来说明的。以下操作均在本地虚拟机中操作验证，请验证后再线上操作。基于centos7测试。</summary>
    
    
    
    <category term="运维" scheme="https://r0ad.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>前端通过增加XHR钩子来全局增加header</title>
    <link href="https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF%E9%80%9A%E8%BF%87%E5%A2%9E%E5%8A%A0XHR%E9%92%A9%E5%AD%90%E6%9D%A5%E5%85%A8%E5%B1%80%E5%A2%9E%E5%8A%A0header/"/>
    <id>https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF%E9%80%9A%E8%BF%87%E5%A2%9E%E5%8A%A0XHR%E9%92%A9%E5%AD%90%E6%9D%A5%E5%85%A8%E5%B1%80%E5%A2%9E%E5%8A%A0header/</id>
    <published>2023-12-26T16:00:00.000Z</published>
    <updated>2023-12-27T06:07:32.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前端通过修改 XHR 原型来全局增加 header 是采用 XMLHttpRequest 加 hook 方式实现一个简单业务场景。这样可以提高代码的可维护性和可扩展性，减少重复代码的编写。</p><p>比如，在用户登录后，后端返回了一个 token，前端需要在发送的每个请求中都携带这个 token 以进行认证。通过修改 XHR 原型来全局增加 header，可以实现全局性的认证信息添加，无需在每个请求中手动设置 header。</p><p>模拟接口请求 mock 参数的时候也需要全局拦截 xhr 请求，这个时候就需要 hook 对应的 send、open 函数了。</p><h2 id="hook钩子函数"><a href="#hook钩子函数" class="headerlink" title="hook钩子函数"></a>hook钩子函数</h2><p>在JavaScript中，”hook”（钩子）是一种编程模式，它允许开发者在特定的代码执行点插入自定义的逻辑。钩子函数是用于在这些执行点执行自定义逻辑的函数。</p><p>钩子函数通常被设计成可拦截或修改某个操作的执行流程。它们允许开发者在关键步骤中插入自定义的代码，以满足特定的需求，例如添加额外的验证、修改数据、记录日志等。</p><p>在JavaScript中，钩子函数可以通过以下两种方式实现：</p><p>使用原生提供的钩子函数：有些JavaScript库或框架提供了一些特定的钩子函数，供开发者在特定的时机插入自己的代码。例如，在Vue.js中，可以使用created钩子函数在实例被创建后执行自定义逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 自定义逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>自定义钩子函数：开发者可以根据需要在自己的代码中定义钩子函数。这些钩子函数可以是普通的函数，在代码的特定位置被调用。例如，在一个JavaScript类中，可以定义一个钩子方法，用于执行一些特定的逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在方法执行之前执行的钩子函数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">myMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">beforeMethod</span>(); <span class="comment">// 在方法执行之前调用钩子函数</span></span><br><span class="line">    <span class="comment">// 方法的实际逻辑</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">afterMethod</span>(); <span class="comment">// 在方法执行之后调用钩子函数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在方法执行之后执行的钩子函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">instance.<span class="title function_">myMethod</span>(); <span class="comment">// 执行方法，同时触发钩子函数</span></span><br></pre></td></tr></table></figure><p>通过使用钩子函数，开发者可以在适当的时机执行自定义的逻辑，以满足特定的需求。这种模式提供了更大的灵活性和可扩展性，并允许代码的修改不影响原有的执行流程。</p><h2 id="编程例子"><a href="#编程例子" class="headerlink" title="编程例子"></a>编程例子</h2><p>通过hook方式实现修改XMLHttpRequest的send或者open函数来全局增加header。</p><p>方式一，采用闭包修改钩子函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">open, send</span>) &#123;</span><br><span class="line">  <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    open.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口请求前增加自定义业务逻辑处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;diyHeader&quot;</span>, <span class="string">&quot;diyHeader666666666&quot;</span>);</span><br><span class="line">    send.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span>, <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span>);</span><br></pre></td></tr></table></figure><p>方式二，通过hook自定义函数修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookXhr</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> origin = func;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// arguments 是一个对应于传递给函数的参数的类数组对象。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;diyHeader&quot;</span>, <span class="string">&quot;diyHeader666666666&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> origin.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span> = <span class="title function_">hookXhr</span>(<span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span>);</span><br><span class="line"><span class="comment">// XMLHttpRequest.prototype.open = hookXhr(XMLHttpRequest.prototype.open);</span></span><br></pre></td></tr></table></figure><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>编程语言中，比如 Java，是支持将方法声明为私有的，即它们只能被同一个类中的其他方法所调用。</p><p>而 JavaScript 没有这种原生支持，但我们可以使用闭包来模拟私有方法。私有方法不仅仅有利于限制对代码的访问：还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。</p><p>下面的示例展现了如何使用闭包来定义公共函数，并令其可以访问私有函数和变量。这个方式也称为模块模式（module pattern）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> makeCounter = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeBy</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter1</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter2</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 2 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">decrement</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 1 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter2</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br></pre></td></tr></table></figure><p>请注意两个计数器 Counter1 和 Counter2 是如何维护它们各自的独立性的。每个闭包都是引用自己词法作用域内的变量 privateCounter 。</p><p>每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境。然而在一个闭包内对变量的修改，不会影响到另外一个闭包中的变量。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader">mdn xhr setRequestHeader</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures">mdn 闭包</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;前端通过修改 XHR 原型来全局增加 header 是采用 XMLHttpRequest 加 hook 方式实现一个简单业务场景。这样可以提</summary>
      
    
    
    
    <category term="编程技巧" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Java高并发编程基础之Thread构造函数大有内涵</title>
    <link href="https://r0ad.github.io/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/03-Thread%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://r0ad.github.io/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/03-Thread%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2023-12-26T16:00:00.000Z</published>
    <updated>2024-02-21T11:30:39.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在Java中，Thread类提供了许多丰富的构造函数，以便于创建和管理线程。使得可以根据具体需求来创建和配置线程对象，从而实现更灵活、可扩展的多线程编程。</p><ul><li>Thread类的无参构造函数可以创建一个新的线程对象，然后通过调用start()方法来启动线程的执行。</li><li>Thread类提供了其他一些常用的构造函数。例如，可以使用带有Runnable参数的构造函数来创建一个线程对象，并传入一个实现了Runnable接口的对象，从而指定线程要执行的任务。这种方式更常用，因为它可以使得代码更具可重用性和灵活性。</li><li>Thread类提供了带有线程名称、线程优先级等参数的构造函数，可以通过这些构造函数来设置线程的属性。</li><li>使用带有ThreadGroup参数的构造函数将线程添加到特定的线程组中。线程组可以方便地对一组线程进行管理和控制。</li></ul><h2 id="Thread的构造函数"><a href="#Thread的构造函数" class="headerlink" title="Thread的构造函数"></a>Thread的构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread(Runnable target, <span class="meta">@SuppressWarnings(&quot;removal&quot;)</span> AccessControlContext acc) &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>, acc, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(ThreadGroup group, Runnable target)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(group, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, <span class="literal">null</span>, name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(ThreadGroup group, String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(group, <span class="literal">null</span>, name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target, String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, target, name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(ThreadGroup group, Runnable target, String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(group, target, name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(ThreadGroup group, Runnable target, String name,</span></span><br><span class="line"><span class="params">              <span class="type">long</span> stackSize)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(group, target, name, stackSize, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(ThreadGroup group, Runnable target, String name,</span></span><br><span class="line"><span class="params">              <span class="type">long</span> stackSize, <span class="type">boolean</span> inheritThreadLocals)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(group, target, name, stackSize, <span class="literal">null</span>, inheritThreadLocals);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的命名"><a href="#线程的命名" class="headerlink" title="线程的命名"></a>线程的命名</h2><p>在构造线程的时候可以为线程起一个有特殊意义的名字，这也是比较好的一种做法。尤其在一个线程比较多的程序中，为线程赋予一个包含特殊意义的名字有助于问题的排查和线程的跟踪，强烈推荐在构造线程的时候赋予它一个名字。</p><h3 id="线程的默认命名"><a href="#线程的默认命名" class="headerlink" title="线程的默认命名"></a>线程的默认命名</h3><p>使用Thread有的构造函数没有提供名称的参数，这个时候系统会生成一个默认的线程名称。默认的名称都是 <code>Thread-加上线程编码数字</code> 。以下是比较常用的不带线程名称的构造器函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment"> * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> (null, null, gname)&#125;, where &#123;<span class="doctag">@code</span> gname&#125; is a newly generated</span></span><br><span class="line"><span class="comment"> * name. Automatically generated names are of the form</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> &quot;Thread-&quot;+&#125;&lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is an integer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment"> * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> (null, target, gname)&#125;, where &#123;<span class="doctag">@code</span> gname&#125; is a newly generated</span></span><br><span class="line"><span class="comment"> * name. Automatically generated names are of the form</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> &quot;Thread-&quot;+&#125;&lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is an integer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  target</span></span><br><span class="line"><span class="comment"> *         the object whose &#123;<span class="doctag">@code</span> run&#125; method is invoked when this thread</span></span><br><span class="line"><span class="comment"> *         is started. If &#123;<span class="doctag">@code</span> null&#125;, this classes &#123;<span class="doctag">@code</span> run&#125; method does</span></span><br><span class="line"><span class="comment"> *         nothing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment"> * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> (group, target, gname)&#125; ,where &#123;<span class="doctag">@code</span> gname&#125; is a newly generated</span></span><br><span class="line"><span class="comment"> * name. Automatically generated names are of the form</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> &quot;Thread-&quot;+&#125;&lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is an integer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  group</span></span><br><span class="line"><span class="comment"> *         the thread group. If &#123;<span class="doctag">@code</span> null&#125; and there is a security</span></span><br><span class="line"><span class="comment"> *         manager, the group is determined by &#123;<span class="doctag">@linkplain</span></span></span><br><span class="line"><span class="comment"> *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()&#125;.</span></span><br><span class="line"><span class="comment"> *         If there is not a security manager or &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> *         SecurityManager.getThreadGroup()&#125; returns &#123;<span class="doctag">@code</span> null&#125;, the group</span></span><br><span class="line"><span class="comment"> *         is set to the current thread&#x27;s thread group.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  target</span></span><br><span class="line"><span class="comment"> *         the object whose &#123;<span class="doctag">@code</span> run&#125; method is invoked when this thread</span></span><br><span class="line"><span class="comment"> *         is started. If &#123;<span class="doctag">@code</span> null&#125;, this thread&#x27;s run method is invoked.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment"> *          if the current thread cannot create a thread in the specified</span></span><br><span class="line"><span class="comment"> *          thread group</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(ThreadGroup group, Runnable target)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(group, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命名线程"><a href="#命名线程" class="headerlink" title="命名线程"></a>命名线程</h3><p>构造函数提供了<code>name</code>作为线程名称的参数用于初始化构造函数，开发过程提供名称更利于问题的排查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment">     * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> (null, null, name)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   name</span></span><br><span class="line"><span class="comment">     *          the name of the new thread</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">null</span>, <span class="literal">null</span>, name, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment">     * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> (group, null, name)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  group</span></span><br><span class="line"><span class="comment">     *         the thread group. If &#123;<span class="doctag">@code</span> null&#125; and there is a security</span></span><br><span class="line"><span class="comment">     *         manager, the group is determined by &#123;<span class="doctag">@linkplain</span></span></span><br><span class="line"><span class="comment">     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()&#125;.</span></span><br><span class="line"><span class="comment">     *         If there is not a security manager or &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     *         SecurityManager.getThreadGroup()&#125; returns &#123;<span class="doctag">@code</span> null&#125;, the group</span></span><br><span class="line"><span class="comment">     *         is set to the current thread&#x27;s thread group.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  name</span></span><br><span class="line"><span class="comment">     *         the name of the new thread</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment">     *          if the current thread cannot create a thread in the specified</span></span><br><span class="line"><span class="comment">     *          thread group</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(ThreadGroup group, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(group, <span class="literal">null</span>, name, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment">     * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> (null, target, name)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  target</span></span><br><span class="line"><span class="comment">     *         the object whose &#123;<span class="doctag">@code</span> run&#125; method is invoked when this thread</span></span><br><span class="line"><span class="comment">     *         is started. If &#123;<span class="doctag">@code</span> null&#125;, this thread&#x27;s run method is invoked.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  name</span></span><br><span class="line"><span class="comment">     *         the name of the new thread</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">null</span>, target, name, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  group</span></span><br><span class="line"><span class="comment">     *         the thread group. If &#123;<span class="doctag">@code</span> null&#125; and there is a security</span></span><br><span class="line"><span class="comment">     *         manager, the group is determined by &#123;<span class="doctag">@linkplain</span></span></span><br><span class="line"><span class="comment">     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()&#125;.</span></span><br><span class="line"><span class="comment">     *         If there is not a security manager or &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     *         SecurityManager.getThreadGroup()&#125; returns &#123;<span class="doctag">@code</span> null&#125;, the group</span></span><br><span class="line"><span class="comment">     *         is set to the current thread&#x27;s thread group.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  target</span></span><br><span class="line"><span class="comment">     *         the object whose &#123;<span class="doctag">@code</span> run&#125; method is invoked when this thread</span></span><br><span class="line"><span class="comment">     *         is started. If &#123;<span class="doctag">@code</span> null&#125;, this thread&#x27;s run method is invoked.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  name</span></span><br><span class="line"><span class="comment">     *         the name of the new thread</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment">     *          if the current thread cannot create a thread in the specified</span></span><br><span class="line"><span class="comment">     *          thread group or cannot override the context class loader methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(ThreadGroup group, Runnable target, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(group, target, name, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="修改线程的名字"><a href="#修改线程的名字" class="headerlink" title="修改线程的名字"></a>修改线程的名字</h3><p>不论使用的是默认的函数命名规则，还是指定了一个特殊的名字，在线程启动之前还有一个机会可以对其进行修改，一旦线程启动，名字将不再被修改，下面是 <code>Thread</code> 的 <code>setName</code> 源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Changes the name of this thread to be equal to the argument &#123;<span class="doctag">@code</span> name&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * First the &#123;<span class="doctag">@code</span> checkAccess&#125; method of this thread is called</span></span><br><span class="line"><span class="comment"> * with no arguments. This may result in throwing a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> SecurityException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      name   the new name for this thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>     SecurityException  if the current thread cannot modify this</span></span><br><span class="line"><span class="comment"> *             thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #getName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #checkAccess()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;name cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) &#123;</span><br><span class="line">        setNativeName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的父子关系"><a href="#线程的父子关系" class="headerlink" title="线程的父子关系"></a>线程的父子关系</h2><p>Thread的所有构造函数，最终都会去调用一个内部方法init（JDK8）或者同一个构造函数<code>java.lang.Thread#Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long, java.security.AccessControlContext, boolean)</code>（JDK17）用于线程的真实创建，通过源码发现新创建的任何一个线程都会有一个父线程。</p><p>以JDK17创建线程的源码为例：</p><ul><li><code>Thread parent = currentThread(); // 调用获取当前线程函数</code></li><li><code>this.daemon = parent.isDaemon();// 通过父线程守护参数设置当前线程守护线程参数</code></li><li><code>this.priority = parent.getPriority();// 通过父线程参数设置当前线程优先级参数</code></li></ul><p>完整源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes a Thread.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> g the Thread group</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target the object whose run() method gets called</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name the name of the new Thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stackSize the desired stack size for the new thread, or</span></span><br><span class="line"><span class="comment">     *        zero to indicate that this parameter is to be ignored.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> acc the AccessControlContext to inherit, or</span></span><br><span class="line"><span class="comment">     *            AccessController.getContext() if null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inheritThreadLocals if &#123;<span class="doctag">@code</span> true&#125;, inherit initial values for</span></span><br><span class="line"><span class="comment">     *            inheritable thread-locals from the constructing thread</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;removal&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Thread</span><span class="params">(ThreadGroup g, Runnable target, String name,</span></span><br><span class="line"><span class="params">                   <span class="type">long</span> stackSize, AccessControlContext acc,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> inheritThreadLocals)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;name cannot be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">parent</span> <span class="operator">=</span> currentThread(); <span class="comment">// 调用获取当前线程函数</span></span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (g == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">/* Determine if it&#x27;s an applet or not */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* If there is a security manager, ask the security manager</span></span><br><span class="line"><span class="comment">               what to do. */</span></span><br><span class="line">            <span class="keyword">if</span> (security != <span class="literal">null</span>) &#123;</span><br><span class="line">                g = security.getThreadGroup();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* If the security manager doesn&#x27;t have a strong opinion</span></span><br><span class="line"><span class="comment">               on the matter, use the parent thread group. */</span></span><br><span class="line">            <span class="keyword">if</span> (g == <span class="literal">null</span>) &#123;</span><br><span class="line">                g = parent.getThreadGroup();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* checkAccess regardless of whether or not threadgroup is</span></span><br><span class="line"><span class="comment">           explicitly passed in. */</span></span><br><span class="line">        g.checkAccess();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Do we have the required permissions?</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (security != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isCCLOverridden(getClass())) &#123;</span><br><span class="line">                security.checkPermission(</span><br><span class="line">                        SecurityConstants.SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g.addUnstarted();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.group = g;</span><br><span class="line">        <span class="built_in">this</span>.daemon = parent.isDaemon();<span class="comment">// 通过父线程守护参数设置当前线程守护线程参数</span></span><br><span class="line">        <span class="built_in">this</span>.priority = parent.getPriority();<span class="comment">// 通过父线程参数设置当前线程优先级参数</span></span><br><span class="line">        <span class="keyword">if</span> (security == <span class="literal">null</span> || isCCLOverridden(parent.getClass()))</span><br><span class="line">            <span class="built_in">this</span>.contextClassLoader = parent.getContextClassLoader();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">this</span>.contextClassLoader = parent.contextClassLoader;</span><br><span class="line">        <span class="built_in">this</span>.inheritedAccessControlContext =</span><br><span class="line">                acc != <span class="literal">null</span> ? acc : AccessController.getContext();</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">        setPriority(priority);</span><br><span class="line">        <span class="keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="literal">null</span>)</span><br><span class="line">            <span class="built_in">this</span>.inheritableThreadLocals =</span><br><span class="line">                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class="line">        <span class="comment">/* Stash the specified stack size in case the VM cares */</span></span><br><span class="line">        <span class="built_in">this</span>.stackSize = stackSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Set thread ID */</span></span><br><span class="line">        <span class="built_in">this</span>.tid = nextThreadID();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>currentThread()</code> 是获取当前线程，在线程生命周期中，线程的最初状态为<code>NEW</code>，没有执行<code>start</code>方法之前，它只能算是一个<code>Thread</code>的实例，并不意味着一个新的线程被创建，因此<code>currentThread</code>代表的将会是创建它的那个线程，可以得出以下结论：</p><ul><li>一个线程的创建肯定是由另一个线程完成的。</li><li>被创建线程的父线程是创建它的线程。</li></ul><p><code>main</code>函数所在的线程是由<code>JVM</code>创建的，也就是<code>main</code>线程，那就意味着前面示例代码中创建的所有线程，其父线程都是 <code>main</code> 线程。</p><h2 id="Thread-与-ThreadGroup"><a href="#Thread-与-ThreadGroup" class="headerlink" title="Thread 与 ThreadGroup"></a>Thread 与 ThreadGroup</h2><p>在初始化线程的构造函数有如下这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">parent</span> <span class="operator">=</span> currentThread(); <span class="comment">// 调用获取当前线程函数</span></span><br><span class="line"><span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line"><span class="keyword">if</span> (g == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">/* Determine if it&#x27;s an applet or not */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If there is a security manager, ask the security manager</span></span><br><span class="line"><span class="comment">        what to do. */</span></span><br><span class="line">    <span class="keyword">if</span> (security != <span class="literal">null</span>) &#123;</span><br><span class="line">        g = security.getThreadGroup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If the security manager doesn&#x27;t have a strong opinion</span></span><br><span class="line"><span class="comment">        on the matter, use the parent thread group. */</span></span><br><span class="line">    <span class="keyword">if</span> (g == <span class="literal">null</span>) &#123;</span><br><span class="line">        g = parent.getThreadGroup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* checkAccess regardless of whether or not threadgroup is</span></span><br><span class="line"><span class="comment">    explicitly passed in. */</span></span><br><span class="line">g.checkAccess();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Do we have the required permissions?</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">if</span> (security != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCCLOverridden(getClass())) &#123;</span><br><span class="line">        security.checkPermission(</span><br><span class="line">                SecurityConstants.SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g.addUnstarted();</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.group = g;</span><br></pre></td></tr></table></figure><p>通过对源码分析，在创建线程时没有显示给出 <code>ThreadGroup g</code>，也就是 <code>g==null</code>这个判断为true，构造函数会隐式的给当前线程实例添加一个默认的<code>ThreadGroup</code>。这个<code>ThreadGroup</code>就是当前运行线程（或者说是父线程）的<code>ThreadGroup</code>。</p><p>通过代码测试如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.concurrent.battle.onebasic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 Thread 与 ThreadGroup</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadGroupTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="type">ThreadGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadGroup</span>(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group,<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        <span class="type">ThreadGroup</span> <span class="variable">mainThreadGroup</span> <span class="operator">=</span> Thread.currentThread().getThreadGroup();</span><br><span class="line">        System.out.println(<span class="string">&quot;Main thread belong group:&quot;</span>+ mainThreadGroup.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;tl and main belong the same group:&quot;</span> + (mainThreadGroup== t1.getThreadGroup()));</span><br><span class="line">        System.out.println(<span class="string">&quot;t2 thread group not belong main group:&quot;</span> + (mainThreadGroup== t2.getThreadGroup()));</span><br><span class="line">        System.out.println(<span class="string">&quot;t2 thread group belong main TestGroup:&quot;</span> + (group == t2.getThreadGroup()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Main thread belong group:main</span><br><span class="line">tl and main belong the same group:true</span><br><span class="line">t2 thread group not belong main group:false</span><br><span class="line">t2 thread group belong main TestGroup:true</span><br></pre></td></tr></table></figure><h2 id="Thread与stack-size"><a href="#Thread与stack-size" class="headerlink" title="Thread与stack size"></a>Thread与stack size</h2><p>在Thread的构造函数中有一个<code>stackSize</code>参数，说明内容为<code>the desired stack size for the new thread, or zero to indicate that this parameter is to be ignored.</code>。翻译过来的意思是<code>stackSize</code>指的是新线程栈的大小，可以传0代表忽略这个参数而使用默认的栈内存大小。栈内存大小这块内容是与JVM配置栈大小相关的。下面基于此分析。</p><p><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Thread.html">https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Thread.html</a> 中提到了<code>stackSize</code>。具体内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">The stack size is the approximate number of bytes of address space that the virtual machine is to allocate for this thread&#x27;s stack. The effect of the stackSize parameter, if any, is highly platform dependent.</span><br><span class="line"></span><br><span class="line">On some platforms, specifying a higher value for the stackSize parameter may allow a thread to achieve greater recursion depth before throwing a StackOverflowError. Similarly, specifying a lower value may allow a greater number of threads to exist concurrently without throwing an OutOfMemoryError (or other internal error). The details of the relationship between the value of the stackSize parameter and the maximum recursion depth and concurrency level are platform-dependent. On some platforms, the value of the stackSize parameter may have no effect whatsoever.</span><br><span class="line"></span><br><span class="line">The virtual machine is free to treat the stackSize parameter as a suggestion. If the specified value is unreasonably low for the platform, the virtual machine may instead use some platform-specific minimum value; if the specified value is unreasonably high, the virtual machine may instead use some platform-specific maximum. Likewise, the virtual machine is free to round the specified value up or down as it sees fit (or to ignore it completely).</span><br><span class="line"></span><br><span class="line">Specifying a value of zero for the stackSize parameter will cause this constructor to behave exactly like the Thread(ThreadGroup, Runnable, String) constructor.</span><br><span class="line"></span><br><span class="line">Due to the platform-dependent nature of the behavior of this constructor, extreme care should be exercised in its use. The thread stack size necessary to perform a given computation will likely vary from one JRE implementation to another. In light of this variation, careful tuning of the stack size parameter may be required, and the tuning may need to be repeated for each JRE implementation on which an application is to run.</span><br><span class="line"></span><br><span class="line">Implementation note: Java platform implementers are encouraged to document their implementation&#x27;s behavior with respect to the stackSize parameter.</span><br><span class="line"></span><br><span class="line">堆栈大小是虚拟机为该线程的堆栈分配的大致字节数。stackSize参数的效果在很大程度上取决于平台。</span><br><span class="line"></span><br><span class="line">在某些平台上，为stackSize参数指定较高的值可能允许线程在引发StackOverflowError之前实现更大的递归深度。同样，指定较低的值可能允许更多的线程并发存在，而不会引发OutOfMemoryError（或其他内部错误）。stackSize参数的值与最大递归深度和并发级别之间的关系细节因平台而异。在某些平台上，stackSize参数的值可能根本不起作用。</span><br><span class="line"></span><br><span class="line">虚拟机可以将stackSize参数视为建议。如果指定的值对于平台来说过低，虚拟机可能会使用一些特定于平台的最小值；如果指定的值过高，虚拟机可能会使用一些特定于平台的最大值。同样地，虚拟机可以自行决定是否将指定的值向上舍入或向下舍入（或完全忽略它）。</span><br><span class="line"></span><br><span class="line">对于stackSize参数设置为0，该构造函数的行为将与Thread(ThreadGroup, Runnable, String)构造函数完全相同。</span><br><span class="line"></span><br><span class="line">由于此构造函数的行为依赖于平台，使用时应极度谨慎。执行给定计算所需的线程堆栈大小可能因JRE实现而异。鉴于这种差异，可能需要对stackSize参数进行仔细调整，并且在应用程序要运行的每个JRE实现上可能需要重复调整。</span><br><span class="line"></span><br><span class="line">实施注意事项：鼓励Java平台实现者记录其实现与stackSize参数相关的行为。</span><br></pre></td></tr></table></figure><p>通过翻译总结有如下几个要点：</p><ul><li>堆栈大小是虚拟机为该线程的堆栈分配的大致字节数。</li><li>stackSize参数的效果在很大程度上取决于平台。</li><li>执行给定计算所需的线程堆栈大小可能因JRE实现而异。</li><li>在应用程序要运行的每个JRE实现上可能需要重复调整。</li></ul><p>一般情况下stackSize参数指定较高的值可能允许线程在引发StackOverflowError之前实现更大的递归深度，指定较低的值可能允许更多的线程并发存在，而不会引发OutOfMemoryError（或其他内部错误）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.concurrent.battle.onebasic;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStackSizeTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStackSize1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 6914</span></span><br><span class="line">        stackSizeRunMethod(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStackSize2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 4009</span></span><br><span class="line">        stackSizeRunMethod(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStackSize3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//6461</span></span><br><span class="line">        stackSizeRunMethod(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStackSize4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//153</span></span><br><span class="line">        stackSizeRunMethod(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">stackSizeRunMethod</span><span class="params">(<span class="type">int</span> stackSize)</span> &#123;</span><br><span class="line">        <span class="type">ThreadGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadGroup</span>(<span class="string">&quot;stackSizeRunMethod&quot;</span>);</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    recurse(i);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error e) &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recurse</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                <span class="keyword">if</span> (i &lt; THREAD_COUNT) &#123;</span><br><span class="line">                    recurse(i + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, runnable, <span class="string">&quot;ThreadStackSizeTest&quot;</span>, stackSize);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试笔者选择的Oracle OpenJDK 17，stackSize与递归深度关系不是很大，有的时候甚至成反比。</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>Java中通过将线程设置为守护线程（daemon thread）来指示该线程为守护线程。守护线程在没有用户线程（也就是剩余线程均为守护线程，JVM会退出）继续运行时会自动终止。这对于执行后台任务或提供服务的线程非常有用，因为它们可以在不再需要时自动关闭。</p><p>要将线程设置为守护线程，可以使用<code>setDaemon(true)</code>方法。这应该在启动线程之前调用。</p><p>守护线程应该谨慎使用，因为它们可能会在程序退出时突然终止，这可能导致一些任务未能完成。</p><p>以下是一个简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.concurrent.battle.onebasic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I am a daemon thread&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 将线程设置为守护线程</span></span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;I am main thread and end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子中main主线程运行结束则守护线程thread线程也结束运行。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Java高并发编程详解：多线程与架构设计》</li><li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Thread.html">Java Thread Doc</a></li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
    <summary type="html">Java中的Thread构造函数大有内涵，通过掌握这些构造函数，也就基本了解了线程的基本概念和线程使用方法以及部分调优知识。</summary>
    
    
    
    <category term="高并发编程基础" scheme="https://r0ad.github.io/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>高并发编程基础线程知识说明</title>
    <link href="https://r0ad.github.io/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/02-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%AF%B4%E6%98%8E/"/>
    <id>https://r0ad.github.io/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/02-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%AF%B4%E6%98%8E/</id>
    <published>2023-12-25T16:00:00.000Z</published>
    <updated>2024-02-04T08:52:10.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>现在几乎所有操作系统都支持多任务执行，其中每个任务被视为一个进程。在每个进程内部，至少有一个线程在运行，线程也被称为轻量级进程。</p><p>线程可以看作是程序执行的一条路径，每个线程都有自己的局部变量表、程序计数器（指向当前正在执行的指令）以及各自的生命周期。现代操作系统通常支持同时运行多个线程。例如，在启动Java虚拟机（JVM）时，操作系统会创建一个新的进程（即JVM进程），并在该进程中生成多个派生或创建的线程。</p><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><pre class="mermaid">flowchart TD    A[新建New] --> B[就绪Runnable]    B --> C[运行Running]    C --> D[阻塞Blocked]    D --> E[就绪Runnable]    E --> F[运行Running]    F --> G[终止Terminated]    D --> H[等待Waiting]    H --> I[唤醒Notify]    I --> E    D --> J[超时等待Timed Waiting]    J --> K[唤醒Notify]    K --> E</pre><p>在JDK17版本的JVM线程的生命周期共7个状态，可以在<code>java.lang.Thread.State</code>枚举类看到，具体如下：</p><ol><li>新建状态（New）：当一个Thread类或其子类的对象被创建时，该线程处于新建状态。此时它尚未启动，即没有开始执行run()方法。</li><li>就绪状态（Runnable）：当线程对象调用了start()方法之后，该线程进入就绪状态。此时该线程已经有了执行资格，只等待CPU的调度，也就是分配时间片。</li><li>运行状态（Running）：当就绪状态的线程获得了CPU时间片，开始执行run()方法时，该线程进入运行状态。</li><li>阻塞状态（Blocked）：在某些情况下，线程可能会暂时失去对CPU的控制权，暂停执行。这时线程进入阻塞状态。例如，线程调用了sleep()方法、I/O操作、等待synchronized锁等都会使线程进入阻塞状态。</li><li>等待状态（Waiting）：当线程执行wait()、join()、park()等方法之后，线程进入等待状态。此时线程不会占用CPU资源，也不会释放持有的锁，需要其他线程的唤醒才能继续执行。</li><li>超时等待状态（Timed Waiting）：与等待状态类似，但是可以设置等待的时间。当线程调用了带有时间参数的sleep()、wait()、join()方法或者LockSupport.parkNanos()、LockSupport.parkUntil()方法时，线程进入超时等待状态。</li><li>终止状态（Terminated）：线程执行完run()方法后，或者出现异常而结束时，线程进入终止状态。此时线程已经彻底结束，不会再回到其他状态。</li></ol><p>这些线程状态在Java中非常重要，理解它们的含义和转换规则有助于我们编写高效、正确的多线程程序。</p><p>线程的生命周期是从新建状态开始，通过调用 start() 方法进入可运行状态，然后可能进入阻塞、等待或者被中断，最后进入终止状态。JVM 管理线程状态的转换，可以通过 Thread 类的状态相关方法来查询当前线程的状态。</p><h3 id="Running状态的转换"><a href="#Running状态的转换" class="headerlink" title="Running状态的转换"></a>Running状态的转换</h3><ul><li>直接进入 TERMINATED 状态，比如用JDK已经不推荐使用的stop法或者判断某个逻辑标识。</li><li>进入 BLOCKED 状态，比如调用了 sleep 或者 wait 方法而加入了 waitSet 中。</li><li>进行某个阻塞的 IO 操作，比如因网络数据的读写而进入了 BLOCKED 状态获取某个锁资源，从而加人到该锁的阻塞队列中而进入了 BLOCKED 状态。</li><li>由于CPU的调度器轮询使该线程放弃执行，进入RUNNABLE 状态。</li><li>线程主动调用 yield 方法，放弃 CPU 执行权，进入 RUNNABLE 状态。</li></ul><h3 id="Blocked状态的转换"><a href="#Blocked状态的转换" class="headerlink" title="Blocked状态的转换"></a>Blocked状态的转换</h3><ul><li>直接进人 TERMINATED 状态，比如调用JDK已经不推荐使用的 stop 方法或者意外死亡(JVM Crash)。</li><li>线程阻塞的操作结束，比如读取了想要的数据字节进入到 RUNNABLE 状态。</li><li>线程完成了指定时间的休眠，进入到了 RUNNABLE 状态。</li><li>Wait 中的线程被其他线程 notify/notifyall 唤醒，进入RUNNABLE状态。</li><li>线程获取到了某个锁资源，进人 RUNNABLE 状态。</li><li>线程在阻塞过程中被打断，比如其他线程调用了 interrupt 方法，进入RUNNABLE状态。</li></ul><h3 id="Terminated状态的形成"><a href="#Terminated状态的形成" class="headerlink" title="Terminated状态的形成"></a>Terminated状态的形成</h3><ul><li>线程运行正常结束，结束生命周期。</li><li>线程运行出错意外结束。</li><li>JVM Crash，导致所有的线程都结束。</li></ul><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>创建线程只有一种方式那就是构造Thread类，而实现线程的执行单元则有两种方式。</p><ul><li>重写Thread的run方法。</li><li>实现 Runnable 接口的run方法，并且将Runnable 实例用作构造Thread 的参数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 定义线程执行的任务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;This is a new thread.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.start(); <span class="comment">// 启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 定义线程执行的任务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;This is a new thread.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable); <span class="comment">// 将实现了 Runnable 接口的对象作为参数传递给 Thread 类的构造方法</span></span><br><span class="line">        thread.start(); <span class="comment">// 启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程中的策略模式"><a href="#线程中的策略模式" class="headerlink" title="线程中的策略模式"></a>线程中的策略模式</h3><p>无论是 Runnable 接口的 run() 方法，还是 Thread 类本身的 run() 方法，都遵循了将线程的控制逻辑与业务逻辑分离的原则，以实现职责分明、功能单一的设计思想。这种设计方式与 GoF（Gang of Four）设计模式中的策略模式有相似之处。</p><p>在策略模式中，将可变的算法封装成独立的策略类，并通过接口或抽象类与调用者进行解耦。调用者可以根据需要选择不同的策略来完成特定的任务。类似地，Java 中的线程创建方式也将线程的执行逻辑封装在一个单独的类（实现 Runnable 接口或继承 Thread 类）中，通过调用 start() 方法来启动线程。</p><p>使用这种设计模式，可以使线程控制逻辑与业务逻辑分离，提高代码的可维护性和可扩展性。例如，可以根据不同的业务需求，定义不同的 Runnable 实现类或 Thread 子类，并在启动线程时选择合适的线程对象，从而实现不同的业务逻辑。</p><p>总结来说，Java 中线程的创建方式与策略设计模式相似，都体现了将控制逻辑与具体业务逻辑分离的设计原则，以实现代码的灵活性和可扩展性。</p><h3 id="线程中的Runnable复用"><a href="#线程中的Runnable复用" class="headerlink" title="线程中的Runnable复用"></a>线程中的Runnable复用</h3><p>重写 Thread 类的 run() 方法和实现 Runnable 接口的 run() 方法有一个关键的不同点。Thread 类的 run() 方法是无法共享的，也就是说，一个线程的 run() 方法不能被另一个线程当作自己的执行单元。相比之下，使用 Runnable 接口可以实现线程执行单元的共享。通过传递同一个实现了 Runnable 接口的对象给多个 Thread 实例，可以使多个线程共享同一个执行单元，从而提高代码的复用性和可维护性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 定义线程执行的任务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;This is a new thread.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">myRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable); </span><br><span class="line">        thread.start(); <span class="comment">// 启动线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable); </span><br><span class="line">        thread2.start(); <span class="comment">// 启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> engineer.concurrent.battle.onebasic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryConcurrent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(TryConcurrent::writeCode).start();</span><br><span class="line">        listenMusic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listenMusic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;music is good&quot;</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;write code and work hard&quot;</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多线程排队模拟"><a href="#多线程排队模拟" class="headerlink" title="多线程排队模拟"></a>多线程排队模拟</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 叫号机排队模拟，通过多线程并发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketWindow</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">index</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TicketWindow</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (index.get() &lt;= MAX) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;柜台正在排队，排队号码为：&quot;</span> + index);</span><br><span class="line">            index.getAndIncrement();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TicketWindow</span>(<span class="string">&quot;一号窗口&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TicketWindow</span>(<span class="string">&quot;二号窗口&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TicketWindow</span>(<span class="string">&quot;三号窗口&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TicketWindow</span>(<span class="string">&quot;四号窗口&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Java高并发编程详解：多线程与架构设计》</li><li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Thread.html">Java Thread Doc</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;现在几乎所有操作系统都支持多任务执行，其中每个任务被视为一个进程。在每个进程内部，至少有一个线程在运行，线程也被称为轻量级进程。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="高并发编程基础" scheme="https://r0ad.github.io/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>高并发编程基础-引言</title>
    <link href="https://r0ad.github.io/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/01-%E5%BC%95%E8%A8%80/"/>
    <id>https://r0ad.github.io/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/01-%E5%BC%95%E8%A8%80/</id>
    <published>2023-12-06T16:00:00.000Z</published>
    <updated>2024-02-01T08:32:45.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5W1H"><a href="#5W1H" class="headerlink" title="5W1H"></a>5W1H</h2><p>这里用“六何”的分析方法概括下即将开始的新主题高并发编程基础系列文章。</p><p>what何事：</p><p>高并发编程指同一时间进行大量任务的处理，同时保持过程稳定和结果一致。Java中使用多线程技术来支撑高并发的场景。“高并发编程基础”指的就是多线程这块技术的内容。</p><p>随着JDK版本的迭代，JDK已经出到23，本文主要基于JDK17版本的源码和api来说明多线程编程技术的使用。一个是因为这个版本稳定兼容性好，第二个是相较于8的版本更加新和优秀。</p><p>why何因：</p><p>Java为多线程提供了基本的工具来支持在多核处理器进行编程的工具类，通过对这款内容的学习可以加深对并发框架的使用原理的了解以及满足日常多线程开发过程的使用。</p><p>where何地：</p><p>“高并发编程基础”会发表在各大技术论坛（掘金、知乎、CSDN等）、公众号和博客（<a href="https://r0ad.github.io/">https://r0ad.github.io/</a>）中。</p><p>when何时:</p><p>预计需要花费一个月时间完成整个基础教程的输出。</p><p>who何人:</p><p>适合希望使用或学习多线程编程或想要自我检查学习成果的人。不足之处可以随时交流指出</p><p>how何法:</p><p>通过源码分析加DEMO实战加图片文字说明的方式输出整个系文档。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p>整个“高并发编程基础”可能的大纲如下，随着后续迭代可能进行增删。</p><ul><li>线程基础知识说明</li><li>Thread构造函数使用说明</li><li>Thread常用API使用说明</li><li>线程安全与数据同步</li><li>并发中的基础概念Monitor</li><li>线程间通信</li><li>AQS的原理和实现</li><li>Java中锁的概念和原理</li><li>对象共享中的可见性问题</li><li>ThreadGroup的使用</li><li>Hook线程以及捕获线程执行异常</li><li>线程池原理以及自定义线程池</li><li>线程上下文通讯</li><li>单例模式与多线程</li><li>Lock的使用</li><li>CAS 原子操作及相关类</li><li>Future 和 FutureTask</li><li>线程池工作原理</li><li>ThreadLocal 底层原理</li><li>等等</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>由于水平限制，“高并发编程基础”参考了很多资料来编写。</p><ul><li>JDK 17 官方文档，用于自查和权威核对 <a href="https://docs.oracle.com/en/java/javase/17/">https://docs.oracle.com/en/java/javase/17/</a></li><li>涉及JDK源码、基础原理介绍的书：《Java高并发编程详解：多线程与架构设计》（基于JDK8）</li><li>涉及Java标准介绍和多线程基础说明的书： 《Java多线程编程核心技术》（基于JDK8）</li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;5W1H&quot;&gt;&lt;a href=&quot;#5W1H&quot; class=&quot;headerlink&quot; title=&quot;5W1H&quot;&gt;&lt;/a&gt;5W1H&lt;/h2&gt;&lt;p&gt;这里用“六何”的分析方法概括下即将开始的新主题高并发编程基础系列文章。&lt;/p&gt;
&lt;p&gt;what何事：&lt;/p&gt;
&lt;p&gt;高并发编</summary>
      
    
    
    
    <category term="高并发编程基础" scheme="https://r0ad.github.io/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>跟着GPT学设计模式之代理模式</title>
    <link href="https://r0ad.github.io/%E8%B7%9F%E7%9D%80GPT%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/05-%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://r0ad.github.io/%E8%B7%9F%E7%9D%80GPT%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/05-%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-08-17T16:00:00.000Z</published>
    <updated>2024-03-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>代理模式（Proxy Design Pattern）在不改变原始类（或叫被代理类）代码的情况下，通过引入代理类来给原始类附加功能。</p><p>代理模式的关键角色包括：</p><ul><li>抽象主题（Subject）：定义了目标对象和代理对象的共同接口，这样一来在任何可以使用目标对象的地方都可以使用代理对象。</li><li>目标对象（Real Subject）：也称为被代理对象，是具体业务逻辑的实际执行者。</li><li>代理对象（Proxy）：负责代理目标对象，它持有对目标对象的引用，并在其自身的方法中调用目标对象的方法，同时还可以在调用前后进行一些其他的操作。</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>代理模式可以应用于许多场景，以下是几个常见的应用场景：</p><ul><li>远程代理（Remote Proxy）：代理模式可以用来在客户端和远程对象之间建立代理对象，隐藏了实际的网络通信细节。客户端通过代理对象调用远程对象的方法，而无需关心网络通信的具体实现。</li><li>虚拟代理（Virtual Proxy）：代理模式可以用来延迟加载资源密集或耗时的对象，只有当真正需要使用这些对象时，才会创建并加载真实的对象。虚拟代理可以在一定程度上提升系统性能和响应速度。</li><li>安全代理（Protection Proxy）：代理模式可以用来控制对敏感对象的访问权限。代理对象可以在调用目标对象方法之前检查权限，如果没有足够的权限，则不允许访问。</li><li>缓存代理（Caching Proxy）：代理模式可以用来缓存目标对象的计算结果，当相同的请求再次到达时，可以直接返回缓存的结果，避免重复计算，提高系统性能。</li><li>日志记录代理（Logging Proxy）：代理模式可以在目标对象的方法执行前后进行日志记录，用于跟踪和调试系统运行过程中的操作。</li><li>AOP（面向切面编程）：代理模式是实现AOP的基础，可以通过代理对象在目标对象的方法执行前后插入切面逻辑，例如日志、事务管理等。</li></ul><p>需要注意的是，代理模式并非适用于所有情况。在某些场景下，代理模式可能引入额外的复杂性和性能开销，需要根据具体问题和需求来决定是否使用代理模式。</p><h2 id="编程示例"><a href="#编程示例" class="headerlink" title="编程示例"></a>编程示例</h2><p>代理模式的实现方式有多种，常见的有静态代理和动态代理两种形式：</p><ul><li>静态代理：在编译时期就已经确定代理关系，代理类和目标类的关系在代码中明确指定。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象主题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 具体业务逻辑</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;开始处理请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Subject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Subject realSubject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;前置处理逻辑&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行一些额外的操作</span></span><br><span class="line">        realSubject.request();</span><br><span class="line">        <span class="comment">// 执行一些额外的操作</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;后置处理逻辑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">realSubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealSubject</span>();  <span class="comment">// 创建目标对象</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(realSubject);  <span class="comment">// 创建代理对象</span></span><br><span class="line"></span><br><span class="line">        proxy.request();  <span class="comment">// 通过代理对象调用目标对象的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>动态代理：在运行时动态生成代理类，无需提前编写代理类。Java 中的动态代理主要通过 <code>java.lang.reflect.Proxy</code> 类和 <code>java.lang.reflect.InvocationHandler</code> 接口实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象主题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 具体业务逻辑</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;开始处理请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// InvocationHandler 实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DynamicProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 执行一些额外的操作</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;前置处理逻辑&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="comment">// 执行一些额外的操作</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;后置处理逻辑&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">realSubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealSubject</span>();  <span class="comment">// 创建目标对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DynamicProxy</span>(realSubject);  <span class="comment">// 创建 InvocationHandler 实现类</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">proxy</span> <span class="operator">=</span> (Subject) Proxy.newProxyInstance(</span><br><span class="line">            realSubject.getClass().getClassLoader(),</span><br><span class="line">            realSubject.getClass().getInterfaces(),</span><br><span class="line">            handler</span><br><span class="line">        );  <span class="comment">// 创建动态代理对象</span></span><br><span class="line"></span><br><span class="line">        proxy.request();  <span class="comment">// 通过代理对象调用目标对象的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上内容基于GPT创建和整理。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://time.geekbang.org/column/article/227452">设计模式之美-王争</a></li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>来自一线全栈程序员nine的八年探索与实践，持续迭代中。欢迎关注“雨林寻北”或添加个人卫星codetrend（备注技术）。</p>]]></content>
    
    
    <summary type="html">代理模式（Proxy Design Pattern）在不改变原始类（或叫被代理类）代码的情况下，通过引入代理类来给原始类附加功能。通过GPT来一探原理。</summary>
    
    
    
    <category term="跟着GPT学设计模式" scheme="https://r0ad.github.io/categories/%E8%B7%9F%E7%9D%80GPT%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Gitlab使用或替换外部Nginx方法说明</title>
    <link href="https://r0ad.github.io/%E8%BF%90%E7%BB%B4/Gitlab%E4%BD%BF%E7%94%A8%E6%88%96%E6%9B%BF%E6%8D%A2%E5%A4%96%E9%83%A8Nginx%E6%96%B9%E6%B3%95%E8%AF%B4%E6%98%8E/"/>
    <id>https://r0ad.github.io/%E8%BF%90%E7%BB%B4/Gitlab%E4%BD%BF%E7%94%A8%E6%88%96%E6%9B%BF%E6%8D%A2%E5%A4%96%E9%83%A8Nginx%E6%96%B9%E6%B3%95%E8%AF%B4%E6%98%8E/</id>
    <published>2023-08-15T16:00:00.000Z</published>
    <updated>2023-12-13T09:23:36.112Z</updated>
    
    <content type="html"><![CDATA[<p>Gitlab 版本没更新就会导致依赖的组件库版本没更新，如果Nginx有漏洞，则需要升级Gitlab，或者第二个选择就是使用外部的Nginx作为服务容器。</p><h2 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h2><p>** 请勿直接在生产或者线上主机上执行。</p><p>具体操作步骤如下：</p><ol><li>备份配置文件 <code>cp /etc/gitlab/gitlab.rb /etc/gitlab/gitlab.rb.20230822.bak</code></li><li>禁用捆绑的 NGINX，在 /etc/gitlab/gitlab.rb 中设置：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx[&#x27;enable&#x27;] = false</span><br></pre></td></tr></table></figure><ol start="2"><li>下载正确的网络服务器配置，访问地址： <a href="https://gitlab.com/gitlab-org/gitlab-recipes/tree/master/web-server">GitLab recipes repository</a></li></ol><p>下面以http的Nginx为例说明，把配置文件放入/etc/nginx/conf.d（默认）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">upstream gitlab-workhorse &#123;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">On GitLab versions before 13.5, the location is</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">`/var/opt/gitlab/gitlab-workhorse/socket`. Change the following line</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">accordingly.</span></span><br><span class="line">  server unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Normal HTTP host</span></span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Either remove &quot;default_server&quot; from the listen line below 如果遇到问题可以删除 default_server</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># or delete the /etc/nginx/sites-enabled/default file. This will cause gitlab</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># to be served if you visit any address that your server responds to, eg.</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># the ip address of the server (http://x.x.x.x/)n 0.0.0.0:80 default_server;</span></span></span><br><span class="line">  listen 0.0.0.0:8088 default_server; # 修改你需要监听的端口</span><br><span class="line">  listen [::]:8088 default_server;</span><br><span class="line">  server_name localhost; ## Replace this with something like gitlab.example.com # 修改配置的域名</span><br><span class="line">  server_tokens off; ## Don&#x27;t show the nginx version number, a security best practice</span><br><span class="line">  root /opt/gitlab/embedded/service/gitlab-rails/public; # 默认位置就是这里</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># See app/controllers/application_controller.rb for headers set</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Individual nginx logs for this GitLab vhost</span></span></span><br><span class="line">  access_log  /var/log/nginx/gitlab_access.log;</span><br><span class="line">  error_log   /var/log/nginx/gitlab_error.log;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    gzip off;</span><br><span class="line"></span><br><span class="line">    ## https://github.com/gitlabhq/gitlabhq/issues/694</span><br><span class="line">    ## Some requests take more than 30 seconds.</span><br><span class="line">    proxy_read_timeout      300;</span><br><span class="line">    proxy_connect_timeout   300;</span><br><span class="line">    proxy_redirect          off;</span><br><span class="line"></span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">    proxy_set_header    Host                $http_host;</span><br><span class="line">    proxy_set_header    X-Real-IP           $remote_addr;</span><br><span class="line">    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header    X-Forwarded-Proto   $scheme;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://gitlab-workhorse;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>执行 <code>sudo gitlab-ctl reconfigure</code> 命令以使更改生效。</p></li><li><p>启动 nginx。</p></li></ol><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>权限不够，界面返回502。解决办法是修改nginx配置文件的启动用户为root或者授权给对应用户。</li><li>出现如下错误：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect() to unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket failed (13:Permission denied) while connecting to upstream</span><br></pre></td></tr></table></figure><p>选择以下选项之一进行修复：</p><ul><li>更新到 14.3 或更高版本，其中包含更新的 SELinux 策略。</li><li>手动获取和更新策略：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://gitlab.com/gitlab-org/omnibus-gitlab/-/raw/a9d6b020f81d18d778fb502c21b2c8f2265cabb4/files/gitlab-selinux/rhel/7/gitlab-13.5.0-gitlab-shell.pp</span><br><span class="line">semodule -i gitlab-13.5.0-gitlab-shell.pp</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.gitlab.cn/14.6/omnibus/settings/nginx.html#%E4%BD%BF%E7%94%A8%E9%9D%9E%E6%8D%86%E7%BB%91%E7%9A%84%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%99%A8">NGINX 配置-Gitlab</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Gitlab 版本没更新就会导致依赖的组件库版本没更新，如果Nginx有漏洞，则需要升级Gitlab，或者第二个选择就是使用外部的Nginx作为服务容器。&lt;/p&gt;
&lt;h2 id=&quot;升级步骤&quot;&gt;&lt;a href=&quot;#升级步骤&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="运维" scheme="https://r0ad.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows端微信多开的技巧</title>
    <link href="https://r0ad.github.io/%E7%BC%96%E7%A8%8B/Windows%E7%AB%AF%E5%BE%AE%E4%BF%A1%E5%A4%9A%E5%BC%80%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    <id>https://r0ad.github.io/%E7%BC%96%E7%A8%8B/Windows%E7%AB%AF%E5%BE%AE%E4%BF%A1%E5%A4%9A%E5%BC%80%E7%9A%84%E6%8A%80%E5%B7%A7/</id>
    <published>2023-07-31T16:00:00.000Z</published>
    <updated>2023-12-13T09:22:34.594Z</updated>
    
    <content type="html"><![CDATA[<p>Windows端微信会根据用户ID创建对应的目录，用于数据的保护和隔离。也就是说微信本身和QQ一样是支持多个同时登陆的，但是在PC端通过常规的方式打开微信只会打开同一个微信。</p><p>下面通过简单的教程教会微信多开的方法。</p><h2 id="通过脚本多开"><a href="#通过脚本多开" class="headerlink" title="通过脚本多开"></a>通过脚本多开</h2><ol><li>安装Windows版本微信，下载地址： <a href="https://weixin.qq.com/">https://weixin.qq.com/</a></li><li>找到对应的安装位置。有几种方法。<ul><li>在桌面找到微信图标，右键“属性”，点击“快捷方式”，其中“目标”的值就是接下来需要的内容。这里的内容是 “C:\Program Files (x86)\Tencent\WeChat\WeChat.exe”</li><li>在桌面找到微信图标，右键“属性”，点击“快捷方式”，点击“打开文件所在位置”，其中地址栏的路径和文件名“WeChat.exe”就是我们需要的内容。这里的路径也是 “C:\Program Files (x86)\Tencent\WeChat\WeChat.exe”</li></ul></li><li>在桌面创建一个文本文件，重命名为“微信多开.bat”。</li></ol><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span> C:\&quot;Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;</span><br><span class="line"><span class="built_in">start</span> C:\&quot;Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;</span><br></pre></td></tr></table></figure><p>注意事项如下：</p><ol><li>需要多开几个就复制几行。</li><li>路径的盘符也就是上面的“C”需要放在引号外面。</li></ol><p>下次需要多开微信的时候直接运行“微信多开.bat”即可多开。</p><h2 id="使用命令提示符多开"><a href="#使用命令提示符多开" class="headerlink" title="使用命令提示符多开"></a>使用命令提示符多开</h2><ol><li>安装Windows版本微信，下载地址： <a href="https://weixin.qq.com/">https://weixin.qq.com/</a></li><li>找到对应的安装位置。在桌面找到微信图标，右键“属性”，点击“快捷方式”，点击“打开文件所在位置”，其中地址栏的路径和文件名“WeChat.exe”就是我们需要的内容。这里的路径也是 “C:\Program Files (x86)\Tencent\WeChat\WeChat.exe”</li><li>在文件夹路径里面输入“cmd”即可打开命令提示符。</li><li>输入命令：<code>start WeChat.exe &amp; WeChat.exe</code> 并按回车。即可实现多开。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows端微信会根据用户ID创建对应的目录，用于数据的保护和隔离。也就是说微信本身和QQ一样是支持多个同时登陆的，但是在PC端通过常规的方式打开微信只会打开同一个微信。&lt;/p&gt;
&lt;p&gt;下面通过简单的教程教会微信多开的方法。&lt;/p&gt;
&lt;h2 id=&quot;通过脚本多开&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="编程技术" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Linux系统Java服务启停的通用shell</title>
    <link href="https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E5%9F%BA%E4%BA%8ELinux%E7%B3%BB%E7%BB%9FJava%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%81%9C%E7%9A%84%E9%80%9A%E7%94%A8shell/"/>
    <id>https://r0ad.github.io/%E7%BC%96%E7%A8%8B/%E5%9F%BA%E4%BA%8ELinux%E7%B3%BB%E7%BB%9FJava%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%81%9C%E7%9A%84%E9%80%9A%E7%94%A8shell/</id>
    <published>2023-07-27T16:00:00.000Z</published>
    <updated>2023-12-13T09:21:08.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>应用程序的启停最为显著的特征是端口的占用情况，例如Nginx、Tomcat。除此之外也可以通过进程的文件信息判断进程启停情况。在Linux系统常用的两个命令分别为 <code>lsof</code> 和 <code>ps</code>。在应用的启停中通过监听端口去判断是否存在进行启停是更合理的一种方式。实际使用过程中都会使用到。</p><h3 id="lsof用法"><a href="#lsof用法" class="headerlink" title="lsof用法"></a>lsof用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       lsof - list open files</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       lsof  [  -?abChKlnNOPRtUvVX  ]  [ -A A ] [ -c c ] [ +c c ] [ +|-d d ] [</span><br><span class="line">       +|-D D ] [ +|-e s ] [ +|-E ] [ +|-f [cfgGn] ] [ -F [f] ] [ -g [s]  ]  [</span><br><span class="line">       -i  [i] ] [ -k k ] [ +|-L [l] ] [ +|-m m ] [ +|-M ] [ -o [o] ] [ -p s ]</span><br><span class="line">       [ +|-r [t[m&lt;fmt&gt;]] ] [ -s [p:s] ] [ -S [t] ] [ -T [t] ] [ -u s ] [ +|-w</span><br><span class="line">       ] [ -x [fl] ] [ -z [z] ] [ -Z [Z] ] [ -- ] [names]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Lsof  revision 4.89 lists on its standard output file information about</span><br><span class="line">       files opened by processes for the following UNIX dialects:</span><br><span class="line"></span><br><span class="line">            Apple Darwin 9 and Mac OS X 10.[567]</span><br><span class="line">            FreeBSD 8.[234], 9.0, 10.0 and 11.0 for AMD64-based systems</span><br><span class="line">            Linux 2.1.72 and above for x86-based systems</span><br><span class="line">            Solaris 9, 10 and 11</span><br><span class="line"></span><br><span class="line">       (See the DISTRIBUTION section of this manual page  for  information  on</span><br><span class="line">       how to obtain the latest lsof revision.)</span><br><span class="line"></span><br><span class="line">       An  open file may be a regular file, a directory, a block special file,</span><br><span class="line">       a character special file, an executing text  reference,  a  library,  a</span><br><span class="line">       stream  or  a  network  file  (Internet socket, NFS file or UNIX domain</span><br><span class="line">       socket.)  A specific file or all the files in  a  file  system  may  be</span><br><span class="line">       selected by path.</span><br><span class="line"></span><br><span class="line">       Instead  of  a  formatted display, lsof will produce output that can be</span><br><span class="line">       parsed by other programs.  See the -F, option description, and the OUT‐</span><br><span class="line">       PUT FOR OTHER PROGRAMS section for more information.</span><br><span class="line"></span><br><span class="line">       In  addition to producing a single output list, lsof will run in repeat</span><br><span class="line">       mode.  In repeat mode it will produce output, delay,  then  repeat  the</span><br><span class="line">       output  operation  until stopped with an interrupt or quit signal.  See</span><br><span class="line">       the +|-r [t[m&lt;fmt&gt;]] option description for more information.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ps用法"><a href="#ps用法" class="headerlink" title="ps用法"></a>ps用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       ps - report a snapshot of the current processes.</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ps [options]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       ps displays information about a selection of the active processes.  If you want a repetitive update of the selection and the displayed information, use top(1) instead.</span><br><span class="line"></span><br><span class="line">       This version of ps accepts several kinds of options:</span><br><span class="line"></span><br><span class="line">       1   UNIX options, which may be grouped and must be preceded by a dash.</span><br><span class="line">       2   BSD options, which may be grouped and must not be used with a dash.</span><br><span class="line">       3   GNU long options, which are preceded by two dashes.</span><br><span class="line"></span><br><span class="line">       Options of different types may be freely mixed, but conflicts can appear.  There are some synonymous options, which are functionally identical, due to the many standards and ps</span><br><span class="line">       implementations that this ps is compatible with.</span><br><span class="line"></span><br><span class="line">       Note that &quot;ps -aux&quot; is distinct from &quot;ps aux&quot;.  The POSIX and UNIX standards require that &quot;ps -aux&quot; print all processes owned by a user named &quot;x&quot;, as well as printing all</span><br><span class="line">       processes that would be selected by the -a option.  If the user named &quot;x&quot; does not exist, this ps may interpret the command as &quot;ps aux&quot; instead and print a warning.  This</span><br><span class="line">       behavior is intended to aid in transitioning old scripts and habits.  It is fragile, subject to change, and thus should not be relied upon.</span><br><span class="line"></span><br><span class="line">       By default, ps selects all processes with the same effective user ID (euid=EUID) as the current user and associated with the same terminal as the invoker.  It displays the</span><br><span class="line">       process ID (pid=PID), the terminal associated with the process (tname=TTY), the cumulated CPU time in [DD-]hh:mm:ss format (time=TIME), and the executable name (ucmd=CMD).</span><br><span class="line">       Output is unsorted by default.</span><br><span class="line"></span><br><span class="line">       The use of BSD-style options will add process state (stat=STAT) to the default display and show the command args (args=COMMAND) instead of the executable name.  You can override</span><br><span class="line">       this with the PS_FORMAT environment variable. The use of BSD-style options will also change the process selection to include processes on other terminals (TTYs) that are owned by</span><br><span class="line">       you; alternately, this may be described as setting the selection to be the set of all processes filtered to exclude processes owned by other users or not on a terminal.  These</span><br><span class="line">       effects are not considered when options are described as being &quot;identical&quot; below, so -M will be considered identical to Z and so on.</span><br><span class="line"></span><br><span class="line">       Except as described below, process selection options are additive.  The default selection is discarded, and then the selected processes are added to the set of processes to be</span><br><span class="line">       displayed.  A process will thus be shown if it meets any of the given selection criteria.</span><br></pre></td></tr></table></figure><h2 id="通过监听端口停止应用"><a href="#通过监听端口停止应用" class="headerlink" title="通过监听端口停止应用"></a>通过监听端口停止应用</h2><p>使用lsof加关键词LISTEN获取端口，脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">author： sunz</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">file name: killProcessByPort.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 参数通过运行时传入</span></span></span><br><span class="line">port1=$1</span><br><span class="line">MSG=&quot;shutdown port %s at pid %s  %s \n&quot;</span><br><span class="line"></span><br><span class="line">killByPort()&#123;</span><br><span class="line">pids=$(lsof -i:$port1 | grep LISTEN | awk &#x27;&#123;print $2&#125;&#x27; |xargs)</span><br><span class="line">pids_len=$&#123;#pids[*]&#125;</span><br><span class="line"></span><br><span class="line">if test $pids_len -ne 1</span><br><span class="line">then</span><br><span class="line">printf &quot;port %s has been killed or not start yet. \n&quot; $port1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">for pid in $pids; do</span><br><span class="line">printf &quot;shutdown port %s at pid %s  %s \n&quot; $port1 $pid  &#x27;start&#x27;</span><br><span class="line">kill -9 $pid</span><br><span class="line">CheckKillResult $? $pid</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CheckKillResult()&#123;</span><br><span class="line">result=$1</span><br><span class="line">pid=$2</span><br><span class="line">if test $result -eq 0</span><br><span class="line">then </span><br><span class="line">printf &quot;shutdown port %s at pid %s  %s \n&quot; $port1 $pid  &quot;successs&quot;</span><br><span class="line">else</span><br><span class="line">printf &quot;shutdown port %s at pid %s  %s \n&quot; $port1 $pid  &quot;failed&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">killByPort</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eg <span class="variable">$killProcessByPort</span> 9430</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通过文件名停止应用"><a href="#通过文件名停止应用" class="headerlink" title="通过文件名停止应用"></a>通过文件名停止应用</h2><p>使用ps+awk加应用名关键词获取pid，脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">author： sunz</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">file name: killProcessByName.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 参数通过运行时传入</span></span></span><br><span class="line">name=$1</span><br><span class="line">MSG=&quot;shutdown app %s at pid %s  %s \n&quot;</span><br><span class="line"></span><br><span class="line">killByName()&#123;</span><br><span class="line">pids=$(ps -ef | grep $name |grep java | awk &#x27;&#123;print $2&#125;&#x27; |xargs)</span><br><span class="line">pids_len=$&#123;#pids[*]&#125;</span><br><span class="line"></span><br><span class="line">if test $pids_len -ne 1</span><br><span class="line">then</span><br><span class="line">printf &quot;app %s has been killed or not start yet. \n&quot; $name</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">for pid in $pids; do</span><br><span class="line">printf &quot;shutdown app %s at pid %s  %s \n&quot; $name $pid  &#x27;start&#x27;</span><br><span class="line">kill -9 $pid</span><br><span class="line">CheckKillResult $? $pid</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CheckKillResult()&#123;</span><br><span class="line">result=$1</span><br><span class="line">pid=$2</span><br><span class="line">if test $result -eq 0</span><br><span class="line">then </span><br><span class="line">printf &quot;shutdown app %s at pid %s  %s \n&quot; $name $pid  &quot;successs&quot;</span><br><span class="line">else</span><br><span class="line">printf &quot;shutdown app %s at pid %s  %s \n&quot; $name $pid  &quot;failed&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">killByName</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eg <span class="variable">$killProcessByName</span> spring-boot.jar</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通用启动Java程序脚本"><a href="#通用启动Java程序脚本" class="headerlink" title="通用启动Java程序脚本"></a>通用启动Java程序脚本</h2><p>通过函数式编写启动Java程序脚本有如下优点：</p><ul><li>简化启动应用的脚本维护；</li><li>统一维护一类程序的JVM参数；</li></ul><p>脚本信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">author： sunz</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">file name: startJavaProcess.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 参数通过运行时传入</span></span></span><br><span class="line"></span><br><span class="line">APP=$1</span><br><span class="line">startJavaProcess()&#123;</span><br><span class="line">  echo &quot;start $APP &quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># JVM参数基于Java8</span></span></span><br><span class="line">  JVM=&quot; -Xmx1344M -Xms1344M -Xmn448M -XX:MaxMetaspaceSize=256M -XX:MetaspaceSize=256M -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+CMSClassUnloadingEnabled -XX:+ParallelRefProcEnabled -XX:+CMSScavengeBeforeRemark &quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># 特殊版本java的路径可以通过全路径制定</span></span></span><br><span class="line">  nohup java $JVM -jar $APP &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">  CheckStartResult $? $APP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CheckStartResult()&#123;</span><br><span class="line">result=$1</span><br><span class="line">pid=$2</span><br><span class="line">if test $result -eq 0</span><br><span class="line">then </span><br><span class="line">printf &quot;startup  %s  %s \n&quot; $2 &quot;successs&quot;</span><br><span class="line">else</span><br><span class="line">printf &quot;startup  %s  %s \n&quot; $2 &quot;failed&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startJavaProcess</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> eg  <span class="variable">$startJavaProcess</span> zuul-boot-2.0.0-SNAPSHOT.jar</span></span><br></pre></td></tr></table></figure><h2 id="通过-bashrc-简化程序脚本"><a href="#通过-bashrc-简化程序脚本" class="headerlink" title="通过 ~/.bashrc 简化程序脚本"></a>通过 ~/.bashrc 简化程序脚本</h2><p><code>.bashrc</code> 在用户登录时获取该文件的 <code>aslias</code> 等信息。维护人员可以通过别名简化程序脚本，增加维护效率。</p><p><code>.bash_profile</code> 文件可以维护环境变量，也可以简化该脚本。</p><p><code>.bash_profile</code> 修改过程如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 bash_profile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi .bash_profile</span></span><br><span class="line">SHELL_HOME=&quot;/home/sunz/文档/files/shell/cshell&quot;</span><br><span class="line">killProcessByPort=&#x27;sh $SHELL_HOME/killProcessByPort.sh &#x27;</span><br><span class="line">export killProcessByPort</span><br><span class="line">startJavaProcess=&#x27;sh $SHELL_HOME/startJavaProcess.sh &#x27;</span><br><span class="line">export startJavaProcess</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 bash_profile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">source</span> .bash_profile</span></span><br></pre></td></tr></table></figure><p><code>.bashrc</code> 修改过程如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 bash_profile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi .bash_profile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 <span class="built_in">alias</span> 方法</span></span><br><span class="line">SHELL_HOME=&quot;/home/sunz/文档/files/shell/cshell&quot;</span><br><span class="line">alias startJavaProcess=&#x27;sh $SHELL_HOME/startJavaProcess.sh &#x27;</span><br><span class="line">alias killProcessByPort=&#x27;sh $SHELL_HOME/killProcessByPort.sh &#x27;</span><br></pre></td></tr></table></figure><p>注意不同系统的文件名可能存在差异。</p><h2 id="以user-gatewayin-svc为例子说明使用"><a href="#以user-gatewayin-svc为例子说明使用" class="headerlink" title="以user-gatewayin-svc为例子说明使用"></a>以user-gatewayin-svc为例子说明使用</h2><p>服务部署路径信息 <code>/app/user_projects/user-gatewayin-svc</code> ,目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x 3 app sunz     4096 2月   1 13:40 config</span><br><span class="line">-rw-r--r-- 1 app sunz       86 2月   1 13:47 start.sh</span><br><span class="line">-rw-r--r-- 1 app sunz       19 12月  9 15:57 stop.sh</span><br><span class="line">-rw-r--r-- 1 app sunz 57520835 1月   5 16:10 zuul-boot-2.0.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>其中 <code>start.sh</code> 内容如下;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">startJavaProcess <span class="string">&quot;zuul-boot-2.0.0-SNAPSHOT.jar --spring.profiles.active=dev,dev-in&quot;</span></span></span><br></pre></td></tr></table></figure><p>其中 <code>stop.sh</code> 内容如下;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">killProcess 9450</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;应用程序的启停最为显著的特征是端口的占用情况，例如Nginx、Tomcat。除此之外也可以通过进程的文件信息判断进程启停情况。在Linux系</summary>
      
    
    
    
    <category term="编程技术" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 中开发前端常用插件</title>
    <link href="https://r0ad.github.io/%E7%BC%96%E7%A8%8B/VsCode%E4%B8%AD%E5%BC%80%E5%8F%91%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>https://r0ad.github.io/%E7%BC%96%E7%A8%8B/VsCode%E4%B8%AD%E5%BC%80%E5%8F%91%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</id>
    <published>2023-07-24T16:00:00.000Z</published>
    <updated>2023-12-13T09:12:15.298Z</updated>
    
    <content type="html"><![CDATA[<p>Visual Studio Code 是一款开源全平台的代码开发工具，支持三大平台Windows、Linux、Mac。除了Mac平台没有使用过外，Linux的开发体验和Windows基本一致。</p><p>虽然Visual Studio Code 支持多种语言的开发，但是在后端有IntelliJ IDEA这样的开源版本提供使用，所以在Java Web开发中一般使用IDEA开发后端，Vs Code开发前端。</p><p>Visual Studio Code 作为一款轻量级的IDE，本身不是很强大，但是在开发插件的支持下，前端代码开发也能如鱼得水。</p><p>以下基于笔者开发Web过程中常用插件的推荐。</p><h2 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a>Prettier - Code formatter</h2><p>代码格式对于开发过程来说是很重要的一件事，统一的代码格式能够代码更好的代码阅读体验。</p><p>Prettier 支持多种语言的代码格式化，包括 Js、Vue、Html、Css等等。</p><p>通过搜索 <code>Prettier - Code formatter</code> 安装。</p><h2 id="Vue-Language-Features-Volar"><a href="#Vue-Language-Features-Volar" class="headerlink" title="Vue Language Features (Volar)"></a>Vue Language Features (Volar)</h2><p>Vue 官方出品支持Vue框架源码开发的插件，使得开发Vue源码更加方便。</p><p>包括 Vue文件的高亮显示、ESLint的语法集成支持、代码格式化等等。开发Vue必备。</p><p>通过搜索 <code>Volar</code> 安装。</p><p>其它开发vue的辅助推荐还包括 <code>Vue Peek</code> 文件跳转、 <code>vue-helper</code> 对  Element-UI, VUX, IVIEW 的增加开发体验。</p><h2 id="JavaScript-ES6-code-snippets"><a href="#JavaScript-ES6-code-snippets" class="headerlink" title="JavaScript (ES6) code snippets"></a>JavaScript (ES6) code snippets</h2><p>提供 ES6 语法的代码提示，通过缩写就能写出常用的代码。</p><p>例如输入 <code>clo</code> 就能打印对象 <code> console.log(&#39;object :&gt;&gt; &#39;, object);</code> 。</p><p>支持的缩写包括 Import and export 、 Various methods 、Console methods 等等。</p><p>通过搜索 <code>JavaScript (ES6) code snippets</code> 安装。</p><h2 id="Markdown-Preview-Enhanced"><a href="#Markdown-Preview-Enhanced" class="headerlink" title="Markdown Preview Enhanced"></a>Markdown Preview Enhanced</h2><p>程序员写文档必备的markdown语法，这款插件提供markdown的文档、图标语法、函数语法的支持。还可以导出和预览markdown文档。</p><p>通过搜索 <code>Markdown Preview Enhanced</code> 安装。</p><h2 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a>markdownlint</h2><p>markdown的语法检查支持，还提供了一部分程序修正功能。很实用、很方便。对于不熟悉markdown语法的人很是有用。</p><p>通过搜索 <code>markdownlint</code> 安装。</p><h2 id="GitLens-—-Git-supercharged"><a href="#GitLens-—-Git-supercharged" class="headerlink" title="GitLens — Git supercharged"></a>GitLens — Git supercharged</h2><p>VsCode的git使用体验不是很好，通过该插件能增强git的使用过程。</p><p>通过搜索 <code>GitLens</code> 安装。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://code.visualstudio.com/docs">Visual Studio Code Doc</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Visual Studio Code 是一款开源全平台的代码开发工具，支持三大平台Windows、Linux、Mac。除了Mac平台没有使用过外，Linux的开发体验和Windows基本一致。&lt;/p&gt;
&lt;p&gt;虽然Visual Studio Code 支持多种语言的开发，但是</summary>
      
    
    
    
    <category term="编程技术" scheme="https://r0ad.github.io/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>RabbitMQ 的安装和使用</title>
    <link href="https://r0ad.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/RabbitMQ%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://r0ad.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/RabbitMQ%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2023-03-16T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>RabbitMQ 作为一个开源的消息中间件广泛使用。</p><ul><li>支持分布式部署。</li><li>异步消息传递，支持多种消息协议、消息队列、送达确认、灵活的队列路由、多种交换类型。</li><li>提供多种监听和管理工具，HTTP-API, 命令行工具command line tool, UI界面。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="容器安装"><a href="#容器安装" class="headerlink" title="容器安装"></a>容器安装</h3><p>目前最新版本安装和启动命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.11-management</span><br></pre></td></tr></table></figure><h3 id="Linux或Windows安装"><a href="#Linux或Windows安装" class="headerlink" title="Linux或Windows安装"></a>Linux或Windows安装</h3><p>通过官网提供的安装包安装即可。具体安装方法可查看 <a href="https://www.rabbitmq.com/install-windows.html">https://www.rabbitmq.com/install-windows.html</a> 。</p><ul><li>先安装Erlang。</li><li>安装对应的 RabbitMQ 安装包。</li></ul><h3 id="RabbitMQ访问"><a href="#RabbitMQ访问" class="headerlink" title="RabbitMQ访问"></a>RabbitMQ访问</h3><p>通过UI界面访问对应的系统。</p><ul><li>登录地址 <code>127.0.0.1:15762</code> 。</li><li>账号密码默认 guest\guest 。</li></ul><h2 id="Springboot集成RabbitMQ"><a href="#Springboot集成RabbitMQ" class="headerlink" title="Springboot集成RabbitMQ"></a>Springboot集成RabbitMQ</h2><ol><li>修改依赖加入RabbitMQ启动项目，此处以maven为例子说明。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- rabbitmq --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>增加 rabbitmq 配置。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">boot-rabbitmq</span></span><br><span class="line">  <span class="comment"># rabbitmq 配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="comment"># Redis 服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment"># 连接端口号</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure><ol start="3"><li>增加 rabbit相关配置。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注入配置bean相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动装配RabbitMQ的链接工厂实例</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CachingConnectionFactory connectionFactory;</span><br><span class="line">    <span class="comment">// 自动装配消息监听器所在的容器工厂配置类实例</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpleRabbitListenerContainerFactoryConfigurer factoryConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单一消费者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;singleListenerContainer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title function_">listenerContainer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SimpleRabbitListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRabbitListenerContainerFactory</span>();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        factory.setMessageConverter(<span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>());</span><br><span class="line">        factory.setConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">        factory.setMaxConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">        factory.setPrefetchCount(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个消费者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;multiListenerContainer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title function_">multiListenerContainer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SimpleRabbitListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRabbitListenerContainerFactory</span>();</span><br><span class="line">        factoryConfigurer.configure(factory,connectionFactory);</span><br><span class="line">        factory.setMessageConverter(<span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>());</span><br><span class="line">        factory.setAcknowledgeMode(AcknowledgeMode.NONE);</span><br><span class="line">        factory.setConcurrentConsumers(<span class="number">10</span>);</span><br><span class="line">        factory.setMaxConcurrentConsumers(<span class="number">15</span>);</span><br><span class="line">        factory.setPrefetchCount(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RabbitMQ发送消息的操作组件实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">rabbitTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        connectionFactory.setPublisherConfirms(<span class="literal">true</span>);</span><br><span class="line">        connectionFactory.setPublisherReturns(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory);</span><br><span class="line">        rabbitTemplate.setMandatory(<span class="literal">true</span>);</span><br><span class="line">        rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -&gt; log.info(<span class="string">&quot;消息发送成功:correlationData(&#123;&#125;),ack(&#123;&#125;),cause(&#123;&#125;)&quot;</span>,correlationData,ack,cause));</span><br><span class="line">        rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -&gt; log.info(<span class="string">&quot;消息丢失:exchange(&#123;&#125;),route(&#123;&#125;),replyCode(&#123;&#125;),replyText(&#123;&#125;),message:&#123;&#125;&quot;</span>,exchange,routingKey,replyCode,replyText,message));</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h2 id="Springboot使用RabbitMQ"><a href="#Springboot使用RabbitMQ" class="headerlink" title="Springboot使用RabbitMQ"></a>Springboot使用RabbitMQ</h2><ol><li>启动的配置类注入对应的队列，包括队列名称、交换机、路由。</li><li>使用 RabbitTemplate 作为生产者发送消息。</li><li>@RabbitListener 作为消费者监听对应队列消费消息。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 环境变量配置</span></span></span><br><span class="line">mq.env=local</span><br><span class="line">mq.basic.info.queue.name=$&#123;mq.env&#125;.middleware.mq.basic.info.queue</span><br><span class="line">mq.basic.info.exchange.name=$&#123;mq.env&#125;.middleware.mq.basic.info.exchange</span><br><span class="line">mq.basic.info.routing.key.name=$&#123;mq.env&#125;.middleware.mq.basic.info.routing.key</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * springboot 启动时去5672 端口监听配置的所有监听队列，</span></span><br><span class="line"><span class="comment"> * 若这个队列不存在，监听不到则会报错，需要在程序启动时注入这个队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义读取配置文件的环境变量实例</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**创建简单消息模型：队列、交换机和路由 **/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;basicQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">basicQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(env.getProperty(<span class="string">&quot;mq.basic.info.queue.name&quot;</span>),<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建交换机：在这里以DirectExchange为例，在后面章节中我们将继续详细介绍这种消息模型</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">basicExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(env.getProperty(<span class="string">&quot;mq.basic.info.exchange.name&quot;</span>),<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">basicBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(basicQueue()).to(basicExchange()).with(env.getProperty(<span class="string">&quot;mq.basic.info.routing.key.name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送消息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(String message)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!ObjectUtils.isEmpty(message))&#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               rabbitTemplate.setExchange(env.getProperty(<span class="string">&quot;mq.basic.info.exchange.name&quot;</span>));</span><br><span class="line">               rabbitTemplate.setRoutingKey(env.getProperty(<span class="string">&quot;mq.basic.info.routing.key.name&quot;</span>));</span><br><span class="line"></span><br><span class="line">               Message msg=MessageBuilder.withBody(message.getBytes(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                       .setDeliveryMode(MessageDeliveryMode.PERSISTENT).build();</span><br><span class="line"></span><br><span class="line">               rabbitTemplate.convertAndSend(msg);</span><br><span class="line"></span><br><span class="line">               log.info(<span class="string">&quot;基本消息模型-生产者-发送消息：&#123;&#125; &quot;</span>,message);</span><br><span class="line">           &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">               log.error(<span class="string">&quot;基本消息模型-生产者-发送消息发生异常：&#123;&#125; &quot;</span>,message,e.fillInStackTrace());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;$&#123;mq.basic.info.queue.name&#125;&quot;,containerFactory = &quot;singleListenerContainer&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumeMsg</span><span class="params">(<span class="meta">@Payload</span> <span class="type">byte</span>[] msg)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          String message=<span class="keyword">new</span> <span class="title class_">String</span>(msg,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">          log.info(<span class="string">&quot;基本消息模型-消费者-监听消费到消息：&#123;&#125; &quot;</span>,message);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">          log.error(<span class="string">&quot;基本消息模型-消费者-发生异常：&quot;</span>,e.fillInStackTrace());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="RabbitMQ常见消息模式"><a href="#RabbitMQ常见消息模式" class="headerlink" title="RabbitMQ常见消息模式"></a>RabbitMQ常见消息模式</h2><h3 id="Simple-模式"><a href="#Simple-模式" class="headerlink" title="Simple 模式"></a>Simple 模式</h3><p>Simple 模式是最简单的一个模式，由一个生产者，一个队列，一个消费者组成，生产者将消息通过交换机（此时，图中并没有交换机的概念，如不定义交换机，会使用默认的交换机）把消息存储到队列，消费者从队列中取出消息进行处理。</p><h3 id="Fanout-模式"><a href="#Fanout-模式" class="headerlink" title="Fanout 模式"></a>Fanout 模式</h3><p>Fanout——发布订阅模式，是一种广播机制。</p><p>此模式包括：一个生产者、一个交换机 (exchange)、多个队列、多个消费者。生产者将消息发送到交换机，交换机不存储消息，将消息存储到队列，消费者从队列中取消息。如果生产者将消息发送到没有绑定队列的交换机上，消息将丢失。</p><h3 id="Direct-模式"><a href="#Direct-模式" class="headerlink" title="Direct 模式"></a>Direct 模式</h3><p>Direct 模式是在 Fanout 模式基础上添加了 routing key，Fanout（发布/订阅）模式是交换机将消息存储到所有绑定的队列中，而 Direct 模式是在此基础上，添加了过滤条件，交换机只会将消息存储到满足 routing key 的队列中。</p><h3 id="Topic-模式"><a href="#Topic-模式" class="headerlink" title="Topic 模式"></a>Topic 模式</h3><p>Topic 模式是生产者通过交换机将消息存储到队列后，交换机根据绑定队列的 routing key 的值进行通配符匹配，如果匹配通过，消息将被存储到该队列，如果 routing key 的值匹配到了多个队列，消息将会被发送到多个队列；如果一个队列也没匹配上，该消息将丢失。</p><h2 id="RabbitMQ常见使用场景"><a href="#RabbitMQ常见使用场景" class="headerlink" title="RabbitMQ常见使用场景"></a>RabbitMQ常见使用场景</h2><p>解耦、削峰、异步</p><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>在微服务架构体系中，微服务A需要与微服务B进行通信，传统的做法是A调用B的接口。但这样做如果系统B无法访问或连接超时，系统A需要等待，直到系统B做出响应，并且A与B存在严重的耦合现象。如果引入消息队列进行系统AB的通信，流程是这样的：</p><ul><li>系统A将消息存储到消息队列中，返回成功信息</li><li>系统B从队列中获取消息，进行处理操作</li><li>系统A将消息放到队列中，就不用关心系统B是否可以获取等其他事情了，实现了两个系统间的解耦。</li></ul><p>使用场景：</p><p>短信、邮件通知</p><h3 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h3><p>系统A每秒请求100个，系统可以稳定运行，但如果在秒杀活动中，每秒并发达到1w个，但系统最大处理能力只能每秒处理 1000 个，所以，在秒杀活动中，系统服务器会出现宕机的现象。如果引入 MQ ，可以解决这个问题。每秒 1w个请求会导致系统崩溃，那我们让用户发送的请求都存储到队列中，由于系统最大处理能力是每秒1000个请求，让系统A每秒只从队列中拉取1000个请求，保证系统能稳定运行，在秒杀期间，请求大量进入到队列，积压到MQ中，而系统每秒只从队列中取1000个请求处理。这种短暂的高峰期积压是没问题的，因为高峰期一旦过去，每秒请求数迅速递减，而系统每秒还是从队列中取1000个请求进行处理，系统会快速将积压的消息消费掉。</p><p>使用场景：</p><p>秒杀活动<br>团抢活动</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>用户注册，需要发送注册邮件和注册短信，传统的做法有两种：串行、并行。</p><ul><li>串行方式：将注册信息写库后（50ms），发送邮件（50ms），再发送短信（50ms），任务完成后，返回客户端，共耗时（150ms）</li><li>并行方式：将注册信息写库后（50ms），开启子线程让发送邮件和发送短信同时进行（50ms），返回客户端，共耗时（100ms）</li><li>引入MQ，将注册信息写库（50ms），将发送邮件和短信的操作写入队列（5ms），返回客户端，而消费者什么时候从队列中取消息进行处理，不用关心，共耗时（55ms）</li></ul><p>使用场景：</p><p>将不是必须等待响应结果的业务逻辑进行异步处理</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.rabbitmq.com/download.html">Downloading and Installing RabbitMQ</a></li><li><a href="https://mp.weixin.qq.com/s/hgf6rS8LVDxz9sYeL8i9RA">一文搞懂 RabbitMQ 常用模式</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;RabbitMQ 作为一个开源的消息中间件广泛使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持分布式部署。&lt;/li&gt;
&lt;li&gt;异步消息传递，支持多种消</summary>
      
    
    
    
    <category term="中间件实战" scheme="https://r0ad.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis的安装和使用</title>
    <link href="https://r0ad.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/Redis%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://r0ad.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/Redis%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2023-03-15T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Redis 是基于内存的、采用Key-Value结构化存储的NoSQL数据库，底层采用单线程和多路IO复用模型加快查询速度。</p><ul><li>支持多种数据格式的存储；</li><li>支持持久化存储；</li><li>支持集群部署。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p>Redis 官方不支持Windows的安装，通过启用windows自带的WSL2 （(Windows Subsystem for Linux）Linux子系统工具可以使用和安装。<br>Windows 版本要求大于10 。</p><p>具体安装流程和Linux安装一致。</p><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><p>大多数Linux发行版本提供了Redis的安装包，通过安装软件包命令可以从远程安装对应的工具。</p><p>Ubuntu/Debian 系统的安装流程如下：</p><ol><li>添加Redis官方软件仓库源到Apt软件。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line">echo &quot;deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/redis.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install redis</span><br></pre></td></tr></table></figure><ol start="2"><li>前置要求:如果运行的像是docker这类最小发行版本需要先安装 <code>lsb-release</code> 。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lsb-release</span><br></pre></td></tr></table></figure><h3 id="Redis启动"><a href="#Redis启动" class="headerlink" title="Redis启动"></a>Redis启动</h3><p>Linux Ubuntu/Debian 系统启动命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service redis-server start</span><br></pre></td></tr></table></figure><h3 id="Redis访问"><a href="#Redis访问" class="headerlink" title="Redis访问"></a>Redis访问</h3><p>通过官方的Cli工具访问：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis-cli </span><br><span class="line"></span><br><span class="line">Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]</span><br><span class="line">  -h &lt;hostname&gt;      Server hostname (default: 127.0.0.1).</span><br><span class="line">  -p &lt;port&gt;          Server port (default: 6379).</span><br><span class="line">  -s &lt;socket&gt;        Server socket (overrides hostname and port).</span><br><span class="line">  -a &lt;password&gt;      Password to use when connecting to the server.</span><br><span class="line">                     You can also use the REDISCLI_AUTH environment</span><br><span class="line">                     variable to pass this password more safely</span><br><span class="line">                     (if both are used, this argument takes precedence).</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h3><p>详细配置例子查看 <a href="https://redis.io/docs/management/config-file/">https://redis.io/docs/management/config-file/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Accept connections on the specified port, default is 6379 (IANA <span class="comment">#815344).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If port 0 is specified Redis will not listen on a TCP socket.</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Close the connection after a client is idle <span class="keyword">for</span> N seconds (0 to <span class="built_in">disable</span>)</span></span><br><span class="line">timeout 60</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IMPORTANT NOTE: starting with Redis 6 <span class="string">&quot;requirepass&quot;</span> is just a compatibility</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">layer on top of the new ACL system. The option effect will be just setting</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the password <span class="keyword">for</span> the default user. Clients will still authenticate using</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">AUTH &lt;password&gt; as usually, or more explicitly with AUTH default &lt;password&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> they follow the new protocol: both will work.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The requirepass is not compatible with aclfile option and the ACL LOAD</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">command</span>, these will cause requirepass to be ignored.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">requirepass redis1234</span></span><br></pre></td></tr></table></figure><h3 id="分布式部署"><a href="#分布式部署" class="headerlink" title="分布式部署"></a>分布式部署</h3><p>需要修改集群的相关配置，此处从略。 详情可参考网络或者 <a href="https://redis.io/docs/management/replication/">https://redis.io/docs/management/replication/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################### REDIS CLUSTER  ###############################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Normal Redis instances can<span class="string">&#x27;t be part of a Redis Cluster; only nodes that are</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">started as cluster nodes can. In order to start a Redis instance as a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">cluster node enable the cluster support uncommenting the following:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">cluster-enabled yes</span></span></span><br></pre></td></tr></table></figure><h2 id="Springboot集成redis"><a href="#Springboot集成redis" class="headerlink" title="Springboot集成redis"></a>Springboot集成redis</h2><ol><li>修改依赖加入Redis启动项目，此处以maven为例子说明。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改配置，指定redis启动。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># Redis 配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># Redis 服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment"># 连接端口号</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># 数据库索引（0 - 15）</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">redis1234</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">600000</span></span><br><span class="line">    <span class="comment"># lettuce 参数</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 最大连接数(使用负值表示没有限制) 默认为 8</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># 最大阻塞等待时间(使用负值表示没有限制) 默认为 -1 ms</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 最大空闲连接 默认为 8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">5</span></span><br><span class="line">        <span class="comment"># 最小空闲连接 默认为 0</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>增加 RedisTemplate 序列化配置，以FastJSON2为例子说明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">GenericFastJsonRedisSerializer</span> <span class="variable">fastJsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericFastJsonRedisSerializer</span>();</span><br><span class="line">        redisTemplate.setDefaultSerializer(fastJsonRedisSerializer);<span class="comment">//设置默认的Serialize，包含 keySerializer &amp; valueSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(fastJsonRedisSerializer);<span class="comment">//单独设置keySerializer</span></span><br><span class="line">        redisTemplate.setValueSerializer(fastJsonRedisSerializer);<span class="comment">//单独设置valueSerializer</span></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用的demo，通过RedisTemplate访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;demo&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/v1/demo/&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;get&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;get&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> valueOperations.get(key);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;set&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;set&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">set</span><span class="params">(String key,String val)</span> &#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(key,val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;delete&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://redis.io/docs/getting-started/installation/install-redis-on-linux/">Install Redis on Linux</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Redis 是基于内存的、采用Key-Value结构化存储的NoSQL数据库，底层采用单线程和多路IO复用模型加快查询速度。&lt;/p&gt;
&lt;ul</summary>
      
    
    
    
    <category term="中间件实战" scheme="https://r0ad.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Java函数式编程</title>
    <link href="https://r0ad.github.io/JavaEngineer/Java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://r0ad.github.io/JavaEngineer/Java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2023-03-11T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>现在主流的编程范式主要有三种，面向过程、面向对象和函数式编程。函数式编程作为一种补充，有很大存在、发展和学习的意义。</li><li>函数内部涉及的变量都是局部变量，不会像面向对象编程那样，共享类成员变量，也不会像面向过程编程那样，共享全局变量。</li><li>函数式接口可以将函数作为一个参数传入方法中进行使用。</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>函数式编程因其编程的特殊性，仅在科学计算、数据处理、统计分析等领域，才能更好地发挥它的优势，所以它并不能完全替代更加通用的面向对象编程范式。但是作为一种补充，它也有很大存在、发展和学习的意义。</p><p>函数式编程更符合数学上函数映射的思想。具体到编程语言层面，我们可以使用Lambda表达式来快速编写函数映射，函数之间通过链式调用连接到一起，完成所需业务逻辑。Java的Lambda表达式是后来才引入的，由于函数式编程在并行处理方面的优势，正在被大量应用在大数据计算领域。</p><h2 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h2><p>现在主流的编程范式主要有三种，面向过程、面向对象和函数式编程。</p><p>面向对象编程最大的特点是：以类、对象作为组织代码的单元以及它的四大特性。</p><p>面向过程编程最大的特点是：以函数作为组织代码的单元，数据与方法相分离。</p><ul><li>函数式编程并非一个很新的东西，早在50多年前就已经出现了。近几年，函数式编程越来越被人关注，出现了很多新的函数式编程语言，比如Clojure、Scala、Erlang等。一些非函数式编程语言也加入了很多特性、语法、类库来支持函数式编程，比如Java、Python、Ruby、JavaScript等。除此之外，Google Guava也有对函数式编程的增强功能。</li><li>函数式编程因其编程的特殊性，仅在科学计算、数据处理、统计分析等领域，才能更好地发挥它的优势，所以它并不能完全替代更加通用的面向对象编程范式。但是作为一种补充，它也有很大存在、发展和学习的意义。</li><li>函数式编程中的“函数”，并不是指我们编程语言中的“函数”概念，而是指数学“函数”或者“表达式”（例如：y=f(x)）。不过，在编程实现的时候，对于数学“函数”或“表达式”，我们一般习惯性地将它们设计成函数。</li><li>函数式编程最独特的地方在于它的编程思想。函数式编程认为程序可以用一系列数学函数或表达式的组合来表示。函数式编程是程序面向数学的更底层的抽象，将计算过程描述为表达式。</li><li>并不是所有的程序都适合这么做。函数式编程有它自己适合的应用场景，比如科学计算、数据处理、统计分析等。在这些领域，程序往往比较容易用数学表达式来表示，比起非函数式编程，实现同样的功能，函数式编程可以用很少的代码就能搞定。但是，对于强业务相关的大型业务系统开发来说，费劲吧啦地将它抽象成数学表达式，硬要用函数式编程来实现，显然是自讨苦吃。相反，在这种应用场景下，面向对象编程更加合适，写出来的代码更加可读、可维护。</li><li>函数式编程跟面向过程编程一样，也是以函数作为组织代码的单元。不过，它跟面向过程编程的区别在于，它的函数是无状态的。何为无状态？简单点讲就是，<strong>函数内部涉及的变量都是局部变量，不会像面向对象编程那样，共享类成员变量，也不会像面向过程编程那样，共享全局变量。</strong>函数的执行结果只与入参有关，跟其他任何外部变量无关。同样的入参，不管怎么执行，得到的结果都是一样的。这实际上就是数学函数或数学表达式的基本要求。</li></ul><h2 id="Java对函数式编程的支持"><a href="#Java对函数式编程的支持" class="headerlink" title="Java对函数式编程的支持"></a>Java对函数式编程的支持</h2><p>Java为函数式编程引入了三个新的语法概念：Stream类、Lambda表达式和函数接口（Functional Inteface）。Stream类用来支持通过“.”级联多个函数操作的代码编写方式；引入Lambda表达式的作用是简化代码编写；函数接口的作用是让我们可以把函数包裹成函数接口，来实现把函数当做参数一样来使用（Java 不像C那样支持函数指针，可以把函数直接当参数来使用）。</p><ul><li>stream： stream “.”表示调用某个对象的方法。为了支持上面这种级联调用方式，我们让每个函数都返回一个通用的Stream类对象。在Stream类上的操作有两种：中间操作和终止操作。中间操作返回的仍然是Stream类对象，而终止操作返回的是确定的值结果。</li><li>map、filter是中间操作，返回Stream类对象，可以继续级联其他操作；max是终止操作，返回的是OPTIONAL类对象。</li><li>lambda： lambda表达式在Java中只是一个语法糖而已，底层是基于函数接口来实现的。Lambda表达式包括三部分：输入、函数体、输出。</li><li>函数接口： Java没有函数指针这样的语法。所以它通过函数接口，将函数包裹在接口中，当作变量来使用。实际上，函数接口就是接口。不过，它也有自己特别的地方，那就是要求只包含一个未实现的方法。因为只有这样，Lambda表达式才能明确知道匹配的是哪个方法。如果有两个未实现的方法，并且接口入参、返回值都一样，那Java在翻译Lambda表达式的时候，就不知道表达式对应哪个方法了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">stream</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Optional&lt;Integer&gt; result = Stream.of(<span class="string">&quot;f&quot;</span>, <span class="string">&quot;ba&quot;</span>, <span class="string">&quot;hello&quot;</span>) <span class="comment">// of返回Stream&lt;String&gt;对象</span></span><br><span class="line">                .map(s -&gt; s.length()) <span class="comment">// map返回Stream&lt;Integer&gt;对象</span></span><br><span class="line">                .filter(l -&gt; l &lt;= <span class="number">3</span>) <span class="comment">// filter返回Stream&lt;Integer&gt;对象</span></span><br><span class="line">                .max((o1, o2) -&gt; o1 - o2); <span class="comment">// max终止操作：返回Optional&lt;Integer&gt;</span></span><br><span class="line">        System.out.println(result.get()); <span class="comment">// 输出2</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p><strong>@FunctionalInterface注解使用场景</strong>： 一个接口只要满足只有一个抽象方法的条件，即可以当成函数式接口使用，有没有 @FunctionalInterface 都无所谓。</p><p>如果使用了此注解，再往接口中新增抽象方法，编译器就会报错，编译不通过。换句话说，@FunctionalInterface 就是一个承诺，承诺该接口世世代代都只会存在这一个抽象方法。因此，凡是使用了这个注解的接口，开发者可放心大胆的使用Lambda来实例化。当然误用 @FunctionalInterface 带来的后果也是极其惨重的：如果哪天你把这个注解去掉，再加一个抽象方法，则所有使用Lambda实例化该接口的客户端代码将全部编译错误。</p><p>自定义函数式编程接口过程：</p><ul><li>通过 @FunctionalInterface 注解，申明一个函数式接口。</li><li>在方法中使用函数接口作为入参使用；</li><li>调用方法，传入函数接口的实现方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFuncInterface</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明一个函数式接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ToLongFunction</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="type">long</span> <span class="title function_">applyAsLong</span><span class="params">(T value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工具函数定义使用函数接口作为参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Util</span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">mapToLong</span><span class="params">(ToLongFunction&lt;? <span class="built_in">super</span> Collection&gt; mapper, List&lt;String&gt; val)</span> &#123;</span><br><span class="line">            Objects.requireNonNull(mapper);</span><br><span class="line">            <span class="keyword">return</span> mapper.applyAsLong(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用例子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; arr = Arrays.asList(<span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;3333&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> Util.mapToLong((item)-&gt; item.size(),arr);</span><br><span class="line">        System.out.println(size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/Ko41OG9yFAZZMEi6-C9kBQ">Java如何支持函数式编程？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;现在主流的编程范式主要有三种，面向过程、面向对象和函数式编程。函数式编程作为一种补充，有很大存在、发展和学习的意义。&lt;/li&gt;
</summary>
      
    
    
    
    <category term="JavaEngineer" scheme="https://r0ad.github.io/categories/JavaEngineer/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 注解机制和应用</title>
    <link href="https://r0ad.github.io/JavaEngineer/Java%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <id>https://r0ad.github.io/JavaEngineer/Java%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6%E5%92%8C%E5%BA%94%E7%94%A8/</id>
    <published>2023-03-11T16:00:00.000Z</published>
    <updated>2023-10-07T10:04:23.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Java注解是一种很常见的开发辅助模式，Java语言中的类、方法、变量、参数和包等都可以被标注。</li><li>通过自定义注解的使用可以优化业务开发的使用。</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java注解又称Java标注，是Java语言5.0版本开始支持加入源代码的特殊语法元数据。为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便的使用这些数据。</p><p>Java语言中的类、方法、变量、参数和包等都可以被标注。和Javadoc不同，Java标注可以通过反射获取注解内容。在编译器生成类文件时，注解可以被嵌入到字节码中。Java虚拟机可以保留注解内容，在运行时可以获取到注解内容。</p><h2 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h2><h3 id="Java内置注解"><a href="#Java内置注解" class="headerlink" title="Java内置注解"></a>Java内置注解</h3><p>Java 定义了一套注解，共有 7 个，3 个在 java.lang 中，剩下 4 个在 java.lang.annotation 中。</p><p> 1、作用在代码的注解是</p><ul><li><code>@Override</code> - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li><li><code>@Deprecated</code> - 标记过时方法。如果使用该方法，会报编译警告。</li><li><code>@SuppressWarnings</code> - 指示编译器去忽略注解中声明的警告。</li></ul><p>2、作用在其他注解的注解(或者说<strong>元注解</strong>)是:</p><ul><li><code>@Retention</code> - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</li><li><code>@Documented</code> - 标记这些注解是否包含在用户文档中。</li><li><code>@Target</code> - 标记这个注解应该是哪种 Java 成员。</li><li><code>@Inherited</code> - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li></ul><p>3、从 Java 7 开始，额外添加了 3 个注解:</p><ul><li><code>@SafeVarargs</code> - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li><li><code>@FunctionalInterface</code> - Java 8 开始支持，标识一个匿名函数或函数式接口。</li><li><code>@Repeatable</code> - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li></ul><h3 id="常见的库中的注解"><a href="#常见的库中的注解" class="headerlink" title="常见的库中的注解"></a>常见的库中的注解</h3><p>日常开发使用的库中也有着大量的注解，例如Jackson、SpringMvc等，下面就简单介绍下常见库中的常见注解使用</p><ul><li><p>Jackson<br>Jackson是一个通用的序列化库，程序员使用过程中可以使用它提供的注解机制对序列化进行定制化操作，比如:</p></li><li><p>使用@JsonIgnore和@JsonIgnoreProperties配置序列化的过程中忽略部分字段</p></li><li><p>使用@JsonManagedReference和@JsonBackReference可以配置实例之间的互相引用</p></li><li><p>使用@JsonProperty和@JsonFormat配置序列化的过程中字段名称和属性字段的格式等</p></li><li><p>Servlet3.0</p></li></ul><p>随着web开发技术的发展，Java web已经发展到了Servlet3.0，在早期使用Servlet的时候，我们只能在web.xml中配置，但是当我们使用Servlet3.0的时候开始，已经开始支持注解了，比如我们可以使用@WebServlet配置一个类为Servlet类。</p><ul><li>SpringMvc</li></ul><p>同样的，在web开发中，我们往往还会使用SpringMvc框架来简化开发，其框架的大量注解可以帮助我们减少大量的业务代码，例如一个请求的参数和字段/实例之间的映射关系，一个方法使用的是Http的什么请求方法，对应请求的某个路径，同样的请求如何解析，返回的响应报文格式定义等，这些都可以使用注解来简化实现，一个简单的Mvc操作如下:</p><p>其中@Controller注解标明当前的类是SpringMvc接管的一个Bean实例，@RequestMapping(“/hello”)则是代表当前Bean的前置请求路径比如是/hello开头， @GetMapping(“/test”)则是表示test方法被访问必须是Http请求的get请求，并且路径必须是/hello/test为路径前置，@ResponseBody注解则是标明了当前请求的相应信息按照默认的格式返回(根据后缀名来确定格式)</p><h2 id="注解创建"><a href="#注解创建" class="headerlink" title="注解创建"></a>注解创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Label &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Target注解表示当前注解可以使用在什么类型的元素上，这里的值可以多选，即一个注解可以作用在多种不同类型的元素上，具体的可选值在ElementType枚举类中，值如下:</p><table><thead><tr><th align="center">取值</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">TYPE</td><td align="center">表示作用在类、接口上</td></tr><tr><td align="center">FIELD</td><td align="center">表示作用在字段，包括枚举常量中</td></tr><tr><td align="center">METHOD</td><td align="center">表示作用在方法中</td></tr><tr><td align="center">PARAMETER</td><td align="center">表示作用在方法中的参数中</td></tr><tr><td align="center">CONSTRUCTOR</td><td align="center">表示作用在构造方法中</td></tr><tr><td align="center">LOCAL_VARIABLE</td><td align="center">表示作用在本地常量中</td></tr><tr><td align="center">MODULE</td><td align="center">表示作用在部分模块中(Java9引入的概念)</td></tr><tr><td align="center">ANNOTATION_TYPE</td><td align="center">表示当前注解作用在定义其他注解中，即元注解</td></tr><tr><td align="center">PACKAGE</td><td align="center">表示当前注解使用在包的申明中</td></tr><tr><td align="center">TYPE_PARAMETER</td><td align="center">表明当前注解使用在类型参数的申明中(Java8新增)</td></tr><tr><td align="center">TYPE_USE</td><td align="center">表明当前注解使用在具体使用类型中(Java8新增)</td></tr></tbody></table><p>当使用多个作用域范围的时候，使用{}包裹多个参数，比如@SuppressWarnings注解的Target就有多个，在Java7中的定义为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span> <span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>@Retention注解则是表明了当前注解可以保留到Java多个阶段的哪一个阶段，参数类型为RetentionPolicy枚举类，可取值如下:</p><table><thead><tr><th align="center">取值</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">SOURCE</td><td align="center">此注解仅在源代码阶段保留，编译后即丢失注解部分</td></tr><tr><td align="center">CLASS</td><td align="center">表示编译后依然保留在Class字节码中，但是加载时不一定会在内存中</td></tr><tr><td align="center">RUNTIME</td><td align="center">表示不仅保留在Class字节码中，一直到内存使用时仍然存在</td></tr></tbody></table><p>此注解有默认值，即当我们没有申明@Retention的时候，默认则是Class取值范围</p><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p>@Documented注解没有具体的参数，使用此元注解，则表示带有类型的注解将由javadoc记录</p><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><ul><li><code>@Inherited</code>  注解与注解的继承有关系，具体关系为如果使用了当前的元注解，则表示此注解可以被其他的注解的子类直接继承，但是需要注意的是对已实现接口上的注解将没有作用。</li><li><code>@Inherited</code> 注释表明注释类型可以从超类继承。当用户查询注释类型并且该类没有此类型的注释时，将查询类的超类以获取注释类型（默认情况下不是这样）。此注释仅适用于类声明。</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="业务开发的使用"><a href="#业务开发的使用" class="headerlink" title="业务开发的使用"></a>业务开发的使用</h3><p>基于Spring提供的AOP开发方法，可以简化业务代码开发中冗余的业务代码，对接口调用过程的前置处理、过程处理、后置处理。</p><ul><li>金融借贷系统对接了很多第三方的风控接口。调用接口前需要校验报文体中的签名字段 <code>sign</code> 。<ul><li>每个方法开头都写一份签名验签的代码。</li><li>将验签代码抽取成方法，方便复用。</li><li>新建 <code>@SignCheck</code> 注解，在切面里面写业务逻辑。</li></ul></li><li>应用开发过程的日志记录需要保存到消息中间件或者数据库。<ul><li>每个方法开头都写一份记录日志的代码。</li><li>将记录日志抽取成方法，方便复用。</li><li>新建 <code>@LogAccess</code> 注解，在切面里面写日志记录逻辑。</li></ul></li></ul><h3 id="工具开发的使用"><a href="#工具开发的使用" class="headerlink" title="工具开发的使用"></a>工具开发的使用</h3><ul><li>Lombok 通过注解 <code>@Getter</code> <code>@Setter</code> 等主机，在源码编译时添加对应的模板方法。</li><li>Fastjson 通过 <code>@JSONField</code> 定制序列化方法。指定JSON代码文本生成的别名。</li></ul><h3 id="自定义注解例子"><a href="#自定义注解例子" class="headerlink" title="自定义注解例子"></a>自定义注解例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTestAll</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义注解 Format</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Format &#123;</span><br><span class="line">        String <span class="title function_">pattern</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">        String <span class="title function_">timezone</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;GMT+8&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Label &#123;</span><br><span class="line">        String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射 Format Label，并且获取值做运算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SimpleFormatter</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; cls = obj.getClass();</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">for</span> (Field field : cls.getDeclaredFields()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!field.isAccessible()) &#123;</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 获取Label注解-输出的字段名称</span></span><br><span class="line">                    <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> field.getAnnotation(Label.class);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span> == label ? field.getName() : label.value();</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; field.getType() == Date.class) &#123;</span><br><span class="line">                        value = formatter(field, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    builder.append(String.format(<span class="string">&quot;%s ? %s \n&quot;</span>, name, value));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> builder.toString();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;格式化输出失败：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">formatter</span><span class="params">(Field field, Object value)</span> &#123;</span><br><span class="line">            <span class="type">Format</span> <span class="variable">format</span> <span class="operator">=</span> field.getAnnotation(Format.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == format) &#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> format.pattern();</span><br><span class="line">            <span class="type">String</span> <span class="variable">timezone</span> <span class="operator">=</span> format.timezone();</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern);</span><br><span class="line">            sdf.setTimeZone(TimeZone.getTimeZone(timezone));</span><br><span class="line">            <span class="keyword">return</span> sdf.format(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试的一个bo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="meta">@Label(&quot;姓名&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="meta">@Label(&quot;出生日期&quot;)</span></span><br><span class="line">        <span class="meta">@Format(pattern = &quot;yyyy/MM/dd&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Date born;</span><br><span class="line">        <span class="meta">@Label(&quot;分数&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Double score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试运算结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setBorn(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        student.setScore(<span class="number">244.0</span>);</span><br><span class="line">        System.out.println(SimpleFormatter.format(student));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出：</span></span><br><span class="line"><span class="comment">         * 姓名 ? 张三</span></span><br><span class="line"><span class="comment">         * 出生日期 ? 2023/03/12</span></span><br><span class="line"><span class="comment">         * 分数 ? 244.0 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/QoJnf2vPCWR5ClCjSkiPsQ">详解Java注解机制</a></li><li><a href="https://www.zhihu.com/question/47449512/answer/658228092">怎样理解 Java 注解和运用注解编程？ - bravo1988的回答 - 知乎</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Java注解是一种很常见的开发辅助模式，Java语言中的类、方法、变量、参数和包等都可以被标注。&lt;/li&gt;
&lt;li&gt;通过自定义注</summary>
      
    
    
    
    <category term="JavaEngineer" scheme="https://r0ad.github.io/categories/JavaEngineer/"/>
    
    
  </entry>
  
</feed>
